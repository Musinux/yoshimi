// PartUI.h
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#ifndef PartUI_h
#define PartUI_h
#include <FL/Fl.H>
// Original ZynAddSubFX author Nasca Octavian Paul
// Copyright (C) 2002-2005 Nasca Octavian Paul
// Copyright 2009-2011, Alan Calvert
// Copyright 2014, Will Godfrey    

// This file is part of yoshimi, which is free software: you can redistribute
// it and/or modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.

// yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
// later) for more details.

// You should have received a copy of the GNU General Public License along with
// yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA  02110-1301, USA.

// This file is derivative of ZynAddSubFX original code, modified August 2014

#include "EffUI.h"
    #include "BankUI.h"
    #include "ADnoteUI.h"
    #include "SUBnoteUI.h"
    #include "PADnoteUI.h"
    #include "Params/Controller.h"
    #include "Misc/ControllableByMIDIUI.h"
    #include "Misc/MiscFuncs.h"
#include "Misc/Part.h"
    #define MAX_INFO_TEXT_SIZE 256

class PartSysEffSend : public Fl_Group, private MiscFuncs {
  Fl_Group* make_window();
  Fl_Group *syseffsend;
  inline void cb_01_i(WidgetPDial*, void*);
  static void cb_01(WidgetPDial*, void*);
public:
  PartSysEffSend(int x, int y, int w, int h) ;
  void init(int npart_, int neff_, SynthEngine *_synth);
  ~PartSysEffSend();
private:
  int neff; 
  int npart; 
  SynthEngine *synth; 
};

class PartUI_ {
public:
  virtual void showparameters(int kititem,int engine);
};
#include <FL/Fl_Group.H>
#include <FL/Fl_Spinner.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Choice.H>

class PartKitItem : public Fl_Group {
  Fl_Group* make_window();
  Fl_Group *partkititem;
  Fl_Group *partkititemgroup;
public:
  Fl_Spinner *minkcounter;
private:
  inline void cb_minkcounter_i(Fl_Spinner*, void*);
  static void cb_minkcounter(Fl_Spinner*, void*);
  inline void cb_m_i(Fl_Button*, void*);
  static void cb_m(Fl_Button*, void*);
  inline void cb_M_i(Fl_Button*, void*);
  static void cb_M(Fl_Button*, void*);
  inline void cb_R_i(Fl_Button*, void*);
  static void cb_R(Fl_Button*, void*);
public:
  Fl_Button *adeditbutton;
private:
  inline void cb_adeditbutton_i(Fl_Button*, void*);
  static void cb_adeditbutton(Fl_Button*, void*);
public:
  Fl_Button *subeditbutton;
private:
  inline void cb_subeditbutton_i(Fl_Button*, void*);
  static void cb_subeditbutton(Fl_Button*, void*);
  Fl_Check_Button *mutedcheck;
  inline void cb_mutedcheck_i(Fl_Check_Button*, void*);
  static void cb_mutedcheck(Fl_Check_Button*, void*);
public:
  Fl_Counter *maxkcounter;
private:
  inline void cb_maxkcounter_i(Fl_Counter*, void*);
  static void cb_maxkcounter(Fl_Counter*, void*);
public:
  Fl_Button *labelbutton;
private:
  inline void cb_labelbutton_i(Fl_Button*, void*);
  static void cb_labelbutton(Fl_Button*, void*);
  Fl_Check_Button *adcheck;
  inline void cb_adcheck_i(Fl_Check_Button*, void*);
  static void cb_adcheck(Fl_Check_Button*, void*);
  Fl_Check_Button *subcheck;
  inline void cb_subcheck_i(Fl_Check_Button*, void*);
  static void cb_subcheck(Fl_Check_Button*, void*);
public:
  Fl_Choice *sendtoeffect;
private:
  inline void cb_sendtoeffect_i(Fl_Choice*, void*);
  static void cb_sendtoeffect(Fl_Choice*, void*);
public:
  Fl_Button *padeditbutton;
private:
  inline void cb_padeditbutton_i(Fl_Button*, void*);
  static void cb_padeditbutton(Fl_Button*, void*);
  Fl_Check_Button *padcheck;
  inline void cb_padcheck_i(Fl_Check_Button*, void*);
  static void cb_padcheck(Fl_Check_Button*, void*);
  Fl_Check_Button *enabledcheck;
  inline void cb_enabledcheck_i(Fl_Check_Button*, void*);
  static void cb_enabledcheck(Fl_Check_Button*, void*);
public:
  PartKitItem(int x,int y, int w, int h, const char *label=0);
  void refresh();
  void init(Part *part_, int n_, PartUI_ *partui_);
  ~PartKitItem();
private:
  Part *part; 
  int n; 
  char label[10]; 
  PartUI_ *partui; 
  SynthEngine *synth; 
};
#include <FL/Fl_Box.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Input.H>

class PartUI : public Fl_Group, PartUI_, private MiscFuncs, public ControllableByMIDIUI {
  Fl_Group* make_window();
public:
  Fl_Group *partgroup;
  Fl_Group *partgroupui;
  Fl_Box *instrumentaddbox;
  Fl_Box *instrumentsubbox;
  Fl_Box *instrumentpadbox;
  Fl_Button *instrumentlabel;
private:
  inline void cb_instrumentlabel_i(Fl_Button*, void*);
  static void cb_instrumentlabel(Fl_Button*, void*);
  inline void cb_Edit_i(Fl_Button*, void*);
  static void cb_Edit(Fl_Button*, void*);
  inline void cb_Velocity_i(WidgetPDial*, void*);
  static void cb_Velocity(WidgetPDial*, void*);
  inline void cb_Velocity1_i(WidgetPDial*, void*);
  static void cb_Velocity1(WidgetPDial*, void*);
public:
  WidgetPDial *partpan;
private:
  inline void cb_partpan_i(WidgetPDial*, void*);
  static void cb_partpan(WidgetPDial*, void*);
  inline void cb_Centre_i(Fl_Button*, void*);
  static void cb_Centre(Fl_Button*, void*);
public:
  WidgetPDial *partvol;
private:
  inline void cb_partvol_i(WidgetPDial*, void*);
  static void cb_partvol(WidgetPDial*, void*);
public:
  Fl_Check_Button *partGroupEnable;
private:
  inline void cb_partGroupEnable_i(Fl_Check_Button*, void*);
  static void cb_partGroupEnable(Fl_Check_Button*, void*);
public:
  Fl_Spinner *midich;
private:
  inline void cb_midich_i(Fl_Spinner*, void*);
  static void cb_midich(Fl_Spinner*, void*);
  inline void cb_Mode_i(Fl_Choice*, void*);
  static void cb_Mode(Fl_Choice*, void*);
  inline void cb_Portamento_i(Fl_Check_Button*, void*);
  static void cb_Portamento(Fl_Check_Button*, void*);
  inline void cb_Key_i(Fl_Spinner*, void*);
  static void cb_Key(Fl_Spinner*, void*);
  inline void cb_Key1_i(Fl_Spinner*, void*);
  static void cb_Key1(Fl_Spinner*, void*);
public:
  Fl_Scroll *toSysEfx;
private:
  inline void cb_Controllers_i(Fl_Button*, void*);
  static void cb_Controllers(Fl_Button*, void*);
public:
  Fl_Spinner *minkcounter;
private:
  inline void cb_minkcounter1_i(Fl_Spinner*, void*);
  static void cb_minkcounter1(Fl_Spinner*, void*);
public:
  Fl_Spinner *maxkcounter;
private:
  inline void cb_maxkcounter1_i(Fl_Spinner*, void*);
  static void cb_maxkcounter1(Fl_Spinner*, void*);
  inline void cb_m1_i(Fl_Button*, void*);
  static void cb_m1(Fl_Button*, void*);
  inline void cb_M1_i(Fl_Button*, void*);
  static void cb_M1(Fl_Button*, void*);
  inline void cb_R1_i(Fl_Button*, void*);
  static void cb_R1(Fl_Button*, void*);
  Fl_Double_Window *ctlwindow;
  inline void cb_Expr_i(Fl_Check_Button*, void*);
  static void cb_Expr(Fl_Check_Button*, void*);
  inline void cb_PanWdth_i(WidgetPDial*, void*);
  static void cb_PanWdth(WidgetPDial*, void*);
  inline void cb_FltCut_i(WidgetPDial*, void*);
  static void cb_FltCut(WidgetPDial*, void*);
  inline void cb_FltQ_i(WidgetPDial*, void*);
  static void cb_FltQ(WidgetPDial*, void*);
  inline void cb_BwDpth_i(WidgetPDial*, void*);
  static void cb_BwDpth(WidgetPDial*, void*);
  inline void cb_ModWh_i(WidgetPDial*, void*);
  static void cb_ModWh(WidgetPDial*, void*);
  inline void cb_PWheelB_i(Fl_Counter*, void*);
  static void cb_PWheelB(Fl_Counter*, void*);
  inline void cb_FMamp_i(Fl_Check_Button*, void*);
  static void cb_FMamp(Fl_Check_Button*, void*);
  inline void cb_Vol_i(Fl_Check_Button*, void*);
  static void cb_Vol(Fl_Check_Button*, void*);
  inline void cb_Sustain_i(Fl_Check_Button*, void*);
  static void cb_Sustain(Fl_Check_Button*, void*);
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
  inline void cb_Reset_i(Fl_Button*, void*);
  static void cb_Reset(Fl_Button*, void*);
  inline void cb_Rcv_i(Fl_Check_Button*, void*);
  static void cb_Rcv(Fl_Check_Button*, void*);
  inline void cb_time_i(WidgetPDial*, void*);
  static void cb_time(WidgetPDial*, void*);
  inline void cb_thresh_i(Fl_Counter*, void*);
  static void cb_thresh(Fl_Counter*, void*);
  inline void cb_th_i(Fl_Check_Button*, void*);
  static void cb_th(Fl_Check_Button*, void*);
  inline void cb_t_i(WidgetPDial*, void*);
  static void cb_t(WidgetPDial*, void*);
public:
  WidgetPDial *propta;
private:
  inline void cb_propta_i(WidgetPDial*, void*);
  static void cb_propta(WidgetPDial*, void*);
public:
  WidgetPDial *proptb;
private:
  inline void cb_proptb_i(WidgetPDial*, void*);
  static void cb_proptb(WidgetPDial*, void*);
  inline void cb_Proprt_i(Fl_Check_Button*, void*);
  static void cb_Proprt(Fl_Check_Button*, void*);
  inline void cb_BWdpth_i(WidgetPDial*, void*);
  static void cb_BWdpth(WidgetPDial*, void*);
  inline void cb_CFdpth_i(WidgetPDial*, void*);
  static void cb_CFdpth(WidgetPDial*, void*);
  inline void cb_Exp_i(Fl_Check_Button*, void*);
  static void cb_Exp(Fl_Check_Button*, void*);
  inline void cb_Exp1_i(Fl_Check_Button*, void*);
  static void cb_Exp1(Fl_Check_Button*, void*);
  inline void cb_Vol1_i(WidgetPDial*, void*);
  static void cb_Vol1(WidgetPDial*, void*);
  Fl_Double_Window *partfx;
public:
  Fl_Spinner *inseffnocounter;
private:
  inline void cb_inseffnocounter_i(Fl_Spinner*, void*);
  static void cb_inseffnocounter(Fl_Spinner*, void*);
public:
  Fl_Choice *insefftype;
private:
  inline void cb_insefftype_i(Fl_Choice*, void*);
  static void cb_insefftype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_insefftype[];
public:
  Fl_Group *inseffectuigroup;
  EffUI *inseffectui;
private:
  inline void cb_Close1_i(Fl_Button*, void*);
  static void cb_Close1(Fl_Button*, void*);
public:
  Fl_Choice *sendtochoice;
private:
  inline void cb_sendtochoice_i(Fl_Choice*, void*);
  static void cb_sendtochoice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_sendtochoice[];
public:
  Fl_Check_Button *bypasseff;
private:
  inline void cb_bypasseff_i(Fl_Check_Button*, void*);
  static void cb_bypasseff(Fl_Check_Button*, void*);
  inline void cb_C_i(Fl_Button*, void*);
  static void cb_C(Fl_Button*, void*);
  inline void cb_P_i(Fl_Button*, void*);
  static void cb_P(Fl_Button*, void*);
public:
  Fl_Double_Window *instrumentkitlist;
private:
  inline void cb_Close2_i(Fl_Button*, void*);
  static void cb_Close2(Fl_Button*, void*);
public:
  Fl_Scroll *kitlist;
private:
  inline void cb_Mode1_i(Fl_Choice*, void*);
  static void cb_Mode1(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Mode[];
  inline void cb_Drum_i(Fl_Check_Button*, void*);
  static void cb_Drum(Fl_Check_Button*, void*);
public:
  Fl_Double_Window *instrumenteditwindow;
  Fl_Check_Button *adsynenabledcheck;
private:
  inline void cb_adsynenabledcheck_i(Fl_Check_Button*, void*);
  static void cb_adsynenabledcheck(Fl_Check_Button*, void*);
public:
  Fl_Box *addbox;
  Fl_Button *adeditbutton;
private:
  inline void cb_adeditbutton1_i(Fl_Button*, void*);
  static void cb_adeditbutton1(Fl_Button*, void*);
public:
  Fl_Check_Button *subsynenabledcheck;
private:
  inline void cb_subsynenabledcheck_i(Fl_Check_Button*, void*);
  static void cb_subsynenabledcheck(Fl_Check_Button*, void*);
public:
  Fl_Box *subbox;
  Fl_Button *subeditbutton;
private:
  inline void cb_subeditbutton1_i(Fl_Button*, void*);
  static void cb_subeditbutton1(Fl_Button*, void*);
public:
  Fl_Check_Button *padsynenabledcheck;
private:
  inline void cb_padsynenabledcheck_i(Fl_Check_Button*, void*);
  static void cb_padsynenabledcheck(Fl_Check_Button*, void*);
public:
  Fl_Box *padbox;
  Fl_Button *padeditbutton;
private:
  inline void cb_padeditbutton1_i(Fl_Button*, void*);
  static void cb_padeditbutton1(Fl_Button*, void*);
  inline void cb_Kit_i(Fl_Button*, void*);
  static void cb_Kit(Fl_Button*, void*);
  inline void cb_Effects_i(Fl_Button*, void*);
  static void cb_Effects(Fl_Button*, void*);
  inline void cb_Author_i(Fl_Input*, void*);
  static void cb_Author(Fl_Input*, void*);
  inline void cb_Comments_i(Fl_Input*, void*);
  static void cb_Comments(Fl_Input*, void*);
  inline void cb_Type_i(Fl_Choice*, void*);
  static void cb_Type(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Type[];
public:
  Fl_Spinner *rnddet;
private:
  inline void cb_rnddet_i(Fl_Spinner*, void*);
  static void cb_rnddet(Fl_Spinner*, void*);
  inline void cb_Close3_i(Fl_Button*, void*);
  static void cb_Close3(Fl_Button*, void*);
public:
  PartUI(int x,int y, int w, int h, const char *label=0);
  void init(Part *part_,int npart_,BankUI *bankui_);
  void showparameters(int kititem,int engine);
  void find_engines();
  void setinstrumentlabel();
  void copylabeltopanel();
  void resetlabels();
  void seteditname();
  ~PartUI();
  void refresh();
  Part *part; 
private:
  BankUI *bankui; 
public:
  ADnoteUI *adnoteui; 
private:
  SUBnoteUI *subnoteui; 
  PADnoteUI *padnoteui; 
  PartSysEffSend *psyef[NUM_SYS_EFX]; 
public:
  int npart; 
private:
  int ninseff; 
  int lastkititem; 
  PartKitItem *partkititem[NUM_KIT_ITEMS]; 
  SynthEngine *synth; 
  int *plgroup; 
  int engine; 
};
#endif
