// Original ZynAddSubFX author Nasca Octavian Paul
// Copyright (C) 2002-2005 Nasca Octavian Paul
// Copyright 2009-2011, Alan Calvert
// Copyright 2014, Will Godfrey   

// This file is part of yoshimi, which is free software: you can redistribute
// it and/or modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.

// yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
// later) for more details.

// You should have received a copy of the GNU General Public License along with
// yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA  02110-1301, USA.

// This file is derivative of ZynAddSubFX original code, modified September 2014

// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "/home/louis/Documents/prog/Yoshimi/github/yoshimi/src/ConfigUI.h"
#include "Misc/SynthEngine.h"
#include "Misc/Bank.h"
#include "MasterUI.h"

void ConfigUI::cb_configwindow_i(Fl_Double_Window* o, void*) {
  o->hide();
}
void ConfigUI::cb_configwindow(Fl_Double_Window* o, void* v) {
  ((ConfigUI*)(o->user_data()))->cb_configwindow_i(o,v);
}

void ConfigUI::cb_AddSynth_i(Fl_Choice* o, void*) {
  //
    unsigned int old = synth->getRuntime().Oscilsize;
    unsigned int changed = 128 << o->value();
    if (old != changed)
    {
        synth->getRuntime().Oscilsize = changed;
        configChanged = true;
    };
}
void ConfigUI::cb_AddSynth(Fl_Choice* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_AddSynth_i(o,v);
}

Fl_Menu_Item ConfigUI::menu_AddSynth[] = {
 {"128", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"256", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"512", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"1024", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"2048", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"4096", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"8192", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"16384", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void ConfigUI::cb_Internal_i(Fl_Choice* o, void*) {
  //
    unsigned int old = synth->getRuntime().Buffersize;
    unsigned int changed = 64 << o->value();
    if (old != changed)
    {
        synth->getRuntime().Buffersize = changed;
        configChanged = true;
    };
}
void ConfigUI::cb_Internal(Fl_Choice* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Internal_i(o,v);
}

Fl_Menu_Item ConfigUI::menu_Internal[] = {
 {"64", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"128", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"256", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"512", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {"1024", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void ConfigUI::cb_PADsynth_i(Fl_Choice* o, void*) {
  //
                int tmp = synth->getRuntime().Interpolation;
                synth->getRuntime().Interpolation = (int) o->value();
                if (synth->getRuntime().Interpolation != tmp)
                  configChanged = true;
}
void ConfigUI::cb_PADsynth(Fl_Choice* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_PADsynth_i(o,v);
}

Fl_Menu_Item ConfigUI::menu_PADsynth[] = {
 {"Linear(fast)", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Cubic(slow)", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void ConfigUI::cb_Virtual_i(Fl_Choice* o, void*) {
  //
                int tmp = synth->getRuntime().VirKeybLayout;
                synth->getRuntime().VirKeybLayout = (int) o->value();
                if (synth->getRuntime().VirKeybLayout != tmp)
                  configChanged = true;
}
void ConfigUI::cb_Virtual(Fl_Choice* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Virtual_i(o,v);
}

Fl_Menu_Item ConfigUI::menu_Virtual[] = {
 {" ", 0,  0, 0, 1, FL_NORMAL_LABEL, 1, 11, 0},
 {"QWERTY", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Dvorak", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"QWERTZ", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"AZERTY", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

void ConfigUI::cb_compression_i(Fl_Counter* o, void*) {
  //
    unsigned int tmp = synth->getRuntime().GzipCompression;
    synth->getRuntime().GzipCompression = (unsigned int) o->value();
    if(synth->getRuntime().GzipCompression != tmp)
      configChanged = true;
}
void ConfigUI::cb_compression(Fl_Counter* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_compression_i(o,v);
}

void ConfigUI::cb_Send_i(Fl_Choice* o, void*) {
  synth->getRuntime().consoleMenuItem = o->value();
if (o->value())
    synth->getGuiMaster()->Reports->activate();
else
{
    synth->getGuiMaster()->Reports->deactivate();
    synth->getGuiMaster()->yoshiLog->Hide();
};
}
void ConfigUI::cb_Send(Fl_Choice* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Send_i(o,v);
}

Fl_Menu_Item ConfigUI::menu_Send[] = {
 {"stderr", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Console Window", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void ConfigUI::cb_SessionStateFile_i(Fl_Input* o, void*) {
  //
              synth->getRuntime().StateFile = string(o->value());
              SessionStateFile->changed();
}
void ConfigUI::cb_SessionStateFile(Fl_Input* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_SessionStateFile_i(o,v);
}

void ConfigUI::cb_StateFileButton_i(Fl_Button*, void*) {
  //
                const char *filename = fl_file_chooser("Nominate session save state file",
                                                       NULL, synth->getRuntime().StateFile.c_str(), 0);
                if (NULL != filename)
                {
                    synth->getRuntime().StateFile = string(filename);
                    SessionStateFile->value(synth->getRuntime().StateFile.c_str());
                    SessionStateFile->changed();
                    configChanged = true;
                };
}
void ConfigUI::cb_StateFileButton(Fl_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_StateFileButton_i(o,v);
}

void ConfigUI::cb_presetbrowse_i(Fl_Browser* o, void*) {
  activatebutton_presetdir(o->value() != 0);
}
void ConfigUI::cb_presetbrowse(Fl_Browser* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_presetbrowse_i(o,v);
}

void ConfigUI::cb_Add_i(Fl_Button*, void*) {
  //
                const char *dirname;
                dirname = fl_dir_chooser("Add a preset directory :", NULL, 0);
                if (!dirname)
                    return;
                presetbrowse->add(dirname);
                configChanged = true;
}
void ConfigUI::cb_Add(Fl_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

void ConfigUI::cb_removepresetbutton_i(Fl_Button*, void*) {
  //
                if (presetbrowse->value() != 0)
                {
                    presetbrowse->remove(presetbrowse->value());
                }
                activatebutton_presetdir(false);
                configChanged = true;
}
void ConfigUI::cb_removepresetbutton(Fl_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_removepresetbutton_i(o,v);
}

void ConfigUI::cb_makedefaultpresetbutton_i(Fl_Button*, void*) {
  //
                int n = presetbrowse->value();
                if (n != 0)
                {
                    presetbrowse->move(1, n);
                    presetbrowse->value(1);
                    presetbrowse->redraw();
                }
                activatebutton_presetdir(true);
                configChanged = true;
}
void ConfigUI::cb_makedefaultpresetbutton(Fl_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_makedefaultpresetbutton_i(o,v);
}

void ConfigUI::cb_Jack_i(Fl_Input* o, void*) {
  //
                synth->getRuntime().jackServer = string(o->value());
                configChanged = true;
}
void ConfigUI::cb_Jack(Fl_Input* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Jack_i(o,v);
}

void ConfigUI::cb_Alsa_i(Fl_Input* o, void*) {
  //
                synth->getRuntime().alsaMidiDevice = string(o->value());
                configChanged = true;
}
void ConfigUI::cb_Alsa(Fl_Input* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alsa_i(o,v);
}

void ConfigUI::cb_Alsa1_i(Fl_Input* o, void*) {
  //
                synth->getRuntime().alsaAudioDevice = string(o->value());
                configChanged = true;
}
void ConfigUI::cb_Alsa1(Fl_Input* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Alsa1_i(o,v);
}

void ConfigUI::cb_Samplerate_i(Fl_Check_Browser* o, void*) {
  //
                int chk = o->value();
                if (o->nchecked() < 1)
                    o->set_checked(chk = 2);
                else if (o->nchecked() > 1)
                {
                    if (!chk)
                        chk = 2;
                    o->check_none();
                    o->set_checked(chk);
                }
                unsigned int sample_rate;
                switch (chk)
                {
                    case 1:
                        sample_rate = 96000;
                        break;
                    case 3:
                        sample_rate = 44100;
                        break;
                    case 2:
                    default:
                        sample_rate = 48000;
                        break;
                }
                synth->getRuntime().Samplerate = sample_rate;
                configChanged = true;
}
void ConfigUI::cb_Samplerate(Fl_Check_Browser* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Samplerate_i(o,v);
}

void ConfigUI::cb_MIDI_i(Fl_Group*, void*) {
  //
    EPCvalue = synth->getRuntime().midi_upper_voice_C;
    if (EPCvalue >= 128)
    {
        EPCspinner->value(110);
        EPCspinner->deactivate();
    }
    else
    {
        EPCspinner->value(EPCvalue);
        EPCspinner->activate();
    }
    
    BankRootvalue = synth->getRuntime().midi_bank_root;
    if (BankRootvalue >= 128)
    {
        BankRoot->value(0);
        BankRoot->deactivate();
    }
    else
    {
        BankRoot->value(BankRootvalue);
        BankRoot->activate();
    };
}
void ConfigUI::cb_MIDI(Fl_Group* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->user_data()))->cb_MIDI_i(o,v);
}

void ConfigUI::cb_BankRoot_i(Fl_Spinner*, void*) {
  Rpend->show();
}
void ConfigUI::cb_BankRoot(Fl_Spinner* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_BankRoot_i(o,v);
}

void ConfigUI::cb_Rpend_i(Fl_Button* o, void*) {
  //
    int candidate = BankRoot->value();
    if (candidate == BankRootvalue)
    {
        o->hide();
        return;
    }
    string name = synth->getRuntime().testCCvalue(candidate);
    if (!name.empty())
    {
        fl_alert("In use for %s",name.c_str());
        if ( BankRootvalue < 128)
        {
            BankRoot->value(BankRootvalue);
            BankRoot->redraw();
        }
    }
    else
    {
        synth->getRuntime().midi_bank_root = candidate;
        BankRootvalue = candidate;
        o->hide();
        configChanged = true;
    };
}
void ConfigUI::cb_Rpend(Fl_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Rpend_i(o,v);
}

void ConfigUI::cb_Enable_i(Fl_Check_Button* o, void*) {
  //
    if (o->value() == 0)
    {
         synth->getRuntime().midi_bank_root = 128;
         BankRoot->value(0);
         BankRoot->deactivate();
         Rpend->hide();
    }
    else
    {
         BankRoot->activate();
         BankRoot->value(0);
         BankRootvalue = 128;
         Rpend->show();
    }
    BankRoot->redraw();
    configChanged = true;
}
void ConfigUI::cb_Enable(Fl_Check_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Enable_i(o,v);
}

void ConfigUI::cb_bankchange_i(Fl_Choice* o, void*) {
  //
    int tmp = synth->getRuntime().midi_bank_C;
    int candidate;
    switch (o->value())
    {
        case 0:
            candidate = 32;
            break;
        case 1:
            candidate = 0;
            break;
        default:
            candidate = 128;
    }
    if (candidate == tmp)
        return;
    string name = synth->getRuntime().testCCvalue(candidate);
    if (name.empty())
        synth->getRuntime().midi_bank_C = candidate;
    else
    {
      o->value(oldBank);
      o->redraw();
        fl_alert("In use for %s",name.c_str());
    }
    if (synth->getRuntime().midi_bank_C == tmp)
        configChanged = true;
}
void ConfigUI::cb_bankchange(Fl_Choice* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_bankchange_i(o,v);
}

Fl_Menu_Item ConfigUI::menu_bankchange[] = {
 {"LSB", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"MSB", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Off", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* ConfigUI::banklsb = ConfigUI::menu_bankchange + 0;
Fl_Menu_Item* ConfigUI::bankusb = ConfigUI::menu_bankchange + 1;
Fl_Menu_Item* ConfigUI::bankoff = ConfigUI::menu_bankchange + 2;

void ConfigUI::cb_Enable1_i(Fl_Check_Button* o, void*) {
  //
    int tmp = synth->getRuntime().EnableProgChange;
    synth->getRuntime().EnableProgChange = o->value();
    if (synth->getRuntime().EnableProgChange != tmp)
      configChanged = true;
}
void ConfigUI::cb_Enable1(Fl_Check_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Enable1_i(o,v);
}

void ConfigUI::cb_Enable2_i(Fl_Check_Button* o, void*) {
  //
    int tmp = synth->getRuntime().enable_part_on_voice_load;
    synth->getRuntime().enable_part_on_voice_load = o->value();
    if (synth->getRuntime().enable_part_on_voice_load != tmp)
      configChanged = true;
}
void ConfigUI::cb_Enable2(Fl_Check_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Enable2_i(o,v);
}

void ConfigUI::cb_EPCspinner_i(Fl_Spinner*, void*) {
  Epend->show();
}
void ConfigUI::cb_EPCspinner(Fl_Spinner* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_EPCspinner_i(o,v);
}

void ConfigUI::cb_Epend_i(Fl_Button* o, void*) {
  //
    int candidate = EPCspinner->value();
    if (candidate == EPCvalue)
    {
        o->hide();
        return;
    }


    string name = synth->getRuntime().testCCvalue(candidate);
    if (!name.empty())
    {
        fl_alert("In use for %s",name.c_str());
        if (EPCvalue < 128)
        {
        EPCspinner->value(EPCvalue);
        EPCspinner->redraw();
        }
    }
    else
    {
        synth->getRuntime().midi_upper_voice_C = candidate;
        EPCvalue = candidate;
        o->hide();
        configChanged = true;
    };
}
void ConfigUI::cb_Epend(Fl_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Epend_i(o,v);
}

void ConfigUI::cb_Enable3_i(Fl_Check_Button* o, void*) {
  // for some weird reason this *must* be the last item in the group
    if (o->value() == 0)
    {
         synth->getRuntime().midi_upper_voice_C = 128;
         EPCspinner->value(110);
         EPCspinner->deactivate();
         Epend->hide();
    }
    else
    {
         EPCspinner->activate();
         Epend->show();;
         EPCspinner->value(110);
         EPCvalue = 128;
    }
    EPCspinner->redraw();
    configChanged = true;
}
void ConfigUI::cb_Enable3(Fl_Check_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Enable3_i(o,v);
}

void ConfigUI::cb_Control_i(Fl_Spinner*, void*) {
  CCpend->show();
}
void ConfigUI::cb_Control(Fl_Spinner* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Control_i(o,v);
}

void ConfigUI::cb_Value_i(Fl_Spinner*, void*) {
  CCpend->show();
}
void ConfigUI::cb_Value(Fl_Spinner* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_Value_i(o,v);
}

void ConfigUI::cb_CCpend_i(Fl_Button* o, void*) {
  //
    o->hide();
    int cc = (int) Control->value();
    int val = (int) Value->value();
    int part = synth->getGuiMaster()->partui->npart;
    synth->SetController(part, cc, val);
    synth->getRuntime().Log(" Part " + asString(part) + "  Midi CC " + asString(cc) + " set to " + asString(val));
}
void ConfigUI::cb_CCpend(Fl_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->parent()->parent()->user_data()))->cb_CCpend_i(o,v);
}

void ConfigUI::cb_Close_i(Fl_Button*, void*) {
  synth->getGuiMaster()->bankui->readbankcfg();
configwindow->do_callback();
}
void ConfigUI::cb_Close(Fl_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void ConfigUI::cb_Save_i(Fl_Button*, void*) {
  savesettings();
synth->getGuiMaster()->bankui->readbankcfg();
configChanged = false;
configwindow->do_callback();
}
void ConfigUI::cb_Save(Fl_Button* o, void* v) {
  ((ConfigUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

Fl_Double_Window* ConfigUI::make_window() {
  { configwindow = new Fl_Double_Window(465, 330, "Yoshimi Settings");
    configwindow->callback((Fl_Callback*)cb_configwindow, (void*)(this));
    { Fl_Tabs* o = new Fl_Tabs(5, 5, 455, 297);
      { Fl_Group* o = new Fl_Group(5, 25, 455, 277, "Main settings");
        o->labelsize(12);
        o->hide();
        { Fl_Choice* o = new Fl_Choice(250, 45, 100, 20, "AddSynth Oscillator Size");
          o->tooltip("ADSynth Oscillator Size (samples)");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(12);
          o->textsize(11);
          o->callback((Fl_Callback*)cb_AddSynth);
          o->menu(menu_AddSynth);
          o->value( (int)(logf(synth->getRuntime().Oscilsize / 128.0f - 1.0f) / logf(2.0f)) + 1);
        } // Fl_Choice* o
        { Fl_Choice* o = new Fl_Choice(249, 80, 100, 20, "Internal Buffer Size");
          o->tooltip("ADSynth Oscillator Size (samples)");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(12);
          o->textsize(11);
          o->callback((Fl_Callback*)cb_Internal);
          o->menu(menu_Internal);
          o->value( (int)(logf(synth->getRuntime().Buffersize / 64.0f - 1.0f) / logf(2.0f)) + 1);
        } // Fl_Choice* o
        { Fl_Choice* o = new Fl_Choice(250, 115, 100, 20, "PADsynth Interpolation");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_PADsynth);
          o->menu(menu_PADsynth);
          o->value(synth->getRuntime().Interpolation);
        } // Fl_Choice* o
        { Fl_Choice* o = new Fl_Choice(250, 150, 100, 20, "Virtual Keyboard Layout");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(12);
          o->textfont(1);
          o->textsize(13);
          o->callback((Fl_Callback*)cb_Virtual);
          o->menu(menu_Virtual);
          o->value(synth->getRuntime().VirKeybLayout);
        } // Fl_Choice* o
        { Fl_Counter* o = compression = new Fl_Counter(284, 185, 65, 20, "XML compression level");
          compression->tooltip("gzip compression level (0 - uncompressed)");
          compression->type(1);
          compression->minimum(0);
          compression->maximum(9);
          compression->step(1);
          compression->textsize(12);
          compression->callback((Fl_Callback*)cb_compression);
          compression->align(Fl_Align(FL_ALIGN_LEFT));
          o->value(synth->getRuntime().GzipCompression);
        } // Fl_Counter* compression
        { Fl_Choice* o = new Fl_Choice(200, 220, 150, 20, "Send reports to:");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(12);
          o->textsize(13);
          o->callback((Fl_Callback*)cb_Send);
          o->menu(menu_Send);
          o->value(synth->getRuntime().consoleMenuItem);
        } // Fl_Choice* o
        { Fl_Input* o = SessionStateFile = new Fl_Input(160, 250, 220, 20, "Session state save file");
          SessionStateFile->labelsize(12);
          SessionStateFile->textsize(12);
          SessionStateFile->callback((Fl_Callback*)cb_SessionStateFile);
          SessionStateFile->when(FL_WHEN_CHANGED);
          o->value(synth->getRuntime().StateFile.c_str());
        } // Fl_Input* SessionStateFile
        { StateFileButton = new Fl_Button(401, 250, 49, 20, "Select");
          StateFileButton->box(FL_THIN_UP_BOX);
          StateFileButton->labelsize(12);
          StateFileButton->callback((Fl_Callback*)cb_StateFileButton);
          /* code */
        } // Fl_Button* StateFileButton
        { Fl_Box* o = new Fl_Box(100, 282, 267, 17, "Most settings changes require a restart");
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor((Fl_Color)38);
          o->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 25, 455, 272, "Presets dirs");
        o->labelsize(12);
        o->hide();
        { presetbrowse = new Fl_Browser(10, 35, 450, 200);
          presetbrowse->type(2);
          presetbrowse->labelsize(12);
          presetbrowse->textsize(12);
          presetbrowse->callback((Fl_Callback*)cb_presetbrowse);
        } // Fl_Browser* presetbrowse
        { Fl_Button* o = new Fl_Button(15, 244, 80, 35, "Add preset directory...");
          o->box(FL_THIN_UP_BOX);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Add);
          o->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Button* o
        { Fl_Button* o = removepresetbutton = new Fl_Button(105, 244, 80, 35, "Remove preset dir...");
          removepresetbutton->box(FL_THIN_UP_BOX);
          removepresetbutton->labelsize(12);
          removepresetbutton->callback((Fl_Callback*)cb_removepresetbutton);
          removepresetbutton->align(Fl_Align(FL_ALIGN_WRAP));
          o->deactivate();
        } // Fl_Button* removepresetbutton
        { Fl_Button* o = makedefaultpresetbutton = new Fl_Button(190, 244, 80, 35, "Make default");
          makedefaultpresetbutton->box(FL_THIN_UP_BOX);
          makedefaultpresetbutton->labelsize(12);
          makedefaultpresetbutton->callback((Fl_Callback*)cb_makedefaultpresetbutton);
          makedefaultpresetbutton->align(Fl_Align(FL_ALIGN_WRAP));
          o->deactivate();
        } // Fl_Button* makedefaultpresetbutton
        { Fl_Box* o = new Fl_Box(110, 285, 267, 12, "Settings changes require a restart");
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor((Fl_Color)38);
          o->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 25, 455, 277, "Jack");
        o->labelsize(12);
        o->hide();
        { Fl_Input* o = new Fl_Input(218, 149, 100, 22, "Jack Server");
          o->tooltip("Name of the jack server to connect to - default, ...");
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_Jack);
          o->insert(synth->getRuntime().jackServer.c_str());
        } // Fl_Input* o
        { Fl_Box* o = new Fl_Box(110, 285, 267, 17, "Settings changes require a restart");
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor((Fl_Color)38);
          o->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 25, 455, 277, "Alsa");
        o->labelsize(12);
        o->hide();
        { Fl_Input* o = new Fl_Input(195, 52, 120, 22, "Alsa Midi Device");
          o->tooltip("Alsa midi device - default, hw:0, ...");
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_Alsa);
          o->insert(synth->getRuntime().alsaMidiDevice.c_str());
        } // Fl_Input* o
        { Fl_Input* o = new Fl_Input(195, 93, 120, 22, "Alsa Audio Device");
          o->tooltip("Alsa audio device - default, hw:0, front:CARD=Live,DEV=0, ...");
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_Alsa1);
          o->insert(synth->getRuntime().alsaAudioDevice.c_str());
        } // Fl_Input* o
        { Fl_Check_Browser* o = new Fl_Check_Browser(195, 131, 84, 50, "Samplerate");
          o->labelsize(12);
          o->textsize(12);
          o->callback((Fl_Callback*)cb_Samplerate);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->when(FL_WHEN_CHANGED);
          //
                o->add("96000");
                o->add("48000");
                o->add("44100");
                switch (synth->getRuntime().Samplerate)
                {
                    case 96000: o->set_checked(1); break;
                    case 44100: o->set_checked(3); break;
                    case 48000:
                    default: o->set_checked(2); break;
                }
        } // Fl_Check_Browser* o
        { Fl_Box* o = new Fl_Box(110, 285, 267, 17, "Settings changes require a restart");
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor((Fl_Color)38);
          o->align(Fl_Align(FL_ALIGN_WRAP));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(5, 25, 455, 275, "MIDI");
        o->tooltip("MIDI CC preferences");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_MIDI);
        { Fl_Spinner* o = BankRoot = new Fl_Spinner(275, 81, 50, 18, "Bank Root Change");
          BankRoot->labelsize(12);
          BankRoot->minimum(0);
          BankRoot->maximum(127);
          BankRoot->value(0);
          BankRoot->textsize(12);
          BankRoot->callback((Fl_Callback*)cb_BankRoot);
          BankRootvalue = synth->getRuntime().midi_bank_root;
          if (BankRootvalue < 128) o->value(BankRootvalue); else o->value(0);
        } // Fl_Spinner* BankRoot
        { Rpend = new Fl_Button(340, 81, 70, 20, "Pending");
          Rpend->tooltip("Click to set");
          Rpend->box(FL_PLASTIC_UP_BOX);
          Rpend->color((Fl_Color)90);
          Rpend->labelsize(12);
          Rpend->callback((Fl_Callback*)cb_Rpend);
          Rpend->hide();
        } // Fl_Button* Rpend
        { Fl_Check_Button* o = new Fl_Check_Button(275, 60, 18, 18, "Enable Bank Root Change");
          o->down_box(FL_DOWN_BOX);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Enable);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->value((synth->getRuntime().midi_bank_root < 128));
          if (o->value() == 0) BankRoot->deactivate();
        } // Fl_Check_Button* o
        { Fl_Choice* o = bankchange = new Fl_Choice(275, 122, 53, 18, "Bank Change");
          bankchange->tooltip("CC0 = msb, CC32 = lsb");
          bankchange->down_box(FL_BORDER_BOX);
          bankchange->labelsize(12);
          bankchange->textsize(12);
          bankchange->callback((Fl_Callback*)cb_bankchange);
          bankchange->align(Fl_Align(132));
          bankchange->menu(menu_bankchange);
          if (synth->getRuntime().midi_bank_C == 32) o->value(0); else if (synth->getRuntime().midi_bank_C == 0) o->value(1); else o->value(2);
          oldBank = o->value();
        } // Fl_Choice* bankchange
        { Fl_Check_Button* o = new Fl_Check_Button(275, 162, 18, 18, "Enable Program Change");
          o->tooltip("MIDI program change enable/disable");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Enable1);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->value(synth->getRuntime().EnableProgChange);
        } // Fl_Check_Button* o
        { Fl_Check_Button* o = new Fl_Check_Button(275, 182, 18, 18, "Enable Part On Program Change");
          o->tooltip("Part enabled if MIDI program changed");
          o->down_box(FL_DOWN_BOX);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Enable2);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->value(synth->getRuntime().enable_part_on_voice_load);
        } // Fl_Check_Button* o
        { Fl_Spinner* o = EPCspinner = new Fl_Spinner(275, 241, 50, 18, "Extended Program Change");
          EPCspinner->labelsize(12);
          EPCspinner->minimum(0);
          EPCspinner->maximum(127);
          EPCspinner->value(110);
          EPCspinner->textsize(12);
          EPCspinner->callback((Fl_Callback*)cb_EPCspinner);
          EPCvalue = synth->getRuntime().midi_upper_voice_C;
          if (EPCvalue < 128) o->value(EPCvalue); else o->value(110);
        } // Fl_Spinner* EPCspinner
        { Epend = new Fl_Button(340, 241, 70, 20, "Pending");
          Epend->tooltip("Click to set");
          Epend->box(FL_PLASTIC_UP_BOX);
          Epend->color((Fl_Color)90);
          Epend->labelsize(12);
          Epend->callback((Fl_Callback*)cb_Epend);
          Epend->hide();
        } // Fl_Button* Epend
        { Fl_Check_Button* o = new Fl_Check_Button(275, 220, 18, 18, "Enable Extended Program Change");
          o->down_box(FL_DOWN_BOX);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Enable3);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          o->value((synth->getRuntime().midi_upper_voice_C < 128));
          if (o->value() == 0) EPCspinner->deactivate();
        } // Fl_Check_Button* o
        { Control = new Fl_Spinner(181, 272, 50, 18, "Set immediate -- Control");
          Control->labelsize(12);
          Control->minimum(0);
          Control->maximum(127);
          Control->value(0);
          Control->textsize(12);
          Control->callback((Fl_Callback*)cb_Control);
        } // Fl_Spinner* Control
        { Value = new Fl_Spinner(275, 272, 50, 18, "Value");
          Value->labelsize(12);
          Value->minimum(0);
          Value->maximum(127);
          Value->value(0);
          Value->textsize(12);
          Value->callback((Fl_Callback*)cb_Value);
        } // Fl_Spinner* Value
        { CCpend = new Fl_Button(340, 272, 70, 20, "Pending");
          CCpend->tooltip("Click to set");
          CCpend->box(FL_PLASTIC_UP_BOX);
          CCpend->color((Fl_Color)90);
          CCpend->labelsize(12);
          CCpend->callback((Fl_Callback*)cb_CCpend);
          CCpend->hide();
        } // Fl_Button* CCpend
        EPCvalue = synth->getRuntime().midi_upper_voice_C;
        BankRootvalue = synth->getRuntime().midi_bank_root;
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Button* o = new Fl_Button(345, 305, 105, 20, "Close Unsaved");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(225, 305, 105, 20, "Save and Close");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Save);
    } // Fl_Button* o
    configwindow->end();
  } // Fl_Double_Window* configwindow
  return configwindow;
}

ConfigUI::ConfigUI(SynthEngine *_synth) {
  //
    synth = _synth;
          configChanged = false;
          make_window();
          readpresetcfg();
    selectedRootID = -1;
}

void ConfigUI::activatebutton_presetdir(bool active) {
  //
          if (active)
          {
              removepresetbutton->activate();
              makedefaultpresetbutton->activate();
          }
          else
          {
              removepresetbutton->deactivate();
              makedefaultpresetbutton->deactivate();
          }
}

int ConfigUI::recoverID() {
  //
      if (selectedRootID >= 0)
      {
          return selectedRootID;
      }
      return 0;
}

void ConfigUI::readpresetcfg() {
  //
          presetbrowse->clear();
          for (int i = 0; i < MAX_BANK_ROOT_DIRS; ++i)
              if (synth->getRuntime().presetsDirlist[i].size())
                  presetbrowse->add(synth->getRuntime().presetsDirlist[i].c_str());
}

void ConfigUI::writepresetcfg() {
  //
          synth->getRuntime().clearPresetsDirlist();
          for (int n = 0; n < presetbrowse->size(); ++n)
              synth->getRuntime().presetsDirlist[n] = string(presetbrowse->text(n + 1));
}

void ConfigUI::Show() {
  configwindow->show();
}

void ConfigUI::Hide() {
  configwindow->hide();
}

void ConfigUI::savesettings(void) {
  //
          synth->getRuntime().saveConfig();
          writepresetcfg();
}
