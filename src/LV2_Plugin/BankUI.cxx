// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "/home/louis/Documents/prog/Yoshimi/github/yoshimi/src/LV2_Plugin/BankUI.h"
// BankUI.cc

// Original ZynAddSubFX author Nasca Octavian Paul
// Copyright (C) 2002-2005 Nasca Octavian Paul
// Copyright 2009-2010, Alan Calvert

// This file is part of yoshimi, which is free software: you can redistribute
// it and/or modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.

// yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
// later) for more details.

// You should have received a copy of the GNU General Public License along with
// yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA  02110-1301, USA.

// This file is derivative of original ZynAddSubFX code, modified November 2010

#include "MasterUI.h"

void BankProcess_::process(void) {
  ;
}

BankSlot::BankSlot(int x,int y, int w, int h, const char *label):Fl_Button(x,y,w,h,label) {
  what = NULL;
          whatslot = NULL;
          nslot = 0;
          nselected = NULL;
}

int BankSlot::handle(int event) {
  //
      if (what == NULL)
          return 0;
      if (Fl::event_inside(this))
      {
          *what = 0;
          *whatslot = nslot;
          if (event == FL_RELEASE)
              *what = Fl::event_button();
          if (event == FL_PUSH)
              highlight = 1;
      }
      else
          highlight = 0;
      int tmp = Fl_Button::handle(event);
      if (*what != 0 && Fl::event_inside(this))
          (bp->*fnc)();
      return tmp;
}

void BankSlot::init(int nslot_, int *what_, int *whatslot_, void (BankProcess_:: *fnc_)(void), BankProcess_ *bp_, Bank *bank_, int *nselected_) {
  nslot = nslot_;
          what = what_;
          whatslot = whatslot_;
          fnc = fnc_;
          bp = bp_;
          bank = bank_;
          nselected = nselected_;
          box(FL_THIN_UP_FRAME);
          labelfont(0);
          labelsize(13);
          align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE|FL_ALIGN_CLIP);
          highlight = 0;
          refresh();
}

void BankSlot::refresh() {
  //
  /*    if (bank->emptyslot(nslot))
      {
          if (nslot < 128)
              color(46);
          else
              color(16);
      }
      else
      {       
          int engine = bank->engines_used(nslot);
          if (engine & 1) // AddSynth
              labelcolor(72);
          else
              labelcolor(0);
          if (engine & 2) // SubSynth
          {
              labelsize(11);
              labelfont(2);
          }
          else
          {
              labelsize(12);
              labelfont(0);
          }
          if (engine & 4) // PadSynth
              color(126);
  	else
  	{
              if (nslot < 128)
                  color(51);
              else
                  color(17);
           }
      }
      if (*nselected == nslot)
          color(6);
  */
      string instrName = bank->getnamenumbered(nslot);
      copy_label(instrName.c_str());
}

/**
   overrides button's draw()
*/
void BankSlot::draw() {
  //
      if (type() == FL_HIDDEN_BUTTON) return;
      int acol, scol, pcol, bcol;
      int wid = w() * 0.334;
      int engine = bank->engines_used(nslot);
      if (*nselected == nslot)
      {
              acol = 6;
              scol = 6;
              pcol = 6;
      }
      else if(bank->emptyslot(nslot))
      {
          if (nslot < 128)
          {
              acol = 46;
              scol = 46;
              pcol = 46;
          }
          else
          {
              acol = 16;
              scol = 16;
              pcol = 16;
          }
      }
      else
      {
          if (nslot < 128)
              bcol = 51;
          else
              bcol = 17;
          if(engine & 1)
              acol = ADD_COLOUR;
          else
              acol = bcol;
          if(engine & 2)
              scol = SUB_COLOUR;
          else
              scol = bcol;
          if(engine & 4)
              pcol = PAD_COLOUR;
          else
              pcol = bcol;
      }
      draw_box(FL_FLAT_BOX, x(), y(), wid, h(), (Fl_Color) acol);
      draw_box(FL_FLAT_BOX, x() + wid, y(), wid, h(), (Fl_Color) scol);
      draw_box(FL_FLAT_BOX, x() + wid * 2, y(), wid, h(), (Fl_Color) pcol);
  
      //frame for label
      draw_box(value() ? (down_box() ? down_box() : fl_down(box())) : box(), x(), y(), w(), h(), (Fl_Color) BASE_COLOUR);
  
      //draw_backdrop();
      
      Fl_Color col = value() ? selection_color() : color();
      if (labeltype() == FL_NORMAL_LABEL && value())
      {
          Fl_Color c = labelcolor();
          labelcolor(fl_contrast(c, col));
          draw_label();
          labelcolor(c);
      }
      else
          draw_label();
   
      if (Fl::focus() == this) draw_focus();
}

void RootProcess_::rootprocess(void) {
  ;
}

RootSlot::RootSlot(int x,int y, int w, int h, const char *label):Fl_Button(x,y,w,h,label) {
  what = NULL;
          whatslot = NULL;
          nslot = 0;
          nselected = NULL;
}

int RootSlot::handle(int event) {
  if (what == NULL)
              return 0;
          if (Fl::event_inside(this))
          {
              *what = 0;
              *whatslot = nslot;
              if (event == FL_RELEASE)
                  *what = Fl::event_button();
              if (event == FL_PUSH)
                  highlight = 1;
          }
          else
              highlight = 0;
  
          int tmp = Fl_Button::handle(event);
          if (*what != 0 && Fl::event_inside(this))
              (rp->*fnr)();
          return tmp;
}

void RootSlot::init(int nslot_, int *what_, int *whatslot_, void (RootProcess_:: *fnr_)(void), RootProcess_ *rp_, Bank *root_, int *nselected_) {
  nslot = nslot_;
          what = what_;
          whatslot = whatslot_;
          fnr = fnr_;
          rp = rp_;
          root = root_;
          nselected = nselected_;
          box(FL_THIN_UP_BOX);
          labelfont(0);
          labelsize(13);
          align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE|FL_ALIGN_CLIP);
          highlight = 0;
          rootrefresh();
}

void RootSlot::rootrefresh() {
  //
      string bankName = root->getBankIDname(nslot);
      if (bankName.empty())
          color(46);
      else if ((unsigned int) nslot == root->getCurrentBankID())
      	color(252);
      else
          color(51);
      if (*nselected == nslot)
          color(6);
      copy_label(bankName.c_str());
}

void BankUI::cb_banklist_i(Fl_Choice* o, void*) {
  //
    int n = o->value();
    if (n < 0)
        return;
    const Fl_Menu_Item &item = o->menu()[n]; 
    int nbank = reinterpret_cast<long>(item.user_data());
    const BankEntry &bankEntry = bank->getBank(nbank);
    if (!bank->setCurrentBankID(nbank))
        fl_alert("Error: Could not load the bank from the directory\n%s.", bankEntry.dirname.c_str());
    for (int i = 0; i < BANK_SIZE; ++i)
        bs[i]->refresh();
    refreshmainwindow();
}
void BankUI::cb_banklist(Fl_Choice* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_banklist_i(o,v);
}

void BankUI::cb_Refresh_i(Fl_Button*, void*) {
  rescan_for_banks(true);
set_bank_slot();
}
void BankUI::cb_Refresh(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Refresh_i(o,v);
}

void BankUI::cb_Roots_i(Fl_Button*, void*) {
  //
    pathwindow->show();
    if ((Fl::event_button() == 3))
        bankuiwindow->hide();
}
void BankUI::cb_Roots(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Roots_i(o,v);
}

void BankUI::cb_Banks_i(Fl_Button*, void*) {
  rootuiwindow->show();
if ((Fl::event_button() == 3))
    bankuiwindow->hide();
}
void BankUI::cb_Banks(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Banks_i(o,v);
}

void BankUI::cb_writebutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 2;
removeselection();
}
void BankUI::cb_writebutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_writebutton_i(o,v);
}

void BankUI::cb_readbutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 1;
removeselection();
}
void BankUI::cb_readbutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_readbutton_i(o,v);
}

void BankUI::cb_clearbutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 3;
removeselection();
}
void BankUI::cb_clearbutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_clearbutton_i(o,v);
}

void BankUI::cb_swapbutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 4;
removeselection();
}
void BankUI::cb_swapbutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_swapbutton_i(o,v);
}

void BankUI::cb_renamebutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 5;
removeselection();
}
void BankUI::cb_renamebutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_renamebutton_i(o,v);
}

void BankUI::cb_Close_i(Fl_Button*, void*) {
  bankuiwindow->hide();
}
void BankUI::cb_Close(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void BankUI::cb_Show_i(Fl_Check_Button* o, void*) {
  //
    synth->getRuntime().checksynthengines = (int) o->value();
    rescan_for_banks(true);
    synth->getGuiMaster()->partui->resetlabels();
    synth->getGuiMaster()->updatepanel();
}
void BankUI::cb_Show(Fl_Check_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_Show_i(o,v);
}

void BankUI::cb_Roots1_i(Fl_Button*, void*) {
  // 
    pathwindow->show();
    if ((Fl::event_button() == 3))
       rootuiwindow->hide();
}
void BankUI::cb_Roots1(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Roots1_i(o,v);
}

void BankUI::cb_Instruments_i(Fl_Button*, void*) {
  bankuiwindow->show();
if ((Fl::event_button() == 3))
    rootuiwindow->hide();
}
void BankUI::cb_Instruments(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Instruments_i(o,v);
}

void BankUI::cb_rootwritebutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 2;
removeselection();
}
void BankUI::cb_rootwritebutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_rootwritebutton_i(o,v);
}

void BankUI::cb_rootreadbutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 1;
removeselection();
}
void BankUI::cb_rootreadbutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_rootreadbutton_i(o,v);
}

void BankUI::cb_rootclearbutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 3;
removeselection();
}
void BankUI::cb_rootclearbutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_rootclearbutton_i(o,v);
}

void BankUI::cb_rootswapbutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 4;
removeselection();
}
void BankUI::cb_rootswapbutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_rootswapbutton_i(o,v);
}

void BankUI::cb_rootrenamebutton_i(Fl_Light_Button* o, void*) {
  if (o->value() > 0.5)
    mode = 5;
removeselection();
}
void BankUI::cb_rootrenamebutton(Fl_Light_Button* o, void* v) {
  ((BankUI*)(o->parent()->parent()->user_data()))->cb_rootrenamebutton_i(o,v);
}

void BankUI::cb_Close1_i(Fl_Button*, void*) {
  rootuiwindow->hide();
}
void BankUI::cb_Close1(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void BankUI::cb_pathwindow_i(Fl_Double_Window* o, void*) {
  o->hide();
}
void BankUI::cb_pathwindow(Fl_Double_Window* o, void* v) {
  ((BankUI*)(o->user_data()))->cb_pathwindow_i(o,v);
}

void BankUI::cb_rootsbrowse_i(Fl_Browser* o, void*) {
  int tmp = o->value();
activatebutton_rootdir(tmp!=0);
if (tmp)
{
    selectedRootID = reinterpret_cast<long>(o->data(tmp));
}
    
changeIDbutton->value(recoverID());
oldrootID = changeIDbutton->value();
}
void BankUI::cb_rootsbrowse(Fl_Browser* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_rootsbrowse_i(o,v);
}

void BankUI::cb_Add_i(Fl_Button*, void*) {
  //
    const char *dirname;
    dirname = fl_dir_chooser("Add a root directory for banks:", NULL, 0);
    if (!dirname)
      return;
    synth->getGuiMaster()->configui->configChanged = true;
    synth->getBankRef().addRootDir(dirname);
    readbankcfg();
    rescan_for_banks(true);
}
void BankUI::cb_Add(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Add_i(o,v);
}

void BankUI::cb_removerootdirbutton_i(Fl_Button*, void*) {
  //
    if (selectedRootID >= 0)
    {;
        synth->getBankRef().removeRoot(selectedRootID);
        readbankcfg();
        synth->getGuiMaster()->configui->configChanged = true;
    }
    activatebutton_rootdir(false);
    rescan_for_banks(false);
}
void BankUI::cb_removerootdirbutton(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_removerootdirbutton_i(o,v);
}

void BankUI::cb_makedefaultrootdirbutton_i(Fl_Button*, void*) {
  //
    if (selectedRootID >= 0)
    {
        synth->getBankRef().setCurrentRootID(selectedRootID);
        readbankcfg();
        rescan_for_banks(false);
        synth->getGuiMaster()->configui->configChanged = true;
    }
    activatebutton_rootdir(false);
}
void BankUI::cb_makedefaultrootdirbutton(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_makedefaultrootdirbutton_i(o,v);
}

void BankUI::cb_showdefaultrootdirbutton_i(Fl_Button*, void*) {
  //
    rootuiwindow->show();
    if (Fl::event_button() == 3)
        pathwindow->hide();
}
void BankUI::cb_showdefaultrootdirbutton(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_showdefaultrootdirbutton_i(o,v);
}

void BankUI::cb_changeIDok_i(Fl_Return_Button* o, void*) {
  //
    if (changeIDbutton->value() == oldrootID)
    {
        o->deactivate();
        return;
    }
    if (selectedRootID >= 0)
    {
        if (synth->getBankRef().changeRootID(selectedRootID, changeIDbutton->value()))
        {
            readbankcfg();
            rescan_for_banks(true);
            synth->getGuiMaster()->configui->configChanged = true;
            o->deactivate();
        }
        else
        {
            changeIDbutton->value(oldrootID);
            fl_alert("ID already in use!");
        }
    }
    oldrootID = changeIDbutton->value();
    activatebutton_rootdir(false);
}
void BankUI::cb_changeIDok(Fl_Return_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_changeIDok_i(o,v);
}

void BankUI::cb_changeIDbutton_i(Fl_Spinner*, void*) {
  changeIDok->activate();
}
void BankUI::cb_changeIDbutton(Fl_Spinner* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_changeIDbutton_i(o,v);
}

void BankUI::cb_Close2_i(Fl_Button*, void*) {
  pathwindow->do_callback();
}
void BankUI::cb_Close2(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Close2_i(o,v);
}

void BankUI::cb_Save_i(Fl_Button*, void*) {
  synth->getRuntime().saveConfig();
synth->getGuiMaster()->configui->configChanged = false;
pathwindow->do_callback();
}
void BankUI::cb_Save(Fl_Button* o, void* v) {
  ((BankUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

Fl_Double_Window* BankUI::make_window() {
  { bankuiwindow = new Fl_Double_Window(780, 575, "Bank");
    bankuiwindow->user_data((void*)(this));
    { banklist = new Fl_Choice(5, 8, 199, 20);
      banklist->down_box(FL_BORDER_BOX);
      banklist->selection_color(FL_BACKGROUND2_COLOR);
      banklist->labelfont(1);
      banklist->labelsize(12);
      banklist->textsize(12);
      banklist->callback((Fl_Callback*)cb_banklist);
      banklist->align(Fl_Align(FL_ALIGN_CENTER));
    } // Fl_Choice* banklist
    { Fl_Button* o = new Fl_Button(212, 5, 102, 25, "Refresh banks");
      o->tooltip("Refresh the bank list (rescan)");
      o->box(FL_PLASTIC_UP_BOX);
      o->color(FL_LIGHT1);
      o->labelfont(1);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Refresh);
      o->hide();
      o->deactivate();
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(350, 5, 93, 25, "Roots");
      o->tooltip("Show root paths");
      o->box(FL_PLASTIC_UP_BOX);
      o->labelfont(1);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Roots);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(496, 5, 93, 25, "Banks");
      o->tooltip("Show banks in current root");
      o->box(FL_PLASTIC_UP_BOX);
      o->labelfont(1);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Banks);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Text_Display* o = new Fl_Text_Display(628, 17, 136, 3, "This column uses MIDI");
      o->box(FL_NO_BOX);
      o->labelsize(11);
      o->align(Fl_Align(33));
    } // Fl_Text_Display* o
    { Fl_Text_Display* o = new Fl_Text_Display(615, 30, 162, 3, "Extended Program Change");
      o->box(FL_NO_BOX);
      o->labelsize(11);
      o->align(Fl_Align(33));
    } // Fl_Text_Display* o
    { Fl_Group* o = new Fl_Group(5, 34, 772, 491);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Pack* o = new Fl_Pack(10, 39, 150, 481);
        o->box(FL_BORDER_BOX);
        o->box(FL_NO_BOX);
        for (int i = 0; i < 32; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }
        o->end();
      } // Fl_Pack* o
      { Fl_Pack* o = new Fl_Pack(163, 39, 150, 481);
        o->box(FL_BORDER_BOX);
        o->box(FL_NO_BOX);
        for (int i = 32; i < 64; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }
        o->end();
      } // Fl_Pack* o
      { Fl_Pack* o = new Fl_Pack(316, 39, 150, 481);
        o->box(FL_BORDER_BOX);
        o->box(FL_NO_BOX);
        for (int i = 64; i < 96; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }
        o->end();
      } // Fl_Pack* o
      { Fl_Pack* o = new Fl_Pack(469, 39, 150, 481);
        o->box(FL_BORDER_BOX);
        o->box(FL_NO_BOX);
        for (int i = 96; i < 128; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }
        o->end();
      } // Fl_Pack* o
      { Fl_Pack* o = new Fl_Pack(622, 39, 150, 481);
        o->box(FL_BORDER_BOX);
        o->color((Fl_Color)48);
        o->box(FL_NO_BOX);
        for (int i = 128; i < 160; ++i)
            {
                bs[i] = new BankSlot (0, 0, o->w(), 15, " ");
                bs[i]->init(i, &what, &slot, &BankProcess_::process,
                            (BankProcess_ *)this, bank, &nselected);
            }
        o->end();
      } // Fl_Pack* o
      o->end();
    } // Fl_Group* o
    { modeselect = new Fl_Group(5, 528, 458, 42);
      modeselect->box(FL_ENGRAVED_BOX);
      { writebutton = new Fl_Light_Button(190, 534, 85, 30, "SAVE");
        writebutton->type(102);
        writebutton->box(FL_PLASTIC_UP_BOX);
        writebutton->down_box(FL_THIN_DOWN_BOX);
        writebutton->selection_color((Fl_Color)3);
        writebutton->labeltype(FL_ENGRAVED_LABEL);
        writebutton->labelfont(1);
        writebutton->labelsize(12);
        writebutton->callback((Fl_Callback*)cb_writebutton);
      } // Fl_Light_Button* writebutton
      { Fl_Light_Button* o = readbutton = new Fl_Light_Button(10, 534, 85, 30, "SELECT");
        readbutton->type(102);
        readbutton->box(FL_PLASTIC_UP_BOX);
        readbutton->down_box(FL_THIN_DOWN_BOX);
        readbutton->selection_color((Fl_Color)101);
        readbutton->labeltype(FL_ENGRAVED_LABEL);
        readbutton->labelfont(1);
        readbutton->labelsize(12);
        readbutton->callback((Fl_Callback*)cb_readbutton);
        o->value(1);
      } // Fl_Light_Button* readbutton
      { clearbutton = new Fl_Light_Button(280, 534, 85, 30, "DELETE");
        clearbutton->type(102);
        clearbutton->box(FL_PLASTIC_UP_BOX);
        clearbutton->down_box(FL_THIN_DOWN_BOX);
        clearbutton->selection_color((Fl_Color)1);
        clearbutton->labeltype(FL_ENGRAVED_LABEL);
        clearbutton->labelfont(1);
        clearbutton->labelsize(12);
        clearbutton->callback((Fl_Callback*)cb_clearbutton);
      } // Fl_Light_Button* clearbutton
      { swapbutton = new Fl_Light_Button(370, 534, 85, 30, "SWAP");
        swapbutton->type(102);
        swapbutton->box(FL_PLASTIC_UP_BOX);
        swapbutton->down_box(FL_THIN_DOWN_BOX);
        swapbutton->selection_color((Fl_Color)227);
        swapbutton->labeltype(FL_ENGRAVED_LABEL);
        swapbutton->labelfont(1);
        swapbutton->labelsize(12);
        swapbutton->callback((Fl_Callback*)cb_swapbutton);
      } // Fl_Light_Button* swapbutton
      { renamebutton = new Fl_Light_Button(100, 534, 85, 30, "RENAME");
        renamebutton->type(102);
        renamebutton->box(FL_PLASTIC_UP_BOX);
        renamebutton->down_box(FL_THIN_DOWN_BOX);
        renamebutton->selection_color((Fl_Color)5);
        renamebutton->labeltype(FL_ENGRAVED_LABEL);
        renamebutton->labelfont(1);
        renamebutton->labelsize(12);
        renamebutton->callback((Fl_Callback*)cb_renamebutton);
      } // Fl_Light_Button* renamebutton
      modeselect->end();
    } // Fl_Group* modeselect
    { Fl_Button* o = new Fl_Button(665, 539, 70, 24, "Close");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { engines = new Fl_Group(468, 528, 151, 42);
      engines->box(FL_ENGRAVED_FRAME);
      { Fl_Check_Button* o = new Fl_Check_Button(477, 531, 136, 15, "Show synth engines");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_Show);
        o->value(synth->getRuntime().checksynthengines);
      } // Fl_Check_Button* o
      { Fl_Button* o = addpatch = new Fl_Button(473, 550, 47, 16, "Add");
        addpatch->box(FL_FLAT_BOX);
        addpatch->labelsize(12);
        addpatch->align(Fl_Align(FL_ALIGN_TEXT_OVER_IMAGE));
        o->color(ADD_COLOUR);
      } // Fl_Button* addpatch
      { Fl_Button* o = subpatch = new Fl_Button(520, 550, 47, 16, "Sub");
        subpatch->box(FL_FLAT_BOX);
        subpatch->labelsize(11);
        subpatch->align(Fl_Align(FL_ALIGN_TEXT_OVER_IMAGE));
        o->color(SUB_COLOUR);
      } // Fl_Button* subpatch
      { Fl_Button* o = padpatch = new Fl_Button(567, 550, 47, 16, "Pad");
        padpatch->box(FL_FLAT_BOX);
        padpatch->color((Fl_Color)29);
        padpatch->labelsize(12);
        padpatch->align(Fl_Align(FL_ALIGN_TEXT_OVER_IMAGE));
        o->color(PAD_COLOUR);
      } // Fl_Button* padpatch
      { Fl_Button* o = new Fl_Button(474, 549, 139, 17);
        o->box(FL_THIN_UP_FRAME);
      } // Fl_Button* o
      engines->end();
    } // Fl_Group* engines
    bankuiwindow->end();
  } // Fl_Double_Window* bankuiwindow
  { Fl_Double_Window* o = rootuiwindow = new Fl_Double_Window(775, 575, "Root");
    rootuiwindow->labelsize(12);
    rootuiwindow->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(248, 5, 93, 25, "Roots");
      o->tooltip("Show root paths");
      o->box(FL_PLASTIC_UP_BOX);
      o->labelfont(1);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Roots1);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(394, 10, 178, 15, "current bank");
      o->tooltip("Show instruments in current bank");
      o->box(FL_THIN_UP_BOX);
      o->down_box(FL_THIN_UP_BOX);
      o->color((Fl_Color)252);
      o->selection_color((Fl_Color)252);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(627, 5, 93, 25, "Instruments");
      o->tooltip("Show instruments in current bank");
      o->box(FL_PLASTIC_UP_BOX);
      o->labelfont(1);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Instruments);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(5, 34, 766, 491);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Pack* o = new Fl_Pack(10, 39, 186, 481);
        o->box(FL_BORDER_BOX);
        o->box(FL_NO_BOX);
        //
            for (int i = 0; i < 32; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &nselected);

          }
        o->end();
      } // Fl_Pack* o
      { Fl_Pack* o = new Fl_Pack(200, 39, 186, 481);
        o->box(FL_BORDER_BOX);
        o->box(FL_NO_BOX);
        //
            for (int i = 32; i < 64; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &nselected);

          }
        o->end();
      } // Fl_Pack* o
      { Fl_Pack* o = new Fl_Pack(390, 39, 186, 481);
        o->box(FL_BORDER_BOX);
        o->box(FL_NO_BOX);
        //
            for (int i = 64; i < 96; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &nselected);

          }
        o->end();
      } // Fl_Pack* o
      { Fl_Pack* o = new Fl_Pack(580, 39, 185, 481);
        o->box(FL_BORDER_BOX);
        o->box(FL_NO_BOX);
        //
            for (int i = 96; i < 128; ++i)
            {
                rs[i] = new RootSlot (0, 0, o->w(), 15, " ");
                rs[i]->init(i, &what, &slot, &RootProcess_::rootprocess,
                            (RootProcess_ *)this, bank, &nselected);

          }
        o->end();
      } // Fl_Pack* o
      o->end();
    } // Fl_Group* o
    { rootmodeselect = new Fl_Group(5, 528, 475, 42);
      rootmodeselect->box(FL_ENGRAVED_BOX);
      { rootwritebutton = new Fl_Light_Button(200, 534, 85, 30, "ADD");
        rootwritebutton->type(102);
        rootwritebutton->box(FL_PLASTIC_UP_BOX);
        rootwritebutton->down_box(FL_THIN_DOWN_BOX);
        rootwritebutton->selection_color((Fl_Color)3);
        rootwritebutton->labeltype(FL_ENGRAVED_LABEL);
        rootwritebutton->labelfont(1);
        rootwritebutton->labelsize(12);
        rootwritebutton->callback((Fl_Callback*)cb_rootwritebutton);
      } // Fl_Light_Button* rootwritebutton
      { Fl_Light_Button* o = rootreadbutton = new Fl_Light_Button(10, 534, 85, 30, "SELECT");
        rootreadbutton->type(102);
        rootreadbutton->box(FL_PLASTIC_UP_BOX);
        rootreadbutton->down_box(FL_THIN_DOWN_BOX);
        rootreadbutton->selection_color((Fl_Color)101);
        rootreadbutton->labeltype(FL_ENGRAVED_LABEL);
        rootreadbutton->labelfont(1);
        rootreadbutton->labelsize(12);
        rootreadbutton->callback((Fl_Callback*)cb_rootreadbutton);
        o->value(1);
      } // Fl_Light_Button* rootreadbutton
      { rootclearbutton = new Fl_Light_Button(295, 534, 85, 30, "DELETE");
        rootclearbutton->type(102);
        rootclearbutton->box(FL_PLASTIC_UP_BOX);
        rootclearbutton->down_box(FL_THIN_DOWN_BOX);
        rootclearbutton->selection_color((Fl_Color)1);
        rootclearbutton->labeltype(FL_ENGRAVED_LABEL);
        rootclearbutton->labelfont(1);
        rootclearbutton->labelsize(12);
        rootclearbutton->callback((Fl_Callback*)cb_rootclearbutton);
      } // Fl_Light_Button* rootclearbutton
      { rootswapbutton = new Fl_Light_Button(390, 534, 85, 30, "SWAP");
        rootswapbutton->type(102);
        rootswapbutton->box(FL_PLASTIC_UP_BOX);
        rootswapbutton->down_box(FL_THIN_DOWN_BOX);
        rootswapbutton->selection_color((Fl_Color)227);
        rootswapbutton->labeltype(FL_ENGRAVED_LABEL);
        rootswapbutton->labelfont(1);
        rootswapbutton->labelsize(12);
        rootswapbutton->callback((Fl_Callback*)cb_rootswapbutton);
      } // Fl_Light_Button* rootswapbutton
      { rootrenamebutton = new Fl_Light_Button(105, 534, 85, 30, "RENAME");
        rootrenamebutton->type(102);
        rootrenamebutton->box(FL_PLASTIC_UP_BOX);
        rootrenamebutton->down_box(FL_THIN_DOWN_BOX);
        rootrenamebutton->selection_color((Fl_Color)5);
        rootrenamebutton->labeltype(FL_ENGRAVED_LABEL);
        rootrenamebutton->labelfont(1);
        rootrenamebutton->labelsize(12);
        rootrenamebutton->callback((Fl_Callback*)cb_rootrenamebutton);
      } // Fl_Light_Button* rootrenamebutton
      rootmodeselect->end();
    } // Fl_Group* rootmodeselect
    { Fl_Button* o = new Fl_Button(647, 538, 70, 24, "Close");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Close1);
    } // Fl_Button* o
    o->copy_label(bank->getRootFileTitle().c_str());
    rootuiwindow->end();
  } // Fl_Double_Window* rootuiwindow
  { pathwindow = new Fl_Double_Window(465, 295, "Bank Root Paths");
    pathwindow->callback((Fl_Callback*)cb_pathwindow, (void*)(this));
    { rootsbrowse = new Fl_Browser(10, 10, 445, 200);
      rootsbrowse->type(2);
      rootsbrowse->labelsize(12);
      rootsbrowse->textsize(13);
      rootsbrowse->callback((Fl_Callback*)cb_rootsbrowse);
    } // Fl_Browser* rootsbrowse
    { Fl_Button* o = new Fl_Button(10, 225, 75, 35, "Add root directory...");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Add);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Button* o = removerootdirbutton = new Fl_Button(95, 225, 75, 35, "Remove root dir...");
      removerootdirbutton->box(FL_THIN_UP_BOX);
      removerootdirbutton->labelsize(12);
      removerootdirbutton->callback((Fl_Callback*)cb_removerootdirbutton);
      removerootdirbutton->align(Fl_Align(FL_ALIGN_WRAP));
      removerootdirbutton->deactivate();
      o->deactivate();
    } // Fl_Button* removerootdirbutton
    { Fl_Button* o = makedefaultrootdirbutton = new Fl_Button(180, 225, 75, 35, "Make current");
      makedefaultrootdirbutton->box(FL_THIN_UP_BOX);
      makedefaultrootdirbutton->labelsize(12);
      makedefaultrootdirbutton->callback((Fl_Callback*)cb_makedefaultrootdirbutton);
      makedefaultrootdirbutton->align(Fl_Align(FL_ALIGN_WRAP));
      makedefaultrootdirbutton->deactivate();
      o->deactivate();
    } // Fl_Button* makedefaultrootdirbutton
    { showdefaultrootdirbutton = new Fl_Button(265, 225, 75, 35, "Open current");
      showdefaultrootdirbutton->box(FL_THIN_UP_BOX);
      showdefaultrootdirbutton->labelsize(12);
      showdefaultrootdirbutton->callback((Fl_Callback*)cb_showdefaultrootdirbutton);
      showdefaultrootdirbutton->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* showdefaultrootdirbutton
    { changeIDok = new Fl_Return_Button(350, 236, 74, 20, "Set");
      changeIDok->box(FL_NO_BOX);
      changeIDok->labelsize(12);
      changeIDok->callback((Fl_Callback*)cb_changeIDok);
      changeIDok->align(Fl_Align(FL_ALIGN_RIGHT));
      changeIDok->deactivate();
    } // Fl_Return_Button* changeIDok
    { Fl_Spinner* o = changeIDbutton = new Fl_Spinner(350, 237, 45, 19, "Change ID");
      changeIDbutton->labelsize(12);
      changeIDbutton->minimum(0);
      changeIDbutton->maximum(127);
      changeIDbutton->textsize(12);
      changeIDbutton->callback((Fl_Callback*)cb_changeIDbutton);
      changeIDbutton->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      changeIDbutton->deactivate();
      oldrootID = o->value();
    } // Fl_Spinner* changeIDbutton
    { Fl_Button* o = new Fl_Button(345, 268, 105, 20, "Close Unsaved");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Close2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(225, 268, 105, 20, "Save and Close");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Save);
    } // Fl_Button* o
    readbankcfg();
    pathwindow->end();
  } // Fl_Double_Window* pathwindow
  return pathwindow;
}

BankUI::BankUI(int *npart_, SynthEngine *_synth) {
  synth = _synth;
  fnc = &BankProcess_::process;
          npart = npart_;
          bank = synth->getBankPtr();
          what = 0;
          nselected = -1;
          make_window();
          mode = 1;
  fnr = &RootProcess_::rootprocess;
  	root = synth->getBankPtr();
}

BankUI::~BankUI() {
  //
          bankuiwindow->hide();
          delete bankuiwindow;
          rootuiwindow->hide();
          delete rootuiwindow;
          pathwindow->hide();
          delete pathwindow;
}

void BankUI::Show() {
  // called from part UI
      rescan_for_banks(false);
      set_bank_slot();
      bankuiwindow->show();
      readbutton->value(1);
      mode = 1;
      removeselection();
      modeselect->show();
      refreshmainwindow();
}

void BankUI::Hide() {
  // called from master UI
      bankuiwindow->hide();
}

void BankUI::init(Fl_Spinner *cbwig_) {
  cbwig = cbwig_;rescan_for_banks(false);
}

void BankUI::process() {
  //
  	int slot = this->slot;
  	string thisname =  bank->getname(slot);
          if ((what == 1 || what == 3) && mode == 1 && !bank->emptyslot(slot))
          {
              // Reads from slot
              bank->loadfromslot(slot, synth->part[*npart]);
              synth->part[*npart]->Pname = thisname;
              if (what == 3)
                  bankuiwindow->hide();
              cbwig->do_callback();
              refreshmainwindow();
              return;
          }
  
          if (mode > 1 and bank->readOnlyInstrument(nselected))
          {
              setread();
              fl_alert("This instrument file cannot be changed");
              return;
          }
  
          if (mode == 5 && !bank->emptyslot(slot))
          {   // Rename slot
              const char *newname = fl_input("Instrument name:", thisname.c_str());
              if (newname)
              {
                  if (strlen(newname) > 3)
                  {
                      if (!bank->setname(slot, string(newname), -1))
                      {
                          setread();
                          fl_alert("Could not rename instrument %d to %s", slot, newname);
                          return;
                      }
                      else
                      {
                          bs[slot]->refresh();
                          synth->part[*npart]->Pname = newname;
                      }
                  }
              }
              setread();
              cbwig->do_callback();
          }
  
          if (mode == 2)
          {   // save(write) to slot (choices reversed for 'No' priority)
              bool doit = true;
              if (!bank->emptyslot(slot))
                  if (fl_choice("Overwrite the slot no. %d ?", "Yes", "No", NULL, slot + 1))
                      doit = false;
              if (doit)
              {
                  synth->actionLock(lockmute);
                  bank->savetoslot(slot,synth->part[*npart]);
                  synth->actionLock(unlock);
                  bs[slot]->refresh();
                  setread();
              }
          }
  
          if (mode == 3 && !bank->emptyslot(slot))
          {   // Clears the slot (choices reversed for 'No' priority)
              if (!fl_choice("Clear the slot no. %d ?", "Yes", "No", NULL, slot + 1))
              {
                  bank->clearslot(slot);
                  bs[slot]->refresh();
                  setread();
              }
          }
  
          if (mode == 4)
          {   // swap
              bool done = false;
              if (what == 1 && nselected >= 0)
              {
                  bank->swapslot(nselected, slot);
                  int ns = nselected;
                  nselected = -1;
                  setread();
                  bs[slot]->refresh();
                  bs[ns]->refresh();
                  done = true;
              }
              if ((nselected < 0 || what == 2) && !done)
              {
                  int ns = nselected;
                  nselected = slot;
                  if (ns > 0)
                      bs[ns]->refresh();
                  bs[slot]->refresh();
              }
          }
          if (mode != 4)
              refreshmainwindow();
}

void BankUI::rootprocess() {
  //
      unsigned int slot = this->slot;
      string thisname = bank->getBankName(slot);
  
      
          if ((what == 1 || what == 3) && mode == 1 && !thisname.empty())
          {
              // Selects from slot
              const BankEntry &bankEntry = bank->getBank(slot);
              if (!bank->setCurrentBankID(slot))
              {
                  fl_alert("Error: Could not load the bank from the directory\n%s.",
                            bankEntry.dirname.c_str());
                   setrootread();
                   return;
               }
              if (what == 3)
                  rootuiwindow->hide();
              cbwig->do_callback();
              bankuiwindow->show();
              set_bank_slot(); // needed by 'old' menu selector
              refreshmainwindow();
              return;
          }
  
          if (mode > 1 and mode != 4 and bank->readOnlyBank(nselected))
          {
              setrootread();
              fl_alert("This bank directory cannot be changed");
              return;
          }
          
  
          if (mode == 5 && !thisname.empty())
          {   // Rename bank
              const char *tmp = fl_input("Bank name:",thisname.c_str());
             if (tmp)
             {
                  if (strlen(tmp) > 2) // insist on a readable name
                  {
                      if (!bank->setbankname(slot, string(tmp)))
                      {
                          setrootread();
                          fl_alert("Cound not rename bank %d to %s", slot, thisname.c_str());
                          return;
                      }
                      else
                      {
                          rs[slot]->rootrefresh();
                          rescan_for_banks(false);
                          set_bank_slot();
                      }
                  }
              }
              setrootread();
          }
  
  
          if (mode == 2)
          {   // Create new bank and save to file
              if (!thisname.empty())
              {
                  setrootread();
                  fl_alert("Bank %d already in use for %s", slot, thisname.c_str());
                  return;
              }
              const char *dirname;
              dirname = fl_input("New empty Bank:");
              if (dirname == NULL)
              {
                  setrootread();
                  return;
              }
                  
              if (!bank->newIDbank(dirname, (unsigned int)slot))
              {
                  setrootread();
                  fl_alert("Could not make a new bank directory.");
              	return;
              }
              bank->setCurrentBankID(slot);
              rs[slot]->rootrefresh();
              rescan_for_banks(false);
              set_bank_slot();
              setrootread();
              refreshmainwindow();
          }
  
          if (mode == 3 && !thisname.empty())
          {   // Remove bank and file contents (choices reversed for 'No' priority)
              if (!fl_choice("Completely remove %s?", "Yes", "No", NULL, thisname.c_str()))
              {
                  int clearit = true;
                  int count = bank->getBankSize(slot);
  //                synth->getRuntime().Log("Bank size " + asString(count));
                  if (count > 1)
                      clearit = !fl_choice("There are %d instruments in this bank\nThey will be permanently deleted",
                                           "Continue", "STOP !", NULL, count);
                  if (clearit)
                  {
  //                    synth->getRuntime().Log("We're going");
                      if (bank->removebank(slot))
                      {
                          if (slot == bank->getCurrentBankID())
                              bank->setCurrentBankID(0,false);
                          rescan_for_banks(false);
                          set_bank_slot();
                          rs[slot]->rootrefresh();
                      }
                      else
                          fl_alert("Deleting %s failed. Some files may still exist", thisname.c_str());
                  }
              }
              setrootread();
              refreshmainwindow();
          }
  
          if (mode == 4)
          {   // Swap banks
              bool done = false;
              if (what == 1 && nselected >= 0)
              {
                  bank->swapbanks(nselected, slot);
                  if ((unsigned int) nselected == bank->getCurrentBankID() or (unsigned int) slot == bank->getCurrentBankID())
                      refreshmainwindow();
                  else
                  {
                      int ns = nselected;
                      rs[slot]->rootrefresh();
                      rs[ns]->rootrefresh();
                  }
                  nselected = -1;
                  rescan_for_banks(false);
                  setrootread();
                  done = true;
              }
              if ((nselected < 0 || what == 2) && !done)
              {
                  int ns = nselected;
                  nselected = slot;
                  if (rs > 0)
                      rs[ns]->rootrefresh();
                  rs[slot]->rootrefresh();
              }
          }
}

void BankUI::setread() {
  //
      mode = 1;
      readbutton->value(1);
      writebutton->value(0);
      clearbutton->value(0);
      swapbutton->value(0);
      renamebutton->value(0);
}

void BankUI::setrootread() {
  //
      mode = 1;
      rootreadbutton->value(1);
      rootwritebutton->value(0);
      rootclearbutton->value(0);
      rootswapbutton->value(0);
      rootrenamebutton->value(0);
}

void BankUI::refreshmainwindow() {
  //
      bankuiwindow->copy_label(bank->getBankFileTitle().c_str());
      rootuiwindow->copy_label(bank->getRootFileTitle().c_str());
      for (int i = 0; i < BANK_SIZE; ++i)
          bs[i]->refresh();
      for (int i = 0; i < ROOT_SIZE; ++i)
          rs[i]->rootrefresh();
}

void BankUI::removeselection() {
  if (nselected >= 0)
          {
              int ns = nselected;
              nselected = -1;
              bs[ns]->refresh();
          }
}

void BankUI::rescan_for_banks(bool reload) {
  banklist->clear();
  if(reload)
  {
          bank->rescanforbanks();
  }
         const BankEntryMap &banks = bank->getBanks(bank->getCurrentRootID());
            BankEntryMap::const_iterator it;
            for (it = banks.begin(); it != banks.end(); ++it)
            {
                if (!it->second.dirname.empty())
                {
                    int n = banklist->add((asString(it->first) + ". " + it->second.dirname).c_str(), (const char *)0, (Fl_Callback*)0, reinterpret_cast<void *>(it->first));
                    if(it->first == bank->getCurrentBankID())
                    {
    	                banklist->value(n);
    	        }
                }   
            }
            refreshmainwindow();
}

void BankUI::set_bank_slot() {
  // 
    size_t curID = bank->getCurrentBankID();
   const Fl_Menu_Item *curItem = 0;
      for(int i = 0; i < banklist->size(); i++)
      {
          const Fl_Menu_Item *item = banklist->menu() + i;
          if(item->label())
          {
              if(curID == reinterpret_cast<size_t>(item->user_data()))
              {
                  curItem = item;
              }
          }
      }
      if(curItem)
      {
          banklist->value(curItem);
      }
      else
      {
          banklist->value(0);
      }
}

void BankUI::activatebutton_rootdir(bool active) {
  //
          if (active)
          {
              removerootdirbutton->activate();
              makedefaultrootdirbutton->activate();
              changeIDbutton->activate();
          }
          else
          {
              removerootdirbutton->deactivate();
              makedefaultrootdirbutton->deactivate();
              changeIDbutton->deactivate();
              changeIDok->deactivate();
          }
}

void BankUI::readbankcfg() {
  //
      string tmp;
      rootsbrowse->clear();
      const RootEntryMap &roots = synth->getBankRef().getRoots();
        RootEntryMap::const_iterator it;
        for(it = roots.begin(); it != roots.end(); ++it)
        {
          tmp = asString(it->first) + ". " + it->second.path;
          if(it->first == synth->getBankRef().getCurrentRootID())
        	{
        	   tmp += " *";
        	}
          rootsbrowse->add(tmp.c_str(), reinterpret_cast<void *>(static_cast<long>(it->first)));
        }
}

int BankUI::recoverID() {
  //
      if (selectedRootID >= 0)
      {
          return selectedRootID;
      }
      return 0;
}
