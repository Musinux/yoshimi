// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "/home/louis/Documents/prog/Yoshimi/github/yoshimi/src/LV2_Plugin/PartUI.h"
// PartUI.cc
// Original ZynAddSubFX author Nasca Octavian Paul
// Copyright (C) 2002-2005 Nasca Octavian Paul
// Copyright 2009-2011, Alan Calvert
// Copyright 2014, Will Godfrey    

// This file is part of yoshimi, which is free software: you can redistribute
// it and/or modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.

// yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
// later) for more details.

// You should have received a copy of the GNU General Public License along with
// yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA  02110-1301, USA.

// This file is derivative of ZynAddSubFX original code, modified August 2014

#include <FL/fl_ask.H>
    #include "Misc/Config.h"
    #include "Misc/SynthEngine.h"
#include "MasterUI.h"

void PartSysEffSend::cb_01_i(WidgetPDial* o, void*) {
  synth->setPsysefxvol(npart,neff, o->value());
}
void PartSysEffSend::cb_01(WidgetPDial* o, void* v) {
  ((PartSysEffSend*)(o->parent()->user_data()))->cb_01_i(o,v);
}

Fl_Group* PartSysEffSend::make_window() {
  { syseffsend = new Fl_Group(0, 0, 150, 145);
    syseffsend->box(FL_FLAT_BOX);
    syseffsend->color(FL_BACKGROUND_COLOR);
    syseffsend->selection_color(FL_BACKGROUND_COLOR);
    syseffsend->labeltype(FL_NO_LABEL);
    syseffsend->labelfont(0);
    syseffsend->labelsize(14);
    syseffsend->labelcolor(FL_FOREGROUND_COLOR);
    syseffsend->user_data((void*)(this));
    syseffsend->align(Fl_Align(FL_ALIGN_TOP));
    syseffsend->when(FL_WHEN_RELEASE);
    { WidgetPDial* o = new WidgetPDial(0, 0, 25, 25, "01");
      o->box(FL_ROUND_UP_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->maximum(127);
      o->step(1);
      o->callback((Fl_Callback*)cb_01);
      o->align(Fl_Align(130));
      o->when(FL_WHEN_CHANGED);
      o->size(25,25);
      o->value(synth->Psysefxvol[neff][npart]);
      o->copy_label(asString(neff + 1).c_str());
    } // WidgetPDial* o
    syseffsend->end();
  } // Fl_Group* syseffsend
  return syseffsend;
}

PartSysEffSend::PartSysEffSend(int x, int y, int w, int h) :
    Fl_Group(x, y, w, h, NULL) {
  neff = 0;npart = 0;
}

void PartSysEffSend::init(int npart_, int neff_, SynthEngine *_synth) {
  //
          synth = _synth;
          npart = npart_;
          neff = neff_;
          make_window();
          syseffsend->show();
          end();
}

PartSysEffSend::~PartSysEffSend() {
  syseffsend->hide();
          //delete(syseffsend);
}

void PartUI_::showparameters(int kititem,int engine) {
  ;
}

void PartKitItem::cb_minkcounter_i(Fl_Spinner* o, void*) {
  part->kit[n].Pminkey=(int)o->value();
}
void PartKitItem::cb_minkcounter(Fl_Spinner* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_minkcounter_i(o,v);
}

void PartKitItem::cb_m_i(Fl_Button*, void*) {
  //
              if (part->lastnote >= 0)
                  minkcounter->value(part->lastnote);
              minkcounter->do_callback();
              maxkcounter->do_callback();
}
void PartKitItem::cb_m(Fl_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_m_i(o,v);
}

void PartKitItem::cb_M_i(Fl_Button*, void*) {
  //
              if (part->lastnote >= 0)
                  maxkcounter->value(part->lastnote);
              maxkcounter->do_callback();
              minkcounter->do_callback();
}
void PartKitItem::cb_M(Fl_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_M_i(o,v);
}

void PartKitItem::cb_R_i(Fl_Button*, void*) {
  //
              minkcounter->value(0);
              minkcounter->do_callback();
              maxkcounter->value(127);
              maxkcounter->do_callback();
}
void PartKitItem::cb_R(Fl_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_R_i(o,v);
}

void PartKitItem::cb_adeditbutton_i(Fl_Button*, void*) {
  partui->showparameters(n,0);
}
void PartKitItem::cb_adeditbutton(Fl_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_adeditbutton_i(o,v);
}

void PartKitItem::cb_subeditbutton_i(Fl_Button*, void*) {
  partui->showparameters(n,1);
}
void PartKitItem::cb_subeditbutton(Fl_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_subeditbutton_i(o,v);
}

void PartKitItem::cb_mutedcheck_i(Fl_Check_Button* o, void*) {
  part->kit[n].Pmuted=(int)o->value();
}
void PartKitItem::cb_mutedcheck(Fl_Check_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_mutedcheck_i(o,v);
}

void PartKitItem::cb_maxkcounter_i(Fl_Counter* o, void*) {
  part->kit[n].Pmaxkey=(int)o->value();
}
void PartKitItem::cb_maxkcounter(Fl_Counter* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_maxkcounter_i(o,v);
}

void PartKitItem::cb_labelbutton_i(Fl_Button*, void*) {
  //
              const char *tmp = fl_input("Kit item name:", part->kit[n].Pname.c_str());
              if (tmp != NULL)
                part->kit[n].Pname = string(tmp);
}
void PartKitItem::cb_labelbutton(Fl_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_labelbutton_i(o,v);
}

void PartKitItem::cb_adcheck_i(Fl_Check_Button* o, void*) {
  //
    part->kit[n].Padenabled = o->value();
    if (part->kit[n].Padenabled)
        adeditbutton->activate();
    else
        adeditbutton->deactivate();
    synth->getGuiMaster()->partui->copylabeltopanel();
}
void PartKitItem::cb_adcheck(Fl_Check_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_adcheck_i(o,v);
}

void PartKitItem::cb_subcheck_i(Fl_Check_Button* o, void*) {
  //
    part->kit[n].Psubenabled = o->value();
    if (part->kit[n].Psubenabled)
        subeditbutton->activate();
    else
        subeditbutton->deactivate();
    synth->getGuiMaster()->partui->copylabeltopanel();
}
void PartKitItem::cb_subcheck(Fl_Check_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_subcheck_i(o,v);
}

void PartKitItem::cb_sendtoeffect_i(Fl_Choice* o, void*) {
  //
              if (o->value())
                  part->kit[n].Psendtoparteffect = o->value() - 1;
              else
                  part->kit[n].Psendtoparteffect = 127;
}
void PartKitItem::cb_sendtoeffect(Fl_Choice* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_sendtoeffect_i(o,v);
}

void PartKitItem::cb_padeditbutton_i(Fl_Button*, void*) {
  partui->showparameters(n,2);
}
void PartKitItem::cb_padeditbutton(Fl_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_padeditbutton_i(o,v);
}

void PartKitItem::cb_padcheck_i(Fl_Check_Button* o, void*) {
  //
    part->kit[n].Ppadenabled = o->value();
    if (part->kit[n].Ppadenabled)
        padeditbutton->activate();
    else
        padeditbutton->deactivate();
    synth->getGuiMaster()->partui->copylabeltopanel();
}
void PartKitItem::cb_padcheck(Fl_Check_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->parent()->user_data()))->cb_padcheck_i(o,v);
}

void PartKitItem::cb_enabledcheck_i(Fl_Check_Button* o, void*) {
  //
            int answer = 1;
            if (o->value() == 0)
                answer = fl_choice("Delete the item?","No","Yes",NULL);
            if (answer != 0)
            {
                synth->actionLock(lockmute);
                part->setkititemstatus(n, o->value());
                synth->actionLock(unlock);

                if (o->value() == 0)
                    partkititemgroup->deactivate();
                else
                    partkititemgroup->activate();
                o->redraw();
                partui->showparameters(n, -1); // use to delete the ui, if it is not to item 0
            }
            else
                o->value(1);
}
void PartKitItem::cb_enabledcheck(Fl_Check_Button* o, void* v) {
  ((PartKitItem*)(o->parent()->user_data()))->cb_enabledcheck_i(o,v);
}

Fl_Group* PartKitItem::make_window() {
  { partkititem = new Fl_Group(0, 0, 670, 30);
    partkititem->box(FL_FLAT_BOX);
    partkititem->color(FL_BACKGROUND_COLOR);
    partkititem->selection_color(FL_BACKGROUND_COLOR);
    partkititem->labeltype(FL_NO_LABEL);
    partkititem->labelfont(0);
    partkititem->labelsize(14);
    partkititem->labelcolor(FL_FOREGROUND_COLOR);
    partkititem->user_data((void*)(this));
    partkititem->align(Fl_Align(FL_ALIGN_TOP));
    partkititem->when(FL_WHEN_RELEASE);
    { Fl_Group* o = partkititemgroup = new Fl_Group(55, 0, 605, 20);
      partkititemgroup->box(FL_FLAT_BOX);
      { Fl_Spinner* o = minkcounter = new Fl_Spinner(225, 0, 55, 15);
        minkcounter->minimum(0);
        minkcounter->maximum(128);
        minkcounter->callback((Fl_Callback*)cb_minkcounter);
        o->range(0.0, 127.0);o->step(1.0);
        o->value(part->kit[n].Pminkey);
      } // Fl_Spinner* minkcounter
      { Fl_Button* o = new Fl_Button(285, 3, 15, 12, "m");
        o->tooltip("set the minimum key to the last pressed key");
        o->box(FL_THIN_UP_BOX);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_m);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(315, 3, 15, 12, "M");
        o->tooltip("set the maximum key to the last pressed key");
        o->box(FL_THIN_UP_BOX);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_M);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(300, 3, 15, 12, "R");
        o->tooltip("reset the minimum key to 0 and maximum key to 127");
        o->box(FL_THIN_UP_BOX);
        o->labelfont(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_R);
      } // Fl_Button* o
      { Fl_Button* o = adeditbutton = new Fl_Button(420, 0, 40, 15, "edit");
        adeditbutton->box(FL_THIN_UP_BOX);
        adeditbutton->labelsize(11);
        adeditbutton->callback((Fl_Callback*)cb_adeditbutton);
        if (part->kit[n].Padenabled==0) o->deactivate();
        if (n==0) o->hide();
      } // Fl_Button* adeditbutton
      { Fl_Button* o = subeditbutton = new Fl_Button(490, 0, 40, 15, "edit");
        subeditbutton->box(FL_THIN_UP_BOX);
        subeditbutton->labelsize(11);
        subeditbutton->callback((Fl_Callback*)cb_subeditbutton);
        if (part->kit[n].Psubenabled==0) o->deactivate();
        if (n==0) o->hide();
      } // Fl_Button* subeditbutton
      { Fl_Check_Button* o = mutedcheck = new Fl_Check_Button(60, 0, 20, 15);
        mutedcheck->down_box(FL_DOWN_BOX);
        mutedcheck->labelfont(1);
        mutedcheck->labelsize(11);
        mutedcheck->callback((Fl_Callback*)cb_mutedcheck);
        mutedcheck->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(part->kit[n].Pmuted);
      } // Fl_Check_Button* mutedcheck
      { Fl_Counter* o = maxkcounter = new Fl_Counter(335, 0, 55, 15);
        maxkcounter->type(1);
        maxkcounter->minimum(0);
        maxkcounter->maximum(128);
        maxkcounter->step(1);
        maxkcounter->callback((Fl_Callback*)cb_maxkcounter);
        o->value(part->kit[n].Pmaxkey);
      } // Fl_Counter* maxkcounter
      { Fl_Button* o = labelbutton = new Fl_Button(90, 0, 130, 15, "Bass Drum");
        labelbutton->box(FL_THIN_DOWN_BOX);
        labelbutton->down_box(FL_FLAT_BOX);
        labelbutton->labelfont(1);
        labelbutton->labelsize(10);
        labelbutton->callback((Fl_Callback*)cb_labelbutton);
        labelbutton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        o->copy_label(part->kit[n].Pname.c_str());
      } // Fl_Button* labelbutton
      { Fl_Check_Button* o = adcheck = new Fl_Check_Button(400, 0, 20, 15);
        adcheck->down_box(FL_DOWN_BOX);
        adcheck->labelfont(1);
        adcheck->labelsize(11);
        adcheck->callback((Fl_Callback*)cb_adcheck);
        adcheck->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(part->kit[n].Padenabled);
        if (n==0) o->hide();
      } // Fl_Check_Button* adcheck
      { Fl_Check_Button* o = subcheck = new Fl_Check_Button(470, 0, 20, 15);
        subcheck->down_box(FL_DOWN_BOX);
        subcheck->labelfont(1);
        subcheck->labelsize(11);
        subcheck->callback((Fl_Callback*)cb_subcheck);
        subcheck->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(part->kit[n].Psubenabled);
        if (n==0) o->hide();
      } // Fl_Check_Button* subcheck
      { Fl_Choice* o = sendtoeffect = new Fl_Choice(615, 0, 45, 15);
        sendtoeffect->down_box(FL_BORDER_BOX);
        sendtoeffect->labelsize(10);
        sendtoeffect->textfont(1);
        sendtoeffect->textsize(10);
        sendtoeffect->callback((Fl_Callback*)cb_sendtoeffect);
        sendtoeffect->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->add("OFF"); char nrstr[10]; for(int i = 0; i < NUM_PART_EFX; i++) {sprintf(nrstr,"FX%d",i+1);o->add(nrstr);};
        o->value(part->kit[n].Psendtoparteffect+1);if (part->kit[n].Psendtoparteffect==127) o->value(0);
      } // Fl_Choice* sendtoeffect
      { Fl_Button* o = padeditbutton = new Fl_Button(560, 0, 40, 15, "edit");
        padeditbutton->box(FL_THIN_UP_BOX);
        padeditbutton->labelsize(11);
        padeditbutton->callback((Fl_Callback*)cb_padeditbutton);
        if (part->kit[n].Ppadenabled==0) o->deactivate();
        if (n==0) o->hide();
      } // Fl_Button* padeditbutton
      { Fl_Check_Button* o = padcheck = new Fl_Check_Button(540, 0, 20, 15);
        padcheck->down_box(FL_DOWN_BOX);
        padcheck->labelfont(1);
        padcheck->labelsize(11);
        padcheck->callback((Fl_Callback*)cb_padcheck);
        padcheck->align(Fl_Align(FL_ALIGN_LEFT));
        o->value(part->kit[n].Ppadenabled);
        if (n==0) o->hide();
      } // Fl_Check_Button* padcheck
      if (part->kit[n].Penabled==0) o->deactivate();
      partkititemgroup->end();
    } // Fl_Group* partkititemgroup
    { Fl_Check_Button* o = enabledcheck = new Fl_Check_Button(30, 0, 20, 15, "01");
      enabledcheck->down_box(FL_DOWN_BOX);
      enabledcheck->labeltype(FL_EMBOSSED_LABEL);
      enabledcheck->labelfont(1);
      enabledcheck->labelsize(13);
      enabledcheck->callback((Fl_Callback*)cb_enabledcheck);
      enabledcheck->align(Fl_Align(FL_ALIGN_LEFT));
      snprintf(label,10,"%d",n+1);o->label(label);
      o->value(part->kit[n].Penabled);
      if (n==0) o->deactivate();
    } // Fl_Check_Button* enabledcheck
    partkititem->end();
  } // Fl_Group* partkititem
  return partkititem;
}

PartKitItem::PartKitItem(int x,int y, int w, int h, const char *label):Fl_Group(x,y,w,h,label) {
  n=0;part=NULL;
}

void PartKitItem::refresh() {
  //
          enabledcheck->value(part->kit[n].Penabled);
          if (!part->kit[n].Penabled)
              partkititemgroup->deactivate();
          else
              partkititemgroup->activate();
          mutedcheck->value(part->kit[n].Pmuted);
          labelbutton->label(part->kit[n].Pname.c_str());
          minkcounter->value(part->kit[n].Pminkey);
          maxkcounter->value(part->kit[n].Pmaxkey);
          adcheck->value(part->kit[n].Padenabled);
          adcheck->do_callback();
          subcheck->value(part->kit[n].Psubenabled);
          subcheck->do_callback();
          
          sendtoeffect->value(part->kit[n].Psendtoparteffect + 1);
          if (part->kit[n].Psendtoparteffect == 127)
              sendtoeffect->value(0);
          this->redraw();
}

void PartKitItem::init(Part *part_, int n_, PartUI_ *partui_) {
  //
        synth = part_->getSynthEngine();
        part = part_;
        n = n_;
        partui = partui_;
        make_window();
        //partkititem->show();
        end();
}

PartKitItem::~PartKitItem() {
  partkititem->hide();
        //delete(partkititem);
}

void PartUI::cb_instrumentlabel_i(Fl_Button*, void*) {
  //
    int event = Fl::event_button();
    const char *tmp = NULL;
    if (event == FL_LEFT_MOUSE)
        bankui->Show();
    else if (event == FL_RIGHT_MOUSE)
    {
            tmp = fl_input("Instrument name:", part->Pname.c_str());
            if (tmp != NULL and not string(tmp).empty())
                part->Pname = string(tmp);
    }
    copylabeltopanel();
}
void PartUI::cb_instrumentlabel(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_instrumentlabel_i(o,v);
}

void PartUI::cb_Edit_i(Fl_Button*, void*) {
  instrumenteditwindow->show();
}
void PartUI::cb_Edit(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Edit_i(o,v);
}

void PartUI::cb_Velocity_i(WidgetPDial* o, void*) {
  part->Pvelsns = o->value();
}
void PartUI::cb_Velocity(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Velocity_i(o,v);
}

void PartUI::cb_Velocity1_i(WidgetPDial* o, void*) {
  part->Pveloffs = o->value();
}
void PartUI::cb_Velocity1(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Velocity1_i(o,v);
}

void PartUI::cb_partpan_i(WidgetPDial* o, void*) {
  //
    part->SetController(C_panning, o->value());
    if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
        synth->getGuiMaster()->setPanelPartPanWidget(npart % NUM_MIDI_CHANNELS, o->value());
}
void PartUI::cb_partpan(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_partpan_i(o,v);
}

void PartUI::cb_Centre_i(Fl_Button*, void*) {
  //
    part->SetController(C_panning, 64);
    partpan->value(64);
    if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
        synth->getGuiMaster()->setPanelPartPanWidget(npart % NUM_MIDI_CHANNELS, 64);
}
void PartUI::cb_Centre(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Centre_i(o,v);
}

void PartUI::cb_partvol_i(WidgetPDial* o, void*) {
  //
    part->setVolume(o->value());
    if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
        synth->getGuiMaster()->setPanelPartVolWidget(npart % NUM_MIDI_CHANNELS, o->value());
}
void PartUI::cb_partvol(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_partvol_i(o,v);
}

void PartUI::cb_partGroupEnable_i(Fl_Check_Button* o, void*) {
  //
            synth->actionLock(lockmute);
            synth->partonoff(npart, o->value());
            synth->actionLock(unlock);
            if (!part->Penabled)
                partgroupui->deactivate();
            else
                partgroupui->activate();
            synth->getGuiMaster()->updatepanel();
}
void PartUI::cb_partGroupEnable(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_partGroupEnable_i(o,v);
}

void PartUI::cb_midich_i(Fl_Spinner* o, void*) {
  //
    part->Prcvchn = lrint(o->value()) - 1;
    o->textcolor(FL_BLACK);
    if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
        synth->getGuiMaster()->setPanelPartMidiWidget(npart % NUM_MIDI_CHANNELS, o->value() - 1);
}
void PartUI::cb_midich(Fl_Spinner* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_midich_i(o,v);
}

void PartUI::cb_Mode_i(Fl_Choice* o, void*) {
  //
            switch (o->value())
            {
                case 0: // Poly (implies no legato)
                    part->Ppolymode = 1;
                    part->Plegatomode = 0;
                    break;
                case 1: // Mono (implies no legato)
                    part->Ppolymode = 0;
                    part->Plegatomode = 0;
                    break;
                case 2: // Legato (implies mono)
                    part->Ppolymode = 0;
                    part->Plegatomode = 1;
                    break;
                default:
                    break;
            };
}
void PartUI::cb_Mode(Fl_Choice* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Mode_i(o,v);
}

void PartUI::cb_Portamento_i(Fl_Check_Button* o, void*) {
  part->ctl->portamento.portamento = o->value();
}
void PartUI::cb_Portamento(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Portamento_i(o,v);
}

void PartUI::cb_Key_i(Fl_Spinner* o, void*) {
  part->Pkeyshift= o->value()+64;
}
void PartUI::cb_Key(Fl_Spinner* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Key_i(o,v);
}

void PartUI::cb_Key1_i(Fl_Spinner* o, void*) {
  part->setkeylimit(o->value());
}
void PartUI::cb_Key1(Fl_Spinner* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Key1_i(o,v);
}

void PartUI::cb_Controllers_i(Fl_Button*, void*) {
  ctlwindow->show();
}
void PartUI::cb_Controllers(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Controllers_i(o,v);
}

void PartUI::cb_minkcounter1_i(Fl_Spinner* o, void*) {
  //
            part->Pminkey = o->value();
            if (part->Pminkey>part->Pmaxkey)
                o->textcolor(FL_RED);
            else
                o->textcolor(FL_BLACK);
}
void PartUI::cb_minkcounter1(Fl_Spinner* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_minkcounter1_i(o,v);
}

void PartUI::cb_maxkcounter1_i(Fl_Spinner* o, void*) {
  //
            part->Pmaxkey = o->value();
            if (part->Pminkey > part->Pmaxkey)
                o->textcolor(FL_RED);
            else
                o->textcolor(FL_BLACK);
}
void PartUI::cb_maxkcounter1(Fl_Spinner* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_maxkcounter1_i(o,v);
}

void PartUI::cb_m1_i(Fl_Button*, void*) {
  //
            if (part->lastnote >= 0)
                minkcounter->value(part->lastnote);
            minkcounter->do_callback();
            maxkcounter->do_callback();
}
void PartUI::cb_m1(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_m1_i(o,v);
}

void PartUI::cb_M1_i(Fl_Button*, void*) {
  //
            if (part->lastnote >= 0) maxkcounter->value(part->lastnote);
            maxkcounter->do_callback();
            minkcounter->do_callback();
}
void PartUI::cb_M1(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_M1_i(o,v);
}

void PartUI::cb_R1_i(Fl_Button*, void*) {
  //
            minkcounter->value(0);
            minkcounter->do_callback();
            maxkcounter->value(127);
            maxkcounter->do_callback();
}
void PartUI::cb_R1(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_R1_i(o,v);
}

void PartUI::cb_Expr_i(Fl_Check_Button* o, void*) {
  part->ctl->expression.receive = o->value();
}
void PartUI::cb_Expr(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Expr_i(o,v);
}

void PartUI::cb_PanWdth_i(WidgetPDial* o, void*) {
  part->ctl->setPanDepth((char)o->value());
}
void PartUI::cb_PanWdth(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_PanWdth_i(o,v);
}

void PartUI::cb_FltCut_i(WidgetPDial* o, void*) {
  part->ctl->filtercutoff.depth = o->value();
}
void PartUI::cb_FltCut(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_FltCut_i(o,v);
}

void PartUI::cb_FltQ_i(WidgetPDial* o, void*) {
  part->ctl->filterq.depth = o->value();
}
void PartUI::cb_FltQ(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_FltQ_i(o,v);
}

void PartUI::cb_BwDpth_i(WidgetPDial* o, void*) {
  part->ctl->bandwidth.depth = o->value();
}
void PartUI::cb_BwDpth(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_BwDpth_i(o,v);
}

void PartUI::cb_ModWh_i(WidgetPDial* o, void*) {
  part->ctl->modwheel.depth = o->value();
}
void PartUI::cb_ModWh(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_ModWh_i(o,v);
}

void PartUI::cb_PWheelB_i(Fl_Counter* o, void*) {
  part->ctl->pitchwheel.bendrange = o->value();
}
void PartUI::cb_PWheelB(Fl_Counter* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_PWheelB_i(o,v);
}

void PartUI::cb_FMamp_i(Fl_Check_Button* o, void*) {
  part->ctl->fmamp.receive = o->value();
}
void PartUI::cb_FMamp(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_FMamp_i(o,v);
}

void PartUI::cb_Vol_i(Fl_Check_Button* o, void*) {
  part->ctl->volume.receive = o->value();
}
void PartUI::cb_Vol(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Vol_i(o,v);
}

void PartUI::cb_Sustain_i(Fl_Check_Button* o, void*) {
  //
            part->ctl->sustain.receive = o->value();
            if (part->ctl->sustain.receive == 0)
            {
                part->RelaseSustainedKeys();
                part->ctl->setsustain(0);
            };
}
void PartUI::cb_Sustain(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Sustain_i(o,v);
}

void PartUI::cb_Close_i(Fl_Button*, void*) {
  ctlwindow->hide();
}
void PartUI::cb_Close(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void PartUI::cb_Reset_i(Fl_Button*, void*) {
  part->SetController(C_resetallcontrollers,0);
}
void PartUI::cb_Reset(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Reset_i(o,v);
}

void PartUI::cb_Rcv_i(Fl_Check_Button* o, void*) {
  part->ctl->portamento.receive = o->value();
}
void PartUI::cb_Rcv(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Rcv_i(o,v);
}

void PartUI::cb_time_i(WidgetPDial* o, void*) {
  part->ctl->portamento.time = o->value();
}
void PartUI::cb_time(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_time_i(o,v);
}

void PartUI::cb_thresh_i(Fl_Counter* o, void*) {
  part->ctl->portamento.pitchthresh = o->value();
}
void PartUI::cb_thresh(Fl_Counter* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_thresh_i(o,v);
}

void PartUI::cb_th_i(Fl_Check_Button* o, void*) {
  part->ctl->portamento.pitchthreshtype = o->value();
}
void PartUI::cb_th(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_th_i(o,v);
}

void PartUI::cb_t_i(WidgetPDial* o, void*) {
  //
              int x = o->value();
              part->ctl->portamento.updowntimestretch = x;
}
void PartUI::cb_t(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_t_i(o,v);
}

void PartUI::cb_propta_i(WidgetPDial* o, void*) {
  part->ctl->portamento.propRate=(int) o->value();
}
void PartUI::cb_propta(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_propta_i(o,v);
}

void PartUI::cb_proptb_i(WidgetPDial* o, void*) {
  part->ctl->portamento.propDepth=(int) o->value();
}
void PartUI::cb_proptb(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_proptb_i(o,v);
}

void PartUI::cb_Proprt_i(Fl_Check_Button* o, void*) {
  part->ctl->portamento.proportional=(int) o->value();
if(o->value()){propta->activate();proptb->activate();}
else {propta->deactivate();proptb->deactivate();};
}
void PartUI::cb_Proprt(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Proprt_i(o,v);
}

void PartUI::cb_BWdpth_i(WidgetPDial* o, void*) {
  part->ctl->resonancebandwidth.depth = o->value();
}
void PartUI::cb_BWdpth(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_BWdpth_i(o,v);
}

void PartUI::cb_CFdpth_i(WidgetPDial* o, void*) {
  part->ctl->resonancecenter.depth = o->value();
}
void PartUI::cb_CFdpth(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_CFdpth_i(o,v);
}

void PartUI::cb_Exp_i(Fl_Check_Button* o, void*) {
  part->ctl->modwheel.exponential = o->value();
}
void PartUI::cb_Exp(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Exp_i(o,v);
}

void PartUI::cb_Exp1_i(Fl_Check_Button* o, void*) {
  part->ctl->bandwidth.exponential = o->value();
}
void PartUI::cb_Exp1(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Exp1_i(o,v);
}

void PartUI::cb_Vol1_i(WidgetPDial* o, void*) {
  part->ctl->setvolume((char)o->value());
}
void PartUI::cb_Vol1(WidgetPDial* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Vol1_i(o,v);
}

void PartUI::cb_inseffnocounter_i(Fl_Spinner* o, void*) {
  //
            ninseff = o->value() - 1;
            insefftype->value(part->partefx[ninseff]->geteffect());
            // insefftype->do_callback();
            inseffectui->refresh(part->partefx[ninseff]);
            int x = part->Pefxroute[ninseff];
            if (x == 127)
                x = 1;
            bypasseff->value(part->Pefxbypass[ninseff]);
            sendtochoice->value(x);
}
void PartUI::cb_inseffnocounter(Fl_Spinner* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_inseffnocounter_i(o,v);
}

void PartUI::cb_insefftype_i(Fl_Choice* o, void*) {
  //
            synth->actionLock(lockmute);
            part->partefx[ninseff]->changeeffect(o->value());
            synth->actionLock(unlock);
            inseffectui->refresh(part->partefx[ninseff]);
}
void PartUI::cb_insefftype(Fl_Choice* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_insefftype_i(o,v);
}

Fl_Menu_Item PartUI::menu_insefftype[] = {
 {"No Effect", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Reverb", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"AlienWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Distortion", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"EQ", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"DynFilter", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PartUI::cb_Close1_i(Fl_Button*, void*) {
  partfx->hide();
}
void PartUI::cb_Close1(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void PartUI::cb_sendtochoice_i(Fl_Choice* o, void*) {
  //
            int x = o->value();
            part->Pefxroute[ninseff] = x;
            if (x == 2)
                part->partefx[ninseff]->setdryonly(true);
            else
                part->partefx[ninseff]->setdryonly(false);
}
void PartUI::cb_sendtochoice(Fl_Choice* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_sendtochoice_i(o,v);
}

Fl_Menu_Item PartUI::menu_sendtochoice[] = {
 {"Next Effect", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Part Out", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Dry Out", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PartUI::cb_bypasseff_i(Fl_Check_Button* o, void*) {
  part->Pefxbypass[ninseff]=((o->value())!=0);
}
void PartUI::cb_bypasseff(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_bypasseff_i(o,v);
}

void PartUI::cb_C_i(Fl_Button*, void*) {
  synth->getGuiMaster()->getPresetsUi()->copy(part->partefx[ninseff]);
}
void PartUI::cb_C(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_C_i(o,v);
}

void PartUI::cb_P_i(Fl_Button*, void*) {
  //
            synth->actionLock(lockmute);
            synth->getGuiMaster()->getPresetsUi()->paste(part->partefx[ninseff], inseffectui);
            synth->actionLock(unlock);
}
void PartUI::cb_P(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_P_i(o,v);
}

void PartUI::cb_Close2_i(Fl_Button*, void*) {
  instrumentkitlist->hide();
}
void PartUI::cb_Close2(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Close2_i(o,v);
}

void PartUI::cb_Mode1_i(Fl_Choice* o, void*) {
  //
            part->Pkitmode = o->value();
            if (part->Pkitmode == 0)
                kitlist->deactivate();
            else
                kitlist->activate();
}
void PartUI::cb_Mode1(Fl_Choice* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Mode1_i(o,v);
}

Fl_Menu_Item PartUI::menu_Mode[] = {
 {"Off", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Multi", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Single", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PartUI::cb_Drum_i(Fl_Check_Button* o, void*) {
  part->Pdrummode = o->value();
}
void PartUI::cb_Drum(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Drum_i(o,v);
}

void PartUI::cb_adsynenabledcheck_i(Fl_Check_Button* o, void*) {
  //
              int x = o->value();
              part->kit[0].Padenabled = x;
              if (x == 0)
                  adeditbutton->deactivate();
              else
                  adeditbutton->activate();
              copylabeltopanel();
              if(engine == 0 || x == 0)
                  addbox->color(BASE_COLOUR);
              else
                  addbox->color(ADD_COLOUR);
}
void PartUI::cb_adsynenabledcheck(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->parent()->user_data()))->cb_adsynenabledcheck_i(o,v);
}

void PartUI::cb_adeditbutton1_i(Fl_Button*, void*) {
  showparameters(0,0);
              copylabeltopanel();
              seteditname();
}
void PartUI::cb_adeditbutton1(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->parent()->user_data()))->cb_adeditbutton1_i(o,v);
}

void PartUI::cb_subsynenabledcheck_i(Fl_Check_Button* o, void*) {
  //
    int x = o->value();
    part->kit[0].Psubenabled = x;
    if (x == 0)
        subeditbutton->deactivate();
    else
        subeditbutton->activate();
    if(engine == 0 || x == 0)
        subbox->color(BASE_COLOUR);
    else
        subbox->color(SUB_COLOUR);
}
void PartUI::cb_subsynenabledcheck(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->parent()->user_data()))->cb_subsynenabledcheck_i(o,v);
}

void PartUI::cb_subeditbutton1_i(Fl_Button*, void*) {
  showparameters(0,1);
              copylabeltopanel();
              seteditname();
}
void PartUI::cb_subeditbutton1(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->parent()->user_data()))->cb_subeditbutton1_i(o,v);
}

void PartUI::cb_padsynenabledcheck_i(Fl_Check_Button* o, void*) {
  //
    int x = o->value();
    part->kit[0].Ppadenabled = x;
    if (x == 0)
        padeditbutton->deactivate();
    else
        padeditbutton->activate();

    if(engine == 0 || x == 0)
        padbox->color(BASE_COLOUR);
    else
        padbox->color(PAD_COLOUR);
}
void PartUI::cb_padsynenabledcheck(Fl_Check_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->parent()->user_data()))->cb_padsynenabledcheck_i(o,v);
}

void PartUI::cb_padeditbutton1_i(Fl_Button*, void*) {
  showparameters(0,2);
                copylabeltopanel();
                seteditname();
}
void PartUI::cb_padeditbutton1(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->parent()->user_data()))->cb_padeditbutton1_i(o,v);
}

void PartUI::cb_Kit_i(Fl_Button*, void*) {
  instrumentkitlist->show();
}
void PartUI::cb_Kit(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Kit_i(o,v);
}

void PartUI::cb_Effects_i(Fl_Button*, void*) {
  partfx->show();
}
void PartUI::cb_Effects(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Effects_i(o,v);
}

void PartUI::cb_Author_i(Fl_Input* o, void*) {
  part->info.Pauthor = string(o->value());
}
void PartUI::cb_Author(Fl_Input* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Author_i(o,v);
}

void PartUI::cb_Comments_i(Fl_Input* o, void*) {
  part->info.Pcomments = string(o->value());
}
void PartUI::cb_Comments(Fl_Input* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Comments_i(o,v);
}

void PartUI::cb_Type_i(Fl_Choice* o, void*) {
  part->info.Ptype=o->value();
}
void PartUI::cb_Type(Fl_Choice* o, void* v) {
  ((PartUI*)(o->parent()->parent()->user_data()))->cb_Type_i(o,v);
}

Fl_Menu_Item PartUI::menu_Type[] = {
 {"--------------------------", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Piano", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Chromatic Percussion", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Organ", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Guitar", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Bass", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Solo Strings", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Ensemble", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Brass", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Reed", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Pipe", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Synth Lead", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Synth Pad", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Synth Effects", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Ethnic", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Percussive", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {"Sound Effects", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PartUI::cb_rnddet_i(Fl_Spinner* o, void*) {
  part->Pfrand = o->value() / 200.0f;
}
void PartUI::cb_rnddet(Fl_Spinner* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_rnddet_i(o,v);
}

void PartUI::cb_Close3_i(Fl_Button*, void*) {
  instrumenteditwindow->hide();
}
void PartUI::cb_Close3(Fl_Button* o, void* v) {
  ((PartUI*)(o->parent()->user_data()))->cb_Close3_i(o,v);
}

Fl_Group* PartUI::make_window() {
  { partgroup = new Fl_Group(0, 0, 375, 165);
    partgroup->box(FL_FLAT_BOX);
    partgroup->color(FL_BACKGROUND_COLOR);
    partgroup->selection_color(FL_BACKGROUND_COLOR);
    partgroup->labeltype(FL_NO_LABEL);
    partgroup->labelfont(0);
    partgroup->labelsize(14);
    partgroup->labelcolor(FL_FOREGROUND_COLOR);
    partgroup->user_data((void*)(this));
    partgroup->align(Fl_Align(FL_ALIGN_TOP));
    partgroup->when(FL_WHEN_RELEASE);
    { Fl_Group* o = partgroupui = new Fl_Group(0, 0, 377, 166);
      { instrumentaddbox = new Fl_Box(136, 9, 63, 16);
        instrumentaddbox->box(FL_FLAT_BOX);
        instrumentaddbox->deactivate();
      } // Fl_Box* instrumentaddbox
      { instrumentsubbox = new Fl_Box(199, 9, 63, 16);
        instrumentsubbox->box(FL_FLAT_BOX);
        instrumentsubbox->deactivate();
      } // Fl_Box* instrumentsubbox
      { instrumentpadbox = new Fl_Box(262, 9, 63, 16);
        instrumentpadbox->box(FL_FLAT_BOX);
        instrumentpadbox->deactivate();
      } // Fl_Box* instrumentpadbox
      { instrumentlabel = new Fl_Button(134, 7, 192, 20);
        instrumentlabel->tooltip("Left mouse button: choose/save/.. from/to bank, Right button: instrument name");
        instrumentlabel->box(FL_THIN_DOWN_FRAME);
        instrumentlabel->labelfont(1);
        instrumentlabel->labelsize(12);
        instrumentlabel->callback((Fl_Callback*)cb_instrumentlabel);
        instrumentlabel->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        setinstrumentlabel();
      } // Fl_Button* instrumentlabel
      { Fl_Button* o = new Fl_Button(330, 7, 40, 21, "Edit");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)22);
        o->labelfont(1);
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_Edit);
      } // Fl_Button* o
      { WidgetPDial* o = new WidgetPDial(198, 43, 27, 27, "Velocity\nSense");
        o->box(FL_ROUND_UP_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_INACTIVE_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->maximum(127);
        o->step(1);
        o->callback((Fl_Callback*)cb_Velocity);
        o->align(Fl_Align(FL_ALIGN_BOTTOM));
        o->when(FL_WHEN_CHANGED);
        o->value(part->Pvelsns);
      } // WidgetPDial* o
      { WidgetPDial* o = new WidgetPDial(244, 43, 27, 27, "Velocity\nOffset");
        o->box(FL_ROUND_UP_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_INACTIVE_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->maximum(127);
        o->step(1);
        o->callback((Fl_Callback*)cb_Velocity1);
        o->align(Fl_Align(FL_ALIGN_BOTTOM));
        o->when(FL_WHEN_CHANGED);
        o->value(part->Pveloffs);
      } // WidgetPDial* o
      { WidgetPDial* o = partpan = new WidgetPDial(290, 43, 27, 27, "Pan");
        partpan->box(FL_ROUND_UP_BOX);
        partpan->color(FL_BACKGROUND_COLOR);
        partpan->selection_color(FL_INACTIVE_COLOR);
        partpan->labeltype(FL_NORMAL_LABEL);
        partpan->labelfont(0);
        partpan->labelsize(10);
        partpan->labelcolor(FL_FOREGROUND_COLOR);
        partpan->maximum(127);
        partpan->step(1);
        partpan->callback((Fl_Callback*)cb_partpan);
        partpan->align(Fl_Align(FL_ALIGN_BOTTOM));
        partpan->when(FL_WHEN_CHANGED);
        o->value(part->Ppanning);
      } // WidgetPDial* partpan
      { Fl_Button* o = new Fl_Button(300, 84, 10, 10, "Centre");
        o->tooltip("Centre panning");
        o->box(FL_PLASTIC_ROUND_UP_BOX);
        o->color((Fl_Color)1);
        o->selection_color((Fl_Color)1);
        o->labeltype(FL_NO_LABEL);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_Centre);
      } // Fl_Button* o
      { WidgetPDial* o = partvol = new WidgetPDial(336, 42, 31, 31, "Volume");
        partvol->box(FL_ROUND_UP_BOX);
        partvol->color(FL_BACKGROUND_COLOR);
        partvol->selection_color(FL_INACTIVE_COLOR);
        partvol->labeltype(FL_NORMAL_LABEL);
        partvol->labelfont(0);
        partvol->labelsize(10);
        partvol->labelcolor(FL_FOREGROUND_COLOR);
        partvol->maximum(127);
        partvol->step(1);
        partvol->callback((Fl_Callback*)cb_partvol);
        partvol->align(Fl_Align(FL_ALIGN_BOTTOM));
        partvol->when(FL_WHEN_CHANGED);
        o->value(part->Pvolume);
      } // WidgetPDial* partvol
      { Fl_Box* o = new Fl_Box(245, 97, 132, 69);
        o->box(FL_ENGRAVED_FRAME);
      } // Fl_Box* o
      if (part->Penabled==0) o->deactivate();
      partgroupui->end();
    } // Fl_Group* partgroupui
    { Fl_Check_Button* o = partGroupEnable = new Fl_Check_Button(62, 59, 20, 20, "Enabled");
      partGroupEnable->down_box(FL_DOWN_BOX);
      partGroupEnable->labelsize(11);
      partGroupEnable->callback((Fl_Callback*)cb_partGroupEnable);
      partGroupEnable->align(Fl_Align(FL_ALIGN_LEFT));
      o->value(part->Penabled);
    } // Fl_Check_Button* partGroupEnable
    { Fl_Spinner* o = midich = new Fl_Spinner(35, 36, 40, 18, "Midi");
      midich->tooltip("Midi channel for this part");
      midich->labelsize(11);
      midich->maximum(16);
      midich->textsize(10);
      midich->callback((Fl_Callback*)cb_midich);
      o->value(part->Prcvchn + 1);
      if (part->Prcvchn < NUM_MIDI_CHANNELS) o->textcolor(FL_BLACK); else o->textcolor(FL_WHITE);
    } // Fl_Spinner* midich
    { Fl_Choice* o = new Fl_Choice(81, 36, 66, 18, "Mode");
      o->tooltip("Poly, Mono or Legato mode");
      o->down_box(FL_BORDER_BOX);
      o->labelsize(11);
      o->textfont(1);
      o->textsize(10);
      o->callback((Fl_Callback*)cb_Mode);
      o->align(Fl_Align(FL_ALIGN_RIGHT));
      o->add("Poly"); o->add("Mono"); o->add("Legato");
      if (part->Ppolymode) o->value(0); else o->value(1);
      if (!part->Ppolymode && part->Plegatomode) o->value(2);
    } // Fl_Choice* o
    { Fl_Check_Button* o = new Fl_Check_Button(82, 59, 15, 20, "Portamento");
      o->tooltip("Enable/Disable the portamento");
      o->down_box(FL_DOWN_BOX);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Portamento);
      o->align(Fl_Align(FL_ALIGN_RIGHT));
      o->value(part->ctl->portamento.portamento);
    } // Fl_Check_Button* o
    { Fl_Spinner* o = new Fl_Spinner(202, 116, 38, 18, "Key Shift");
      o->labelsize(10);
      o->minimum(-12);
      o->maximum(12);
      o->textsize(11);
      o->callback((Fl_Callback*)cb_Key);
      o->range(-12.0, 12.0);
      o->value(part->Pkeyshift - 64);
    } // Fl_Spinner* o
    { Fl_Spinner* o = new Fl_Spinner(202, 140, 38, 18, "Key Limit");
      o->tooltip("Maximum keys for this part");
      o->labelsize(10);
      o->value(15);
      o->textsize(11);
      o->callback((Fl_Callback*)cb_Key1);
      o->range(1, POLIPHONY - 5);
      o->value(part->Pkeylimit);
    } // Fl_Spinner* o
    { toSysEfx = new Fl_Scroll(248, 114, 127, 52, "System Effect Sends\n");
      toSysEfx->labelsize(11);
      { Fl_Pack* o = new Fl_Pack(249, 116, 126, 48, "To Sys Efx");
        o->type(1);
        o->labeltype(FL_NO_LABEL);
        o->labelsize(11);
        o->align(Fl_Align(FL_ALIGN_CENTER));
        o->spacing(8);
        //
              for (int i = 0; i < NUM_SYS_EFX; ++i)
            {
              psyef[i] = new PartSysEffSend(0, 0, 25, 25);
              psyef[i]->init(npart, i, synth);
            }
        o->end();
      } // Fl_Pack* o
      toSysEfx->end();
    } // Fl_Scroll* toSysEfx
    { Fl_Button* o = new Fl_Button(25, 82, 135, 25, "Controllers");
      o->tooltip("Controller settings");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)22);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_Controllers);
    } // Fl_Button* o
    { Fl_Spinner* o = minkcounter = new Fl_Spinner(82, 116, 42, 18, "Minimum Note");
      minkcounter->tooltip("Minimum note the part receives");
      minkcounter->labelsize(10);
      minkcounter->minimum(0);
      minkcounter->maximum(127);
      minkcounter->textsize(11);
      minkcounter->callback((Fl_Callback*)cb_minkcounter1);
      o->range(0.0, 127.0);o->step(1.0);
      o->value(part->Pminkey);
    } // Fl_Spinner* minkcounter
    { Fl_Spinner* o = maxkcounter = new Fl_Spinner(82, 140, 42, 18, "Maximum Note");
      maxkcounter->tooltip("Maximum note the part receives");
      maxkcounter->labelsize(10);
      maxkcounter->minimum(0);
      maxkcounter->maximum(127);
      maxkcounter->textsize(11);
      maxkcounter->callback((Fl_Callback*)cb_maxkcounter1);
      o->range(0.0, 127.0);o->step(1.0);
      o->value(part->Pmaxkey);
    } // Fl_Spinner* maxkcounter
    { Fl_Button* o = new Fl_Button(127, 113, 20, 14, "m");
      o->tooltip("set minimum note to the last note played");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)22);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_m1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(127, 147, 20, 14, "M");
      o->tooltip("set maximum key to the last pressed key");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)22);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_M1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(127, 130, 20, 14, "R");
      o->tooltip("reset the minimum key to 0 and maximum key to 127");
      o->box(FL_PLASTIC_UP_BOX);
      o->color((Fl_Color)22);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_R1);
    } // Fl_Button* o
    partgroup->end();
  } // Fl_Group* partgroup
  { Fl_Double_Window* o = ctlwindow = new Fl_Double_Window(505, 130, "Controllers");
    ctlwindow->user_data((void*)(this));
    { Fl_Check_Button* o = new Fl_Check_Button(175, 55, 45, 20, "Expr");
      o->tooltip("Expression enable");
      o->box(FL_THIN_UP_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Expr);
      o->value(part->ctl->expression.receive);
    } // Fl_Check_Button* o
    { WidgetPDial* o = new WidgetPDial(10, 55, 30, 30, "PanWdth");
      o->tooltip("Panning Depth");
      o->box(FL_OVAL_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->maximum(64);
      o->step(1);
      o->callback((Fl_Callback*)cb_PanWdth);
      o->align(Fl_Align(FL_ALIGN_BOTTOM));
      o->when(FL_WHEN_CHANGED);
      o->value(part->ctl->panning.depth);
    } // WidgetPDial* o
    { WidgetPDial* o = new WidgetPDial(90, 55, 30, 30, "FltCut");
      o->tooltip("Filter Cutoff depth");
      o->box(FL_OVAL_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->maximum(127);
      o->step(1);
      o->callback((Fl_Callback*)cb_FltCut);
      o->align(Fl_Align(FL_ALIGN_BOTTOM));
      o->when(FL_WHEN_CHANGED);
      o->value(part->ctl->filtercutoff.depth);
    } // WidgetPDial* o
    { WidgetPDial* o = new WidgetPDial(50, 55, 30, 30, "FltQ");
      o->tooltip("Filter Q depth");
      o->box(FL_OVAL_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->maximum(127);
      o->step(1);
      o->callback((Fl_Callback*)cb_FltQ);
      o->align(Fl_Align(FL_ALIGN_BOTTOM));
      o->when(FL_WHEN_CHANGED);
      o->value(part->ctl->filterq.depth);
    } // WidgetPDial* o
    { WidgetPDial* o = new WidgetPDial(125, 10, 30, 30, "BwDpth");
      o->tooltip("BandWidth depth");
      o->box(FL_OVAL_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->maximum(127);
      o->step(1);
      o->callback((Fl_Callback*)cb_BwDpth);
      o->align(Fl_Align(FL_ALIGN_BOTTOM));
      o->when(FL_WHEN_CHANGED);
      o->value(part->ctl->bandwidth.depth);
    } // WidgetPDial* o
    { WidgetPDial* o = new WidgetPDial(50, 10, 30, 30, "ModWh");
      o->tooltip("Modulation Wheel depth");
      o->box(FL_OVAL_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->maximum(127);
      o->step(1);
      o->callback((Fl_Callback*)cb_ModWh);
      o->align(Fl_Align(FL_ALIGN_BOTTOM));
      o->when(FL_WHEN_CHANGED);
      o->value(part->ctl->modwheel.depth);
    } // WidgetPDial* o
    { Fl_Counter* o = new Fl_Counter(165, 15, 110, 20, "PWheelB.Rng (cents)");
      o->tooltip("Pitch Wheel Bend Range (cents)");
      o->labelsize(10);
      o->minimum(-6400);
      o->maximum(6400);
      o->step(1);
      o->callback((Fl_Callback*)cb_PWheelB);
      o->align(Fl_Align(FL_ALIGN_TOP));
      o->value(part->ctl->pitchwheel.bendrange);
      o->lstep(100);
    } // Fl_Counter* o
    { Fl_Check_Button* o = new Fl_Check_Button(225, 55, 60, 20, "FMamp");
      o->tooltip("FM amplitude enable");
      o->box(FL_THIN_UP_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_FMamp);
      o->value(part->ctl->fmamp.receive);
    } // Fl_Check_Button* o
    { Fl_Check_Button* o = new Fl_Check_Button(175, 80, 45, 20, "Vol");
      o->tooltip("Volume enable");
      o->box(FL_THIN_UP_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Vol);
      o->value(part->ctl->volume.receive);
    } // Fl_Check_Button* o
    { Fl_Check_Button* o = new Fl_Check_Button(225, 80, 60, 20, "Sustain");
      o->tooltip("Sustain pedal enable");
      o->box(FL_THIN_UP_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Sustain);
      o->value(part->ctl->sustain.receive);
    } // Fl_Check_Button* o
    { Fl_Button* o = new Fl_Button(405, 105, 95, 20, "Close");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(5, 105, 210, 20, "Reset all controllers");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Reset);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(340, 15, 160, 85, "Portamento");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->labelsize(10);
      { Fl_Check_Button* o = new Fl_Check_Button(345, 20, 40, 18, "Rcv");
        o->tooltip("Receive Portamento Controllers");
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_DOWN_BOX);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_Rcv);
        o->value(part->ctl->portamento.receive);
      } // Fl_Check_Button* o
      { WidgetPDial* o = new WidgetPDial(345, 60, 25, 25, "time");
        o->tooltip("Portamento time");
        o->box(FL_OVAL_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_INACTIVE_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->maximum(127);
        o->step(1);
        o->callback((Fl_Callback*)cb_time);
        o->align(Fl_Align(FL_ALIGN_BOTTOM));
        o->when(FL_WHEN_CHANGED);
        o->value(part->ctl->portamento.time);
      } // WidgetPDial* o
      { Fl_Counter* o = new Fl_Counter(400, 20, 50, 20, "thresh");
        o->tooltip("Minimum or max. difference of the notes in order to do the portamento (x 100 \
cents)");
        o->type(1);
        o->labelsize(10);
        o->minimum(0);
        o->maximum(127);
        o->step(1);
        o->callback((Fl_Callback*)cb_thresh);
        o->value(part->ctl->portamento.pitchthresh);
      } // Fl_Counter* o
      { Fl_Check_Button* o = new Fl_Check_Button(425, 68, 15, 15, "th.type");
        o->tooltip("Threshold type (min/max)");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_th);
        o->align(Fl_Align(FL_ALIGN_BOTTOM));
        o->value(part->ctl->portamento.pitchthreshtype);
      } // Fl_Check_Button* o
      { Fl_Box* o = new Fl_Box(400, 50, 55, 15, "x100 cnt.");
        o->labelsize(10);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { WidgetPDial* o = new WidgetPDial(375, 60, 25, 25, "t.dn/up");
        o->tooltip("Portamento time stretch (up/down)");
        o->box(FL_OVAL_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_INACTIVE_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->maximum(127);
        o->step(1);
        o->callback((Fl_Callback*)cb_t);
        o->align(Fl_Align(FL_ALIGN_BOTTOM));
        o->when(FL_WHEN_CHANGED);
        o->value(part->ctl->portamento.updowntimestretch);
      } // WidgetPDial* o
      { WidgetPDial* o = propta = new WidgetPDial(463, 20, 25, 25, "Prp.Rate");
        propta->tooltip("Distance required to double change from nonpropotinal portamento time");
        propta->box(FL_OVAL_BOX);
        propta->color(FL_BACKGROUND_COLOR);
        propta->selection_color(FL_INACTIVE_COLOR);
        propta->labeltype(FL_NORMAL_LABEL);
        propta->labelfont(0);
        propta->labelsize(9);
        propta->labelcolor(FL_FOREGROUND_COLOR);
        propta->maximum(127);
        propta->step(1);
        propta->callback((Fl_Callback*)cb_propta);
        propta->align(Fl_Align(FL_ALIGN_BOTTOM));
        propta->when(FL_WHEN_CHANGED);
        o->value(part->ctl->portamento.propRate);
      } // WidgetPDial* propta
      { WidgetPDial* o = proptb = new WidgetPDial(463, 60, 25, 25, "Prp.Dpth");
        proptb->tooltip("The difference from nonproportinal portamento");
        proptb->box(FL_OVAL_BOX);
        proptb->color(FL_BACKGROUND_COLOR);
        proptb->selection_color(FL_INACTIVE_COLOR);
        proptb->labeltype(FL_NORMAL_LABEL);
        proptb->labelfont(0);
        proptb->labelsize(9);
        proptb->labelcolor(FL_FOREGROUND_COLOR);
        proptb->maximum(127);
        proptb->step(1);
        proptb->callback((Fl_Callback*)cb_proptb);
        proptb->align(Fl_Align(FL_ALIGN_BOTTOM));
        proptb->when(FL_WHEN_CHANGED);
        o->value(part->ctl->portamento.propDepth);
      } // WidgetPDial* proptb
      { Fl_Check_Button* o = new Fl_Check_Button(345, 40, 50, 18, "Proprt.");
        o->tooltip("Enable Proportinal Portamento (over fixed Portamento)");
        o->box(FL_THIN_UP_BOX);
        o->down_box(FL_DOWN_BOX);
        o->labelsize(9);
        o->callback((Fl_Callback*)cb_Proprt);
        o->value(part->ctl->portamento.proportional);
        if(o->value()){propta->activate();proptb->activate();}
        else {propta->deactivate();proptb->deactivate();}
      } // Fl_Check_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(290, 15, 45, 85, "Resonance");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(10);
      { WidgetPDial* o = new WidgetPDial(300, 60, 25, 25, "BWdpth");
        o->tooltip("BandWidth controller depth");
        o->box(FL_OVAL_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_INACTIVE_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->maximum(127);
        o->step(1);
        o->callback((Fl_Callback*)cb_BWdpth);
        o->align(Fl_Align(FL_ALIGN_BOTTOM));
        o->when(FL_WHEN_CHANGED);
        o->value(part->ctl->resonancebandwidth.depth);
      } // WidgetPDial* o
      { WidgetPDial* o = new WidgetPDial(300, 20, 25, 25, "CFdpth");
        o->tooltip("Center Frequency controller Depth");
        o->box(FL_OVAL_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_INACTIVE_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->maximum(127);
        o->step(1);
        o->callback((Fl_Callback*)cb_CFdpth);
        o->align(Fl_Align(FL_ALIGN_BOTTOM));
        o->when(FL_WHEN_CHANGED);
        o->value(part->ctl->resonancecenter.depth);
      } // WidgetPDial* o
      o->end();
    } // Fl_Group* o
    { Fl_Check_Button* o = new Fl_Check_Button(10, 15, 40, 25, "Exp MWh");
      o->tooltip("Exponential modulation wheel");
      o->down_box(FL_DOWN_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Exp);
      o->align(Fl_Align(132|FL_ALIGN_INSIDE));
      o->value(part->ctl->modwheel.exponential);
    } // Fl_Check_Button* o
    { Fl_Check_Button* o = new Fl_Check_Button(85, 15, 35, 25, "Exp BW");
      o->tooltip("Exponential BandWidth Controller");
      o->down_box(FL_DOWN_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Exp1);
      o->align(Fl_Align(132|FL_ALIGN_INSIDE));
      o->value(part->ctl->bandwidth.exponential);
    } // Fl_Check_Button* o
    { WidgetPDial* o = new WidgetPDial(132, 55, 30, 30, "Vol Rng");
      o->tooltip("Volume Range");
      o->box(FL_OVAL_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->minimum(64);
      o->maximum(127);
      o->step(1);
      o->callback((Fl_Callback*)cb_Vol1);
      o->align(Fl_Align(FL_ALIGN_BOTTOM));
      o->when(FL_WHEN_CHANGED);
      o->value(part->ctl->volume.data);
    } // WidgetPDial* o
    string tname = synth->getGuiMaster()->set_part_window_title("Controllers");
    o->copy_label(tname.c_str());
    ctlwindow->end();
  } // Fl_Double_Window* ctlwindow
  { Fl_Double_Window* o = partfx = new Fl_Double_Window(390, 160, "Part\'s Insert Effects");
    partfx->user_data((void*)(this));
    { Fl_Spinner* o = inseffnocounter = new Fl_Spinner(35, 8, 35, 19);
      inseffnocounter->tooltip("Effect No.");
      inseffnocounter->labelsize(12);
      inseffnocounter->maximum(3);
      inseffnocounter->textsize(11);
      inseffnocounter->callback((Fl_Callback*)cb_inseffnocounter);
      o->value(ninseff+1);
    } // Fl_Spinner* inseffnocounter
    { Fl_Choice* o = insefftype = new Fl_Choice(104, 7, 95, 22);
      insefftype->tooltip("Effect Type");
      insefftype->box(FL_UP_BOX);
      insefftype->down_box(FL_BORDER_BOX);
      insefftype->labelsize(11);
      insefftype->callback((Fl_Callback*)cb_insefftype);
      insefftype->menu(menu_insefftype);
      o->value(part->partefx[ninseff]->geteffect());
    } // Fl_Choice* insefftype
    { inseffectuigroup = new Fl_Group(5, 37, 380, 96);
      inseffectuigroup->box(FL_FLAT_BOX);
      inseffectuigroup->color((Fl_Color)48);
      { EffUI* o = inseffectui = new EffUI(5, 37, 380, 95);
        inseffectui->box(FL_NO_BOX);
        inseffectui->color(FL_BACKGROUND_COLOR);
        inseffectui->selection_color(FL_BACKGROUND_COLOR);
        inseffectui->labeltype(FL_NORMAL_LABEL);
        inseffectui->labelfont(0);
        inseffectui->labelsize(14);
        inseffectui->labelcolor(FL_FOREGROUND_COLOR);
        inseffectui->align(Fl_Align(FL_ALIGN_TOP));
        inseffectui->when(FL_WHEN_RELEASE);
        o->init(part->partefx[ninseff]);
        inseffectui->end();
      } // EffUI* inseffectui
      inseffectuigroup->end();
    } // Fl_Group* inseffectuigroup
    { Fl_Button* o = new Fl_Button(314, 136, 60, 20, "Close");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Close1);
    } // Fl_Button* o
    { Fl_Choice* o = sendtochoice = new Fl_Choice(244, 7, 90, 22, "To");
      sendtochoice->down_box(FL_BORDER_BOX);
      sendtochoice->labelfont(1);
      sendtochoice->labelsize(11);
      sendtochoice->callback((Fl_Callback*)cb_sendtochoice);
      sendtochoice->menu(menu_sendtochoice);
      int x=part->Pefxroute[ninseff]; if (x==127) x=1;
      o->value(x);
    } // Fl_Choice* sendtochoice
    { Fl_Check_Button* o = bypasseff = new Fl_Check_Button(55, 135, 20, 22, "Bypass");
      bypasseff->tooltip("if the effect is not used (is bypassed)");
      bypasseff->down_box(FL_DOWN_BOX);
      bypasseff->labelsize(12);
      bypasseff->callback((Fl_Callback*)cb_bypasseff);
      bypasseff->align(Fl_Align(FL_ALIGN_LEFT));
      int x=part->Pefxbypass[ninseff];o->value(x);
    } // Fl_Check_Button* bypasseff
    { Fl_Button* o = new Fl_Button(357, 3, 25, 15, "C");
      o->box(FL_THIN_UP_BOX);
      o->color((Fl_Color)179);
      o->labelfont(1);
      o->labelsize(11);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_C);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(357, 19, 25, 15, "P");
      o->box(FL_THIN_UP_BOX);
      o->color((Fl_Color)179);
      o->labelfont(1);
      o->labelsize(11);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_P);
    } // Fl_Button* o
    string tname = synth->getGuiMaster()->set_part_window_title("Insert Effects");
    o->copy_label(tname.c_str());
    partfx->end();
  } // Fl_Double_Window* partfx
  { Fl_Double_Window* o = instrumentkitlist = new Fl_Double_Window(670, 370, "Instrument Kit");
    instrumentkitlist->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(569, 348, 63, 20, "Close");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Close2);
    } // Fl_Button* o
    { Fl_Scroll* o = kitlist = new Fl_Scroll(0, 15, 670, 330);
      kitlist->type(2);
      kitlist->box(FL_THIN_UP_BOX);
      { Fl_Pack* o = new Fl_Pack(0, 20, 670, 320);
        for (int i=0;i<NUM_KIT_ITEMS;i++){partkititem[i]=new PartKitItem(0,0,670,20,"");partkititem[i]->init(part,i,this);}
        o->end();
      } // Fl_Pack* o
      if (part->Pkitmode==0) o->deactivate();
      kitlist->end();
    } // Fl_Scroll* kitlist
    { Fl_Box* o = new Fl_Box(5, 0, 25, 15, "No.");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(55, 0, 25, 15, "M.");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(235, 0, 40, 15, "Min.k");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(345, 0, 40, 15, "Max.k");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(405, 0, 50, 15, "ADsynth");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(470, 0, 60, 15, "SUBsynth");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Choice* o = new Fl_Choice(35, 348, 70, 19, "Mode");
      o->tooltip("Single = only 1st item in defined note range sounds");
      o->down_box(FL_BORDER_BOX);
      o->labelsize(11);
      o->textfont(1);
      o->textsize(11);
      o->callback((Fl_Callback*)cb_Mode1);
      o->menu(menu_Mode);
      o->value(part->Pkitmode);
    } // Fl_Choice* o
    { Fl_Check_Button* o = new Fl_Check_Button(285, 350, 70, 15, "Drum mode");
      o->tooltip("Disables microtonal tuning");
      o->down_box(FL_DOWN_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_Drum);
      o->value(part->Pdrummode);
    } // Fl_Check_Button* o
    { Fl_Box* o = new Fl_Box(620, 0, 30, 15, "FX.r.");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(540, 0, 60, 15, "PADsynth");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    string tname = synth->getGuiMaster()->set_part_window_title("Kit List");
    o->copy_label(tname.c_str());
    instrumentkitlist->end();
  } // Fl_Double_Window* instrumentkitlist
  { Fl_Double_Window* o = instrumenteditwindow = new Fl_Double_Window(395, 360, "Instrument Edit");
    instrumenteditwindow->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 220, 395, 110);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Group* o = new Fl_Group(5, 245, 100, 80, "ADDsynth");
        o->box(FL_ENGRAVED_FRAME);
        o->labelfont(1);
        { Fl_Check_Button* o = adsynenabledcheck = new Fl_Check_Button(15, 255, 80, 20, "Enabled");
          adsynenabledcheck->tooltip("enable/disable ADsynth");
          adsynenabledcheck->box(FL_PLASTIC_UP_BOX);
          adsynenabledcheck->down_box(FL_DOWN_BOX);
          adsynenabledcheck->color((Fl_Color)222);
          adsynenabledcheck->selection_color((Fl_Color)218);
          adsynenabledcheck->labelfont(1);
          adsynenabledcheck->labelsize(11);
          adsynenabledcheck->callback((Fl_Callback*)cb_adsynenabledcheck);
          o->value(part->kit[0].Padenabled);
        } // Fl_Check_Button* adsynenabledcheck
        { Fl_Box* o = addbox = new Fl_Box(10, 226, 89, 18);
          addbox->box(FL_FLAT_BOX);
          addbox->deactivate();
          if (adsynenabledcheck->value() != 0 && engine != 0) o->color(ADD_COLOUR); else o->color(BASE_COLOUR);
        } // Fl_Box* addbox
        { Fl_Button* o = adeditbutton = new Fl_Button(15, 281, 80, 34, "Edit");
          adeditbutton->box(FL_PLASTIC_UP_BOX);
          adeditbutton->color((Fl_Color)222);
          adeditbutton->selection_color((Fl_Color)220);
          adeditbutton->labelfont(1);
          adeditbutton->labelsize(13);
          adeditbutton->callback((Fl_Callback*)cb_adeditbutton1);
          adeditbutton->align(Fl_Align(FL_ALIGN_WRAP));
          if (part->kit[0].Padenabled==0) o->deactivate();
        } // Fl_Button* adeditbutton
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(105, 245, 100, 80, "SUBsynth");
        o->box(FL_ENGRAVED_FRAME);
        o->labelfont(1);
        { Fl_Check_Button* o = subsynenabledcheck = new Fl_Check_Button(115, 255, 80, 20, "Enabled");
          subsynenabledcheck->tooltip("enable/disable SUBsynth");
          subsynenabledcheck->box(FL_PLASTIC_UP_BOX);
          subsynenabledcheck->down_box(FL_DOWN_BOX);
          subsynenabledcheck->color((Fl_Color)222);
          subsynenabledcheck->selection_color((Fl_Color)218);
          subsynenabledcheck->labelfont(1);
          subsynenabledcheck->labelsize(11);
          subsynenabledcheck->callback((Fl_Callback*)cb_subsynenabledcheck);
          o->value(part->kit[0].Psubenabled);
        } // Fl_Check_Button* subsynenabledcheck
        { Fl_Box* o = subbox = new Fl_Box(110, 226, 89, 18);
          subbox->box(FL_FLAT_BOX);
          subbox->deactivate();
          if (subsynenabledcheck->value() != 0 && engine != 0) o->color(SUB_COLOUR); else o->color(BASE_COLOUR);
        } // Fl_Box* subbox
        { Fl_Button* o = subeditbutton = new Fl_Button(115, 280, 80, 35, "Edit");
          subeditbutton->box(FL_PLASTIC_UP_BOX);
          subeditbutton->color((Fl_Color)222);
          subeditbutton->selection_color((Fl_Color)220);
          subeditbutton->labelfont(1);
          subeditbutton->labelsize(13);
          subeditbutton->callback((Fl_Callback*)cb_subeditbutton1);
          subeditbutton->align(Fl_Align(FL_ALIGN_WRAP));
          if (part->kit[0].Psubenabled==0) o->deactivate();
        } // Fl_Button* subeditbutton
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(205, 245, 100, 80, "PADsynth");
        o->box(FL_ENGRAVED_FRAME);
        o->labelfont(1);
        { Fl_Check_Button* o = padsynenabledcheck = new Fl_Check_Button(215, 255, 80, 20, "Enabled");
          padsynenabledcheck->tooltip("enable/disable PADsynth");
          padsynenabledcheck->box(FL_PLASTIC_UP_BOX);
          padsynenabledcheck->down_box(FL_DOWN_BOX);
          padsynenabledcheck->color((Fl_Color)222);
          padsynenabledcheck->selection_color((Fl_Color)218);
          padsynenabledcheck->labelfont(1);
          padsynenabledcheck->labelsize(11);
          padsynenabledcheck->callback((Fl_Callback*)cb_padsynenabledcheck);
          o->value(part->kit[0].Ppadenabled);
        } // Fl_Check_Button* padsynenabledcheck
        { Fl_Box* o = padbox = new Fl_Box(210, 226, 89, 18);
          padbox->box(FL_FLAT_BOX);
          padbox->deactivate();
          if (padsynenabledcheck->value() != 0 && engine != 0) o->color(PAD_COLOUR); else o->color(BASE_COLOUR);
        } // Fl_Box* padbox
        { Fl_Button* o = padeditbutton = new Fl_Button(215, 280, 80, 35, "Edit");
          padeditbutton->box(FL_PLASTIC_UP_BOX);
          padeditbutton->color((Fl_Color)222);
          padeditbutton->selection_color((Fl_Color)220);
          padeditbutton->labelfont(1);
          padeditbutton->labelsize(13);
          padeditbutton->callback((Fl_Callback*)cb_padeditbutton1);
          padeditbutton->align(Fl_Align(FL_ALIGN_WRAP));
          if (part->kit[0].Ppadenabled==0) o->deactivate();
        } // Fl_Button* padeditbutton
        o->end();
      } // Fl_Group* o
      { Fl_Button* o = new Fl_Button(310, 245, 80, 35, "Kit Edit");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)238);
        o->selection_color((Fl_Color)220);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Kit);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 290, 80, 35, "Effects");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)230);
        o->labelfont(1);
        o->labelsize(13);
        o->callback((Fl_Callback*)cb_Effects);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 5, 395, 215);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Input* o = new Fl_Input(5, 60, 385, 50, "Author and Copyright");
        o->type(4);
        o->color((Fl_Color)26);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_Author);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->maximum_size(MAX_INFO_TEXT_SIZE);
        o->value(part->info.Pauthor.c_str());
      } // Fl_Input* o
      { Fl_Input* o = new Fl_Input(5, 125, 385, 90, "Comments");
        o->type(4);
        o->color((Fl_Color)26);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_Comments);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->maximum_size(MAX_INFO_TEXT_SIZE);
        o->value(part->info.Pcomments.c_str());
      } // Fl_Input* o
      { Fl_Choice* o = new Fl_Choice(5, 25, 155, 20, "Type:");
        o->down_box(FL_BORDER_BOX);
        o->labelfont(1);
        o->labelsize(11);
        o->textsize(10);
        o->callback((Fl_Callback*)cb_Type);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->menu(menu_Type);
        o->value(part->info.Ptype);
      } // Fl_Choice* o
      o->end();
    } // Fl_Group* o
    { Fl_Spinner* o = rnddet = new Fl_Spinner(113, 335, 44, 19, "Rnd. Det.");
      rnddet->tooltip("Small random detune - experimental!");
      rnddet->labelsize(12);
      rnddet->minimum(0);
      rnddet->maximum(20);
      rnddet->value(0);
      rnddet->textsize(12);
      rnddet->callback((Fl_Callback*)cb_rnddet);
      o->value((int)part->Pfrand*200);
    } // Fl_Spinner* rnddet
    { Fl_Button* o = new Fl_Button(248, 333, 95, 25, "Close");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Close3);
    } // Fl_Button* o
    rnddet->value((int)(0.5+part->Pfrand*100));
    string tname = synth->getGuiMaster()->set_part_window_title("Edit");
    o->copy_label(tname.c_str());
    instrumenteditwindow->end();
  } // Fl_Double_Window* instrumenteditwindow
  return instrumenteditwindow;
}

PartUI::PartUI(int x,int y, int w, int h, const char *label):Fl_Group(x,y,w,h,label) {
  //
          part = NULL;
          adnoteui = NULL;
          subnoteui = NULL;
          padnoteui = NULL;
          lastkititem = -1;
}

void PartUI::init(Part *part_,int npart_,BankUI *bankui_) {
  //
  	synth = part_->getSynthEngine();
          bankui = bankui_;
          part = part_;
          npart = npart_;
          plgroup = &synth->getGuiMaster()->panelgroup;
          ninseff = 0;
          make_window();
          partgroup->position(this->parent()->x() + 2, this->parent()->y() + 2);
          partgroup->show();
          end();
          // if (Runtime.ui.showinstrumentinfo!=0) instrumenteditwindow->show();
}

void PartUI::showparameters(int kititem,int engine) {
  //
      if (engine == -1)
      {   // this is used if I want to clear the engine from the part
          if (kititem == lastkititem)
              kititem = -1;
          else
              kititem = lastkititem;
      }
      else if (part->Pname == "Simple Sound")
      {
          part->Pname = "No Title";
          instrumentlabel->copy_label(part->Pname.c_str());
      }
  
      if (kititem != lastkititem)
      {
          if (adnoteui != NULL)
              delete adnoteui;
          if (subnoteui != NULL)
              delete subnoteui;
          if (padnoteui != NULL)
              delete padnoteui;
          adnoteui = NULL;
          subnoteui = NULL;
          padnoteui = NULL;
          lastkititem = kititem;
          if (kititem >= NUM_KIT_ITEMS)
              return; // bad kit item
          if (kititem < 0)
              return;
  
          if (part->kit[kititem].adpars)
              adnoteui = new ADnoteUI(part->kit[kititem].adpars);
  
          if (part->kit[kititem].subpars)
              subnoteui = new SUBnoteUI(part->kit[kititem].subpars);
  
          if (part->kit[kititem].padpars)
              padnoteui = new PADnoteUI(part->kit[kititem].padpars);
      }
  
      if (engine == 0 && adnoteui != NULL)
          adnoteui->ADnoteGlobalParameters->show();
      if (engine == 1 && subnoteui != NULL)
          subnoteui->SUBparameters->show();
      if (engine == 2 && adnoteui != NULL)
          padnoteui->padnotewindow->show();
}

void PartUI::find_engines() {
  //
      engine = 0;
      if (synth->getRuntime().checksynthengines)
      {
          for(int i = 0; i < NUM_KIT_ITEMS; ++i)
          {
              if (part->kit[i].Padenabled)
                  engine |= 1;
              if (part->kit[i].Psubenabled)
                  engine |= 2;
              if (part->kit[i].Ppadenabled)
                  engine |= 4;
          }
      }
}

void PartUI::setinstrumentlabel() {
  //
      find_engines();
      if (engine & 1)
          instrumentaddbox->color(ADD_COLOUR);
      else
          instrumentaddbox->color(BASE_COLOUR);
      instrumentaddbox->redraw();
      if (engine & 2)
          instrumentsubbox->color(SUB_COLOUR);
      else
          instrumentsubbox->color(BASE_COLOUR);
      instrumentsubbox->redraw();
      if (engine & 4)
          instrumentpadbox->color(PAD_COLOUR);
      else
          instrumentpadbox->color(BASE_COLOUR);
      instrumentpadbox->redraw();
      instrumentlabel->copy_label(part->Pname.c_str());
}

void PartUI::copylabeltopanel() {
  //
      setinstrumentlabel();
      if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
          synth->getGuiMaster()->setPanelPartLabel(npart, engine);
}

void PartUI::resetlabels() {
  //
      setinstrumentlabel();
      if (adsynenabledcheck->value() == 0 || engine == 0)
          addbox->color(BASE_COLOUR);
      else
          addbox->color(ADD_COLOUR);
      addbox->redraw();
      if (subsynenabledcheck->value() == 0 || engine == 0)
          subbox->color(BASE_COLOUR);
      else
          subbox->color(SUB_COLOUR);
      subbox->redraw();
      if (padsynenabledcheck->value() == 0 || engine == 0)
          padbox->color(BASE_COLOUR);
      else
          padbox->color(PAD_COLOUR);
      padbox->redraw();
}

void PartUI::seteditname() {
  //
      string tname = synth->getGuiMaster()->set_part_window_title("Edit");
      instrumenteditwindow->copy_label(tname.c_str());
}

PartUI::~PartUI() {
  if (adnoteui)
              delete adnoteui;
          if (subnoteui)
              delete subnoteui;
          if (padnoteui)
              delete padnoteui;
          partgroup->hide();
          // delete(partgroup);
          ctlwindow->hide();
          delete ctlwindow;
          partfx->hide();
          delete partfx;
          instrumentkitlist->hide();
          delete instrumentkitlist;
          instrumenteditwindow->hide();
          delete instrumenteditwindow;
}

void PartUI::refresh() {
  /*if(adnoteui != NULL) adnoteui->refresh();
        if(subnoteui != NULL) subnoteui->refresh();
        if(padnoteui != NULL) padnoteui->refresh();*/
}
