// Copyright 2011, Alan Calvert
// Copyright 2014, Will Godfrey   

// This file is part of yoshimi, which is free software: you can
// redistribute it and/or modify it under the terms of the GNU General
// Public License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.

// yoshimi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with yoshimi.  If not, see <http://www.gnu.org/licenses/>.

// Modified September 2014

// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "/home/louis/Documents/prog/Yoshimi/github/yoshimi/src/LV2_Plugin/ParametersUI.h"
#include "Misc/Config.h"
#include "MasterUI.h"

void ParametersUI::cb_Recent_i(Fl_Double_Window* o, void*) {
  o->hide();
}
void ParametersUI::cb_Recent(Fl_Double_Window* o, void* v) {
  ((ParametersUI*)(o->user_data()))->cb_Recent_i(o,v);
}

void ParametersUI::cb_BrowseRecent_i(Fl_Browser* o, void*) {
  if (o->value() > 0)
          {
              deque<HistoryListItem>::iterator ix = synth->getRuntime().ParamsHistory.begin();
              string fle;
              switch (Fl::event_button())
              {
                case FL_LEFT_MOUSE:
                    {
                    	CloseRecent->hide();
                        fle = synth->getRuntime().ParamsHistory.at(o->value() - 1).file;
                        synth->getGuiMaster()->do_load_master(false, fle.c_str());
                        synth->getGuiMaster()->setMasterLabel(synth->getRuntime().ParamsHistory.at(o->value() - 1).name);
                        CloseRecent->show();
                        Recent->hide();
                    }
                    break;
    
                default:
                    break;
              }
          };
}
void ParametersUI::cb_BrowseRecent(Fl_Browser* o, void* v) {
  ((ParametersUI*)(o->parent()->user_data()))->cb_BrowseRecent_i(o,v);
}

void ParametersUI::cb_CloseRecent_i(Fl_Button*, void*) {
  Recent->hide();
}
void ParametersUI::cb_CloseRecent(Fl_Button* o, void* v) {
  ((ParametersUI*)(o->parent()->user_data()))->cb_CloseRecent_i(o,v);
}

Fl_Double_Window* ParametersUI::make_window(void) {
  { Recent = new Fl_Double_Window(220, 180, "Recent Parameters");
    Recent->labelfont(13);
    Recent->labelsize(12);
    Recent->callback((Fl_Callback*)cb_Recent, (void*)(this));
    Recent->align(Fl_Align(FL_ALIGN_CENTER));
    { Fl_Browser* o = BrowseRecent = new Fl_Browser(0, 0, 220, 157);
      BrowseRecent->type(1);
      BrowseRecent->color((Fl_Color)55);
      BrowseRecent->labeltype(FL_NO_LABEL);
      BrowseRecent->labelfont(13);
      BrowseRecent->labelsize(12);
      BrowseRecent->textsize(12);
      BrowseRecent->callback((Fl_Callback*)cb_BrowseRecent);
      BrowseRecent->align(Fl_Align(FL_ALIGN_CENTER));
      const int colwidths[] = { 150, 330, 0 };
          o->column_widths(colwidths);
          o->column_char('	');
    } // Fl_Browser* BrowseRecent
    { Loading = new Fl_Button(83, 159, 57, 20, "Loading");
      Loading->box(FL_THIN_DOWN_BOX);
      Loading->color((Fl_Color)22);
      Loading->labelfont(1);
      Loading->labelsize(11);
    } // Fl_Button* Loading
    { CloseRecent = new Fl_Button(83, 159, 57, 20, "Close");
      CloseRecent->labelfont(13);
      CloseRecent->labelsize(12);
      CloseRecent->callback((Fl_Callback*)cb_CloseRecent);
    } // Fl_Button* CloseRecent
    Recent->end();
  } // Fl_Double_Window* Recent
  return Recent;
}

ParametersUI::ParametersUI(SynthEngine *_synth) {
  synth = _synth;
  make_window();
}

void ParametersUI::loadRecent() {
  BrowseRecent->clear();
          const int colwidths[] = { 64, 128, 0 };
          BrowseRecent->column_widths(colwidths);
          BrowseRecent->column_char('	');
          synth->getRuntime().itx = synth->getRuntime().ParamsHistory.begin();
          for (; synth->getRuntime().itx != synth->getRuntime().ParamsHistory.end(); ++synth->getRuntime().itx)
          {
              string tag = synth->getRuntime().itx->name;
                  // + "\t" + synth->getRuntime().itx->file.substr(0, synth->getRuntime().itx->file.rfind("/") + 1);
              BrowseRecent->add(tag.c_str());
          }
          BrowseRecent->set_changed();
}

void ParametersUI::Show() {
  loadRecent();
        Recent->show();
}

void ParametersUI::Hide() {
  Recent->hide();
}

ParametersUI::~ParametersUI() {
  Recent->hide();
}
