// BankUI.h
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#ifndef BankUI_h
#define BankUI_h
#include <FL/Fl.H>

// Original ZynAddSubFX author Nasca Octavian Paul
// Copyright (C) 2002-2005 Nasca Octavian Paul
// Copyright 2009-2010, Alan Calvert

// This file is part of yoshimi, which is free software: you can redistribute
// it and/or modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.

// yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
// later) for more details.

// You should have received a copy of the GNU General Public License along with
// yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA  02110-1301, USA.

// This file is derivative of original ZynAddSubFX code, modified November 2010

#include <FL/Fl_Button.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Spinner.H>
#include "Misc/Bank.h"
#include "Misc/Config.h"
#include "Misc/SynthEngine.h"

class BankProcess_ {
public:
  virtual void process(void);
  Bank *bank; 
};

class BankSlot : public Fl_Button, BankProcess_ {
public:
  BankSlot(int x,int y, int w, int h, const char *label=0);
  int handle(int event);
  void init(int nslot_, int *what_, int *whatslot_, void (BankProcess_:: *fnc_)(void), BankProcess_ *bp_, Bank *bank_, int *nselected_);
  void refresh();
private:
  int *what, *whatslot, nslot, highlight, *nselected; 
  SynthEngine *synth; 
  void (BankProcess_:: *fnc)(void); 
  BankProcess_ *bp; 
protected:
  void draw();
};

class RootProcess_ {
public:
  virtual void rootprocess(void);
  Bank *root; 
};

class RootSlot : public Fl_Button, RootProcess_ {
public:
  RootSlot(int x,int y, int w, int h, const char *label=0);
  int handle(int event);
  void init(int nslot_, int *what_, int *whatslot_, void (RootProcess_:: *fnr_)(void), RootProcess_ *rp_, Bank *root_, int *nselected_);
  void rootrefresh();
private:
  int *what, *whatslot, nslot, highlight, *nselected; 
  void (RootProcess_:: *fnr)(void); 
  RootProcess_ *rp; 
};
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Return_Button.H>
#include <FL/Fl_Spinner.H>

class BankUI : public BankProcess_, RootProcess_, MiscFuncs {
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *bankuiwindow;
  Fl_Choice *banklist;
private:
  inline void cb_banklist_i(Fl_Choice*, void*);
  static void cb_banklist(Fl_Choice*, void*);
  inline void cb_Refresh_i(Fl_Button*, void*);
  static void cb_Refresh(Fl_Button*, void*);
  inline void cb_Roots_i(Fl_Button*, void*);
  static void cb_Roots(Fl_Button*, void*);
  inline void cb_Banks_i(Fl_Button*, void*);
  static void cb_Banks(Fl_Button*, void*);
public:
  Fl_Group *modeselect;
  Fl_Light_Button *writebutton;
private:
  inline void cb_writebutton_i(Fl_Light_Button*, void*);
  static void cb_writebutton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *readbutton;
private:
  inline void cb_readbutton_i(Fl_Light_Button*, void*);
  static void cb_readbutton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *clearbutton;
private:
  inline void cb_clearbutton_i(Fl_Light_Button*, void*);
  static void cb_clearbutton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *swapbutton;
private:
  inline void cb_swapbutton_i(Fl_Light_Button*, void*);
  static void cb_swapbutton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *renamebutton;
private:
  inline void cb_renamebutton_i(Fl_Light_Button*, void*);
  static void cb_renamebutton(Fl_Light_Button*, void*);
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Group *engines;
private:
  inline void cb_Show_i(Fl_Check_Button*, void*);
  static void cb_Show(Fl_Check_Button*, void*);
public:
  Fl_Button *addpatch;
  Fl_Button *subpatch;
  Fl_Button *padpatch;
  Fl_Double_Window *rootuiwindow;
private:
  inline void cb_Roots1_i(Fl_Button*, void*);
  static void cb_Roots1(Fl_Button*, void*);
  inline void cb_Instruments_i(Fl_Button*, void*);
  static void cb_Instruments(Fl_Button*, void*);
public:
  Fl_Group *rootmodeselect;
  Fl_Light_Button *rootwritebutton;
private:
  inline void cb_rootwritebutton_i(Fl_Light_Button*, void*);
  static void cb_rootwritebutton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *rootreadbutton;
private:
  inline void cb_rootreadbutton_i(Fl_Light_Button*, void*);
  static void cb_rootreadbutton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *rootclearbutton;
private:
  inline void cb_rootclearbutton_i(Fl_Light_Button*, void*);
  static void cb_rootclearbutton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *rootswapbutton;
private:
  inline void cb_rootswapbutton_i(Fl_Light_Button*, void*);
  static void cb_rootswapbutton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *rootrenamebutton;
private:
  inline void cb_rootrenamebutton_i(Fl_Light_Button*, void*);
  static void cb_rootrenamebutton(Fl_Light_Button*, void*);
  inline void cb_Close1_i(Fl_Button*, void*);
  static void cb_Close1(Fl_Button*, void*);
public:
  Fl_Double_Window *pathwindow;
private:
  inline void cb_pathwindow_i(Fl_Double_Window*, void*);
  static void cb_pathwindow(Fl_Double_Window*, void*);
public:
  Fl_Browser *rootsbrowse;
private:
  inline void cb_rootsbrowse_i(Fl_Browser*, void*);
  static void cb_rootsbrowse(Fl_Browser*, void*);
  inline void cb_Add_i(Fl_Button*, void*);
  static void cb_Add(Fl_Button*, void*);
public:
  Fl_Button *removerootdirbutton;
private:
  inline void cb_removerootdirbutton_i(Fl_Button*, void*);
  static void cb_removerootdirbutton(Fl_Button*, void*);
public:
  Fl_Button *makedefaultrootdirbutton;
private:
  inline void cb_makedefaultrootdirbutton_i(Fl_Button*, void*);
  static void cb_makedefaultrootdirbutton(Fl_Button*, void*);
public:
  Fl_Button *showdefaultrootdirbutton;
private:
  inline void cb_showdefaultrootdirbutton_i(Fl_Button*, void*);
  static void cb_showdefaultrootdirbutton(Fl_Button*, void*);
public:
  Fl_Return_Button *changeIDok;
private:
  inline void cb_changeIDok_i(Fl_Return_Button*, void*);
  static void cb_changeIDok(Fl_Return_Button*, void*);
public:
  Fl_Spinner *changeIDbutton;
private:
  inline void cb_changeIDbutton_i(Fl_Spinner*, void*);
  static void cb_changeIDbutton(Fl_Spinner*, void*);
  inline void cb_Close2_i(Fl_Button*, void*);
  static void cb_Close2(Fl_Button*, void*);
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
public:
  BankUI(int *npart_, SynthEngine *_synth);
  virtual ~BankUI();
  void Show();
  void Hide();
  void init(Fl_Spinner *cbwig_);
  void process();
  void rootprocess();
  void setread();
  void setrootread();
  void refreshmainwindow();
  void removeselection();
  void rescan_for_banks(bool reload);
  void set_bank_slot();
  void activatebutton_rootdir(bool active);
  void readbankcfg();
  int recoverID();
private:
  BankSlot *bs[BANK_SIZE]; 
  RootSlot *rs[ROOT_SIZE]; 
  int slot, what; // "what" = what button is pressed
  int mode, *npart, nselected; 
  void (BankProcess_::* fnc)(void); 
  void (RootProcess_::* fnr)(void); 
public:
  Fl_Spinner *cbwig; 
private:
  SynthEngine *synth; 
  long selectedRootID; 
  int EPCvalue; 
  int BankRootvalue; 
  int oldBank; 
  int oldrootID; 
};
#endif
