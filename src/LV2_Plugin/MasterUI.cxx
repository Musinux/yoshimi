// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "/home/louis/Documents/prog/Yoshimi/github/yoshimi/src/LV2_Plugin/MasterUI.h"
// MasterUI.cc
// Original ZynAddSubFX author Nasca Octavian Paul
// Copyright (C) 2002-2005 Nasca Octavian Paul
// Copyright 2009-2011, Alan Calvert
// Copyright 2014, Will Godfrey    

// This file is part of yoshimi, which is free software: you can redistribute
// it and/or modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.

// yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
// later) for more details.

// You should have received a copy of the GNU General Public License along with
// yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA  02110-1301, USA.

// This file is a derivative of the ZynAddSubFX original, modified October 2014

extern bool mainCreateNewInstance(unsigned int forceId);

void MasterUI::cb_masterwindow_i(Fl_Double_Window*, void*) {
  if (configui->configChanged)
          {
              int r = fl_choice("Parameters Changed", "Save Changes", "Cancel", "Don't Save");
              switch (r)
              {
                  case 0:
                      synth->getRuntime().saveConfig();
                      synth->guiClosed(true);
                      break;
                  case 2:
                      synth->guiClosed(true);
                      break;
                  default:
                      break;
              }
          }
          else
          {
                  synth->getRuntime().saveConfig();
                  synth->guiClosed(true);
          };
}
void MasterUI::cb_masterwindow(Fl_Double_Window* o, void* v) {
  ((MasterUI*)(o->user_data()))->cb_masterwindow_i(o,v);
}

void MasterUI::cb_About_i(Fl_Menu_*, void*) {
  aboutwindow->show();
}
void MasterUI::cb_About(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void MasterUI::cb_MidiControllers_i(Fl_Menu_*, void*) {
  midiccwindow->show();
}
void MasterUI::cb_MidiControllers(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_MidiControllers_i(o,v);
}

void MasterUI::cb_New_i(Fl_Menu_*, void*) {
  mainCreateNewInstance(0);
}
void MasterUI::cb_New(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void MasterUI::cb_New1_i(Fl_Menu_*, void*) {
  if(synth->getIsLV2Plugin())
{
	return;
}
const char *sId = fl_input("Enter desired instance id...", "0");
unsigned int forceId = 0;
if(sId == NULL)
{
	return;
}
forceId = string2uint(sId);

mainCreateNewInstance(forceId);
}
void MasterUI::cb_New1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_New1_i(o,v);
}

void MasterUI::cb_Settings_i(Fl_Menu_*, void*) {
  configui->Show();
}
void MasterUI::cb_Settings(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Settings_i(o,v);
}

void MasterUI::cb_E_i(Fl_Menu_*, void*) {
  masterwindow->do_callback();
}
void MasterUI::cb_E(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_E_i(o,v);
}

void MasterUI::cb_Clear_i(Fl_Menu_*, void*) {
  //
                if (fl_choice("Clear instrument's parameters ?", "No", "Yes", NULL))
                {
                    synth->actionLock(lockmute);
                    synth->part[npart]->defaultsinstrument();
                    synth->actionLock(unlock);
                    npartcounter->do_callback();
                }
                updatepanel();
}
void MasterUI::cb_Clear(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Clear_i(o,v);
}

void MasterUI::cb_Open_i(Fl_Menu_*, void*) {
  //
                const char *filename;
                filename = fl_file_chooser("Load:", "({*.xiz})", NULL, 0);
                if (filename == NULL)
                    return;
                int result = synth->part[npart]->loadXMLinstrument(string(filename));
                npartcounter->do_callback();
                updatepanel();
                if (result == 0)
                    fl_alert("Failed to load instrument file");
                else if (result == 3)
                    fl_alert("Instrument is called 'Simple Sound', Yoshimi's basic sound name. You should change this if you wish to re-save.");
}
void MasterUI::cb_Open(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void MasterUI::cb_Save_i(Fl_Menu_*, void*) {
  //
    if (synth->part[npart]->Pname == "Simple Sound")
    {
        fl_alert("Nothing to save!");
        return;
    }
    char *filename = fl_file_chooser("Save:", "({*.xiz})", NULL, 0);
    if (filename == NULL)
        return;
    filename = fl_filename_setext(filename, ".xiz");
    if (isRegFile(string(filename)))
        if (!fl_choice("The file exists. \nOverwrite it?", "No", "Yes", NULL))
            return;
    synth->actionLock(lockmute);
    bool result = synth->part[npart]->saveXML(string(filename));
    synth->actionLock(unlock);
    if (!result)
        fl_alert("Failed to save instrument file");
    updatepanel();
}
void MasterUI::cb_Save(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void MasterUI::cb_Show_i(Fl_Menu_*, void*) {
  bankui->Show();
}
void MasterUI::cb_Show(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Show_i(o,v);
}

void MasterUI::cb_Show1_i(Fl_Menu_*, void*) {
  bankui->rootuiwindow->show();
}
void MasterUI::cb_Show1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Show1_i(o,v);
}

void MasterUI::cb_Show2_i(Fl_Menu_*, void*) {
  bankui->pathwindow->show();
}
void MasterUI::cb_Show2(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Show2_i(o,v);
}

void MasterUI::cb_Virtual_i(Fl_Menu_*, void*) {
  virkeyboard->Show();
}
void MasterUI::cb_Virtual(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Virtual_i(o,v);
}

void MasterUI::cb_RecentParams_i(Fl_Menu_*, void*) {
  paramsui->Show();
}
void MasterUI::cb_RecentParams(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_RecentParams_i(o,v);
}

void MasterUI::cb_Open1_i(Fl_Menu_*, void*) {
  //
                do_load_master(true, NULL);
                paramsui->loadRecent();
}
void MasterUI::cb_Open1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Open1_i(o,v);
}

void MasterUI::cb_Save1_i(Fl_Menu_*, void*) {
  //
    bool valid = false;
    for(int npart = 0; npart < NUM_MIDI_PARTS; npart ++)
        if (synth->part[npart]->Pname != "Simple Sound")
        {
            valid = true;
            npart = NUM_MIDI_PARTS;
        }
    if (valid)
        do_save_master();
    else
        fl_alert("Nothing to save!");
}
void MasterUI::cb_Save1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void MasterUI::cb_Clear1_i(Fl_Menu_*, void*) {
  do_new_master();
}
void MasterUI::cb_Clear1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Clear1_i(o,v);
}

void MasterUI::cb_Load_i(Fl_Menu_*, void*) {
  //
                char *filename;
                filename = fl_file_chooser("Open:", "({*.xsz})", NULL, 0);
                if (filename == NULL)
                    return;
                string fname = string(filename);
                synth->actionLock(lockmute);
                synth->microtonal.defaults(); // clear all parameters
                bool result = synth->microtonal.loadXML(fname);
                synth->actionLock(unlock);
                if (NULL != microtonalui)
                    delete microtonalui;
                microtonalui = new MicrotonalUI(&synth->microtonal);
                if (!result)
                    fl_alert("Failed to load scale settings file");
}
void MasterUI::cb_Load(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void MasterUI::cb_Save2_i(Fl_Menu_*, void*) {
  //
                char *filename;
                filename = fl_file_chooser("Save:", "({*.xsz})", NULL, 0);
                if (filename == NULL)
                    return;
                filename = fl_filename_setext(filename, ".xsz");
                if (isRegFile(string(filename)))
                    if (!fl_choice("The file exists. \nOverwrite it?", "No", "Yes", NULL))
                        return;
                synth->actionLock(lockmute);
                bool result = synth->microtonal.saveXML(string(filename));
                synth->actionLock(unlock);
                if (!result)
                    fl_alert("Failed to save scale settings");
                updatepanel();
}
void MasterUI::cb_Save2(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Save2_i(o,v);
}

void MasterUI::cb_Show3_i(Fl_Menu_*, void*) {
  microtonalui->Show();
}
void MasterUI::cb_Show3(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Show3_i(o,v);
}

void MasterUI::cb_saveState_i(Fl_Menu_*, void*) {
  // for Alessandro

                char *fle = fl_file_chooser("Save:", "({*.state})",
                                            laststatefile.c_str(), 0);
                if (fle)
                {
                    laststatefile = string(fle);
                    synth->getRuntime().saveState(laststatefile);
                };
}
void MasterUI::cb_saveState(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_saveState_i(o,v);
}

void MasterUI::cb_loadState_i(Fl_Menu_*, void*) {
  // for Alessandro
                char *fle = fl_file_chooser("Load:", "({*.state})",
                                            laststatefile.c_str(), 0);
                if (fle)
                {
                    laststatefile = string(fle);
                    synth->getRuntime().loadState(laststatefile);
                }
                refresh_master_ui();
}
void MasterUI::cb_loadState(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_loadState_i(o,v);
}

Fl_Menu_Item MasterUI::menu_mastermenu[] = {
 {"&Yoshimi", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"&About...", 0,  (Fl_Callback*)MasterUI::cb_About, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"MidiControllers", 0,  (Fl_Callback*)MasterUI::cb_MidiControllers, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&New instance", 0,  (Fl_Callback*)MasterUI::cb_New, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"New instance with id...", 0,  (Fl_Callback*)MasterUI::cb_New1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Settings...", 0,  (Fl_Callback*)MasterUI::cb_Settings, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"E&xit", 0,  (Fl_Callback*)MasterUI::cb_E, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Instrument", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Clear Instrument...", 0,  (Fl_Callback*)MasterUI::cb_Clear, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Open Instrument...", 0,  (Fl_Callback*)MasterUI::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Save Instrument ...", 0,  (Fl_Callback*)MasterUI::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Show &Instruments...", 0,  (Fl_Callback*)MasterUI::cb_Show, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Show &Banks...", 0,  (Fl_Callback*)MasterUI::cb_Show1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Show Root &Paths...", 0,  (Fl_Callback*)MasterUI::cb_Show2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Virtual Keyboard...", 0,  (Fl_Callback*)MasterUI::cb_Virtual, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Parameters", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Recent", 0,  (Fl_Callback*)MasterUI::cb_RecentParams, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Open", 0,  (Fl_Callback*)MasterUI::cb_Open1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Save", 0,  (Fl_Callback*)MasterUI::cb_Save1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Clear", 0,  (Fl_Callback*)MasterUI::cb_Clear1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Scales", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Load Scale Settings...", 0,  (Fl_Callback*)MasterUI::cb_Load, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Save Sc&ale Settings ..", 0,  (Fl_Callback*)MasterUI::cb_Save2, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Show Scale Settings...", 0,  (Fl_Callback*)MasterUI::cb_Show3, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"State", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"Save", 0,  (Fl_Callback*)MasterUI::cb_saveState, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Load", 0,  (Fl_Callback*)MasterUI::cb_loadState, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MasterUI::Parameters = MasterUI::menu_mastermenu + 17;
Fl_Menu_Item* MasterUI::RecentParams = MasterUI::menu_mastermenu + 18;
Fl_Menu_Item* MasterUI::Save = MasterUI::menu_mastermenu + 20;
Fl_Menu_Item* MasterUI::Scales = MasterUI::menu_mastermenu + 23;
Fl_Menu_Item* MasterUI::saveState = MasterUI::menu_mastermenu + 29;
Fl_Menu_Item* MasterUI::loadState = MasterUI::menu_mastermenu + 30;

void MasterUI::cb_masterkeyshift_i(Fl_Spinner* o, void*) {
  synth->setPkeyshift(o->value() + 64);
}
void MasterUI::cb_masterkeyshift(Fl_Spinner* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_masterkeyshift_i(o,v);
}

void MasterUI::cb_globalfinedetune_i(WidgetPDial* o, void*) {
  //
              synth->microtonal.Pglobalfinedetune = o->value();
              globalfinedetune->changed();
}
void MasterUI::cb_globalfinedetune(WidgetPDial* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_globalfinedetune_i(o,v);
}

void MasterUI::cb_Reset_i(Fl_Button*, void*) {
  //
              globalfinedetune->value(64.0);
              synth->microtonal.Pglobalfinedetune = 64.0f;
              globalfinedetune->changed();
}
void MasterUI::cb_Reset(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Reset_i(o,v);
}

void MasterUI::cb_Stop_i(Fl_Button*, void*) {
  //
              virkeyboard->relaseallkeys();
              vumeter->init(-1, synth);
              for(int i = 0; i < NUM_MIDI_CHANNELS; i++)
              {
              	if(panelwindow)              
              	{
	              	if(panellistitem[i]->partVUMeter)
	              	{
	              		panellistitem[i]->partVUMeter->resetPart();
	              	}
              	}              	
              }
              synth->actionLock(lockmute);
              synth->shutup = 1;
              synth->fadeLevel = 1.0f;
              synth->actionLock(unlock);
}
void MasterUI::cb_Stop(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Stop_i(o,v);
}

void MasterUI::cb_mastervolumedial_i(WidgetPDial* o, void*) {
  synth->setPvolume(o->value());
}
void MasterUI::cb_mastervolumedial(WidgetPDial* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_mastervolumedial_i(o,v);
}

void MasterUI::cb_virKbd_i(Fl_Button*, void*) {
  virkeyboard->Show();
}
void MasterUI::cb_virKbd(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_virKbd_i(o,v);
}

void MasterUI::cb_Panel_i(Fl_Button*, void*) {
  //
                updatepanel();
                panelwindow->show();
}
void MasterUI::cb_Panel(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Panel_i(o,v);
}

void MasterUI::cb_sysinsgroup_i(Fl_Tabs* o, void*) {
  //
            if (o->value() == SystemEffectsGrp)
                showSysEfxUI();
           else if (o->value() == InsertionEffectsGrp)
               showInsEfxUI();
}
void MasterUI::cb_sysinsgroup(Fl_Tabs* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_sysinsgroup_i(o,v);
}

void MasterUI::cb_syseffnocounter_i(Fl_Spinner* o, void*) {
  //
              nsyseff = o->value() - 1;
              sysefftype->value(synth->sysefx[nsyseff]->geteffect());
              syseffectui->refresh(synth->sysefx[nsyseff]);
}
void MasterUI::cb_syseffnocounter(Fl_Spinner* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_syseffnocounter_i(o,v);
}

void MasterUI::cb_sysefftype_i(Fl_Choice* o, void*) {
  //
              synth->actionLock(lockmute);
              synth->sysefx[nsyseff]->changeeffect(o->value());
              synth->actionLock(unlock);
              syseffectui->refresh(synth->sysefx[nsyseff]);
              showSysEfxUI();
}
void MasterUI::cb_sysefftype(Fl_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_sysefftype_i(o,v);
}

Fl_Menu_Item MasterUI::menu_sysefftype[] = {
 {"No Effect", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Reverb", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"AlienWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Distortion", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"EQ", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"DynFilter", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MasterUI::cb_Send_i(Fl_Button*, void*) {
  syseffsendwindow->show();
}
void MasterUI::cb_Send(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_Send_i(o,v);
}

void MasterUI::cb_C_i(Fl_Button*, void*) {
  presetsui->copy(synth->sysefx[nsyseff]);
}
void MasterUI::cb_C(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_C_i(o,v);
}

void MasterUI::cb_P_i(Fl_Button*, void*) {
  //
              synth->actionLock(lockmute);
              presetsui->paste(synth->sysefx[nsyseff], syseffectui);
              synth->actionLock(unlock);
}
void MasterUI::cb_P(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_P_i(o,v);
}

void MasterUI::cb_inseffnocounter_i(Fl_Spinner* o, void*) {
  //
              ninseff = o->value() - 1;
              insefftype->value(synth->insefx[ninseff]->geteffect());
              inseffpart->value(synth->Pinsparts[ninseff] + 2);
              inseffectui->refresh(synth->insefx[ninseff]);
              if (synth->Pinsparts[ninseff] != -1)
              {
                insefftype->activate();
                inseffectui->activate();
                inseffectuigroup->activate();
              }
              else
              {
                insefftype->deactivate();
                inseffectui->deactivate();
                inseffectuigroup->deactivate();
              };
}
void MasterUI::cb_inseffnocounter(Fl_Spinner* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_inseffnocounter_i(o,v);
}

void MasterUI::cb_insefftype_i(Fl_Choice* o, void*) {
  //
              synth->actionLock(lockmute);
              synth->insefx[ninseff]->changeeffect(o->value());
              synth->actionLock(unlock);
              inseffectui->refresh(synth->insefx[ninseff]);
              showInsEfxUI();
}
void MasterUI::cb_insefftype(Fl_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_insefftype_i(o,v);
}

Fl_Menu_Item MasterUI::menu_insefftype[] = {
 {"No Effect", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Reverb", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"AlienWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Distortion", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"EQ", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"DynFilter", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MasterUI::cb_inseffpart_i(Fl_Choice* o, void*) {
  //
              synth->Pinsparts[ninseff] = o->value() - 2;
              if (o->value() == 1)
              {
                inseffectuigroup->deactivate();
                insefftype->deactivate();
                inseffectui->deactivate();
              }
              else
              {
                inseffectuigroup->activate();
                insefftype->activate();
                inseffectui->activate();
              }
              synth->insefx[ninseff]->cleanup();
}
void MasterUI::cb_inseffpart(Fl_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_inseffpart_i(o,v);
}

void MasterUI::cb_C1_i(Fl_Button*, void*) {
  presetsui->copy(synth->insefx[ninseff]);
}
void MasterUI::cb_C1(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_C1_i(o,v);
}

void MasterUI::cb_P1_i(Fl_Button*, void*) {
  //
              synth->actionLock(lockmute);
              presetsui->paste(synth->insefx[ninseff], inseffectui);
              synth->actionLock(unlock);
}
void MasterUI::cb_P1(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_P1_i(o,v);
}

void MasterUI::cb_Reports_i(Fl_Button*, void*) {
  yoshiLog->Show();
}
void MasterUI::cb_Reports(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Reports_i(o,v);
}

void MasterUI::cb_npartcounter_i(Fl_Spinner* o, void*) {
  //
          int nval = o->value() - 1;
          partuigroup->remove(partui);
          delete partui;
          partui = new PartUI(0, 0, 765, 525);
          partuigroup->add(partui);
          partui->init(synth->part[nval], nval, bankui);
          partui->redraw();
          o->redraw();
          npart = nval;
          updatepanel();
          maxparts->value(synth->getRuntime().NumAvailableParts);
}
void MasterUI::cb_npartcounter(Fl_Spinner* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_npartcounter_i(o,v);
}

void MasterUI::cb_maxparts_i(Fl_Spinner* o, void*) {
  int tmp = o->value();
if (tmp == 48)
{
    if (synth->getRuntime().NumAvailableParts == 32)
        tmp = 64;
    else
        tmp = 32;
    o->value(tmp);
}
synth->getRuntime().NumAvailableParts = tmp;
updatepart();
setinspartlist();
}
void MasterUI::cb_maxparts(Fl_Spinner* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_maxparts_i(o,v);
}

void MasterUI::cb_Close_i(Fl_Button*, void*) {
  aboutwindow->hide();
}
void MasterUI::cb_Close(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void MasterUI::cb_Close1_i(Fl_Button*, void*) {
  syseffsendwindow->hide();
}
void MasterUI::cb_Close1(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void MasterUI::cb_Panelclose_i(Fl_Button*, void*) {
  panelwindow->hide();
}
void MasterUI::cb_Panelclose(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Panelclose_i(o,v);
}

void MasterUI::cb_Panelrefresh_i(Fl_Button*, void*) {
  updatepanel();
}
void MasterUI::cb_Panelrefresh(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Panelrefresh_i(o,v);
}

void MasterUI::cb_Change_i(Fl_Button*, void*) {
  //
            Panelbox1->hide();
            synth->getRuntime().single_row_panel = 1;
            updatepanel();
}
void MasterUI::cb_Change(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Change_i(o,v);
}

void MasterUI::cb_Change1_i(Fl_Button*, void*) {
  //
            synth->getRuntime().single_row_panel = 0;
            updatepanel();
            Panelbox1->show();
}
void MasterUI::cb_Change1(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Change1_i(o,v);
}

void MasterUI::cb_Panelgroups_i(Fl_Choice* o, void*) {
  panelgroup = o->value() * NUM_MIDI_CHANNELS;
Panelsmallgroups->value(o->value());
updatepanel();
}
void MasterUI::cb_Panelgroups(Fl_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Panelgroups_i(o,v);
}

Fl_Menu_Item MasterUI::menu_Panelgroups[] = {
 {"1 to 16", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"17 to 32", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"33 to 48", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"49 to 64", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MasterUI::cb_Panelsmallgroups_i(Fl_Choice* o, void*) {
  panelgroup = o->value() * NUM_MIDI_CHANNELS;
Panelgroups->value(o->value());
updatepanel();
}
void MasterUI::cb_Panelsmallgroups(Fl_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Panelsmallgroups_i(o,v);
}

Fl_Menu_Item MasterUI::menu_Panelsmallgroups[] = {
 {"1 to 16", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"17 to 32", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

MasterUI::MasterUI(SynthEngine *_synth) {
  //
        synth = _synth;
        presetsui = NULL;
        ninseff = 0;
        nsyseff = 0;
        npart = 0;
        panelgroup = 0;
        for (int i = 0; i < NUM_SYS_EFX; ++i)
          for (int j = 0; j < NUM_SYS_EFX; ++j)
            syseffsend[i][j] = NULL;
        microtonalui = NULL;
        bankui = NULL;
        virkeyboard = NULL;
        configui = NULL;
        presetsui = NULL;
        paramsui = NULL;
        yoshiLog = NULL;
        laststatefile = synth->getRuntime().StateFile;
}

MasterUI::~MasterUI() {
  //
        masterwindow->hide();
        aboutwindow->hide();
        delete aboutwindow;
        syseffsendwindow->hide();
        delete syseffsendwindow;
        panelwindow->hide();
        delete panelwindow;
        if (microtonalui)
        {
          microtonalui->Hide();
          delete microtonalui;
        }
        if (bankui)
        {
          bankui->Hide();
          delete bankui;
        }
        if (virkeyboard)
        {
          virkeyboard->Hide();
          delete virkeyboard;
        }
        if (configui)
        {
          configui->Hide();
          delete configui;
        }
        if (presetsui)
        {
          presetsui->Hide();
          delete presetsui;
        }
        if (paramsui)
        {
          paramsui->Hide();
          delete paramsui;
        }
        if (yoshiLog)
        {
          yoshiLog->Hide();
          delete yoshiLog;
        }
        delete masterwindow;
}

void MasterUI::Init(const char *_label) {
  //
        microtonalui = new MicrotonalUI(&synth->microtonal);
        bankui = new BankUI(&npart, synth);
        virkeyboard = new VirKeyboard(synth);
        configui = new ConfigUI(synth);
        midiccwindow = new MidiCCWindow(masterwindow->x()+100,masterwindow->y()+50,316,400, synth, "Midi Controllers");
        synth->setMidiCCWindow(midiccwindow);
        presetsui = new PresetsUI(synth);
        paramsui = new ParametersUI(synth);
        yoshiLog = new ConsoleUI();
        yoshiLog->setLabel(_label);
        make_window();
        if(synth->getIsLV2Plugin())
        {
        	masterwindow->label(_label);
        }
        else
        {
  	setMasterLabel(synth->getRuntime().paramsLoad);
        }
        masterwindow->show();
        if (synth->getRuntime().showConsole)
          yoshiLog->Show();
        else
            yoshiLog->Hide();
}

Fl_Double_Window* MasterUI::make_window() {
  { masterwindow = new Fl_Double_Window(385, 465, "Yoshimi meets ZynAddSubFX");
    masterwindow->labelfont(13);
    masterwindow->labelsize(12);
    masterwindow->callback((Fl_Callback*)cb_masterwindow, (void*)(this));
    { mastermenu = new Fl_Menu_Bar(-4, 0, 400, 25);
      mastermenu->labelsize(13);
      { Fl_Menu_Item* o = &menu_mastermenu[17];
        o = o; // suppress warning
              if (synth->getRuntime().ParamsHistory.empty())
                  RecentParams->deactivate();
              else
                  RecentParams->activate();
      }
      mastermenu->menu(menu_mastermenu);
    } // Fl_Menu_Bar* mastermenu
    { MasterControls = new Fl_Group(3, 24, 380, 64, "Master  ");
      MasterControls->box(FL_PLASTIC_DOWN_FRAME);
      MasterControls->labeltype(FL_NO_LABEL);
      MasterControls->labelsize(11);
      MasterControls->labelcolor((Fl_Color)96);
      MasterControls->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE));
      { Fl_Spinner* o = masterkeyshift = new Fl_Spinner(216, 46, 40, 18, "Key Shift");
        masterkeyshift->tooltip("Shift pitch +/- N semitones");
        masterkeyshift->labelsize(10);
        masterkeyshift->minimum(-12);
        masterkeyshift->maximum(12);
        masterkeyshift->textsize(10);
        masterkeyshift->callback((Fl_Callback*)cb_masterkeyshift);
        masterkeyshift->align(Fl_Align(FL_ALIGN_BOTTOM));
        o->range(-12.0, 12.0);o->step(1.0);
        o->value(synth->Pkeyshift - 64);
      } // Fl_Spinner* masterkeyshift
      { WidgetPDial* o = globalfinedetune = new WidgetPDial(275, 34, 30, 30, "Detune");
        globalfinedetune->tooltip("global fine detune");
        globalfinedetune->box(FL_ROUND_UP_BOX);
        globalfinedetune->color((Fl_Color)29);
        globalfinedetune->selection_color(FL_INACTIVE_COLOR);
        globalfinedetune->labeltype(FL_NORMAL_LABEL);
        globalfinedetune->labelfont(0);
        globalfinedetune->labelsize(10);
        globalfinedetune->labelcolor(FL_FOREGROUND_COLOR);
        globalfinedetune->maximum(127);
        globalfinedetune->step(1);
        globalfinedetune->value(64);
        globalfinedetune->callback((Fl_Callback*)cb_globalfinedetune);
        globalfinedetune->align(Fl_Align(FL_ALIGN_BOTTOM));
        globalfinedetune->when(FL_WHEN_CHANGED);
        o->value(synth->microtonal.Pglobalfinedetune);
      } // WidgetPDial* globalfinedetune
      { Fl_Button* o = new Fl_Button(304, 76, 9, 9, "Reset");
        o->tooltip("Master fine detune reset");
        o->box(FL_PLASTIC_ROUND_UP_BOX);
        o->color((Fl_Color)1);
        o->selection_color((Fl_Color)1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_Reset);
        o->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(11, 46, 50, 20, "Stop!");
        o->tooltip("Cease all sound immediately!");
        o->box(FL_PLASTIC_UP_BOX);
        o->color(FL_RED);
        o->selection_color(FL_GRAY0);
        o->labelfont(1);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_Stop);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Button* o
      { WidgetPDial* o = mastervolumedial = new WidgetPDial(329, 31, 40, 40, "Volume");
        mastervolumedial->tooltip("Master Volume");
        mastervolumedial->box(FL_ROUND_UP_BOX);
        mastervolumedial->color((Fl_Color)29);
        mastervolumedial->selection_color(FL_INACTIVE_COLOR);
        mastervolumedial->labeltype(FL_NORMAL_LABEL);
        mastervolumedial->labelfont(0);
        mastervolumedial->labelsize(10);
        mastervolumedial->labelcolor(FL_FOREGROUND_COLOR);
        mastervolumedial->maximum(127);
        mastervolumedial->step(1);
        mastervolumedial->callback((Fl_Callback*)cb_mastervolumedial);
        mastervolumedial->align(Fl_Align(130));
        mastervolumedial->when(FL_WHEN_CHANGED);
        o->value(synth->Pvolume);
      } // WidgetPDial* mastervolumedial
      { Fl_Button* o = new Fl_Button(148, 46, 50, 20, "virKbd");
        o->tooltip("Virtual Keyboard");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)228);
        o->labelsize(11);
        o->labelcolor(FL_GRAY0);
        o->callback((Fl_Callback*)cb_virKbd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(79, 46, 50, 20, "Panel");
        o->tooltip("Mixer Panel Window");
        o->box(FL_PLASTIC_UP_BOX);
        o->color((Fl_Color)228);
        o->labelsize(11);
        o->labelcolor(FL_GRAY0);
        o->callback((Fl_Callback*)cb_Panel);
      } // Fl_Button* o
      MasterControls->end();
    } // Fl_Group* MasterControls
    { sysinsgroup = new Fl_Tabs(3, 88, 380, 68, "System/Insert");
      sysinsgroup->box(FL_PLASTIC_UP_BOX);
      sysinsgroup->color((Fl_Color)44);
      sysinsgroup->selection_color((Fl_Color)221);
      sysinsgroup->labeltype(FL_NO_LABEL);
      sysinsgroup->labelsize(12);
      sysinsgroup->callback((Fl_Callback*)cb_sysinsgroup);
      sysinsgroup->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { SystemEffectsGrp = new Fl_Group(3, 116, 380, 40, "System Effects");
        SystemEffectsGrp->color((Fl_Color)221);
        SystemEffectsGrp->selection_color((Fl_Color)31);
        SystemEffectsGrp->labelfont(1);
        SystemEffectsGrp->labelsize(12);
        SystemEffectsGrp->align(Fl_Align(FL_ALIGN_LEFT));
        { Fl_Spinner* o = syseffnocounter = new Fl_Spinner(40, 127, 36, 20, "Effect");
          syseffnocounter->labeltype(FL_NO_LABEL);
          syseffnocounter->labelsize(11);
          syseffnocounter->maximum(4);
          syseffnocounter->textfont(1);
          syseffnocounter->textsize(11);
          syseffnocounter->callback((Fl_Callback*)cb_syseffnocounter);
          syseffnocounter->align(Fl_Align(FL_ALIGN_CENTER));
          o->range(1, NUM_SYS_EFX);
          o->value(nsyseff + 1);
        } // Fl_Spinner* syseffnocounter
        { Fl_Choice* o = sysefftype = new Fl_Choice(118, 127, 96, 20, "Type");
          sysefftype->down_box(FL_BORDER_BOX);
          sysefftype->labeltype(FL_NO_LABEL);
          sysefftype->labelsize(10);
          sysefftype->callback((Fl_Callback*)cb_sysefftype);
          sysefftype->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          sysefftype->menu(menu_sysefftype);
          o->value(synth->sysefx[nsyseff]->geteffect());
        } // Fl_Choice* sysefftype
        { Fl_Button* o = new Fl_Button(260, 127, 62, 20, "Send to");
          o->box(FL_THIN_UP_BOX);
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor((Fl_Color)97);
          o->callback((Fl_Callback*)cb_Send);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(350, 122, 25, 14, "C");
          o->box(FL_THIN_UP_BOX);
          o->color((Fl_Color)179);
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_C);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(350, 137, 25, 14, "P");
          o->box(FL_THIN_UP_BOX);
          o->color((Fl_Color)179);
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_P);
        } // Fl_Button* o
        SystemEffectsGrp->end();
      } // Fl_Group* SystemEffectsGrp
      { InsertionEffectsGrp = new Fl_Group(3, 116, 380, 40, "Insertion Effects");
        InsertionEffectsGrp->color((Fl_Color)221);
        InsertionEffectsGrp->selection_color((Fl_Color)31);
        InsertionEffectsGrp->labelfont(1);
        InsertionEffectsGrp->labelsize(12);
        InsertionEffectsGrp->labelcolor((Fl_Color)33);
        InsertionEffectsGrp->align(Fl_Align(FL_ALIGN_LEFT));
        InsertionEffectsGrp->hide();
        { Fl_Spinner* o = inseffnocounter = new Fl_Spinner(40, 127, 36, 20, "Effect");
          inseffnocounter->labeltype(FL_NO_LABEL);
          inseffnocounter->labelsize(11);
          inseffnocounter->maximum(8);
          inseffnocounter->textfont(1);
          inseffnocounter->textsize(11);
          inseffnocounter->callback((Fl_Callback*)cb_inseffnocounter);
          inseffnocounter->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          o->range(1, NUM_INS_EFX);
          o->value(ninseff + 1);
        } // Fl_Spinner* inseffnocounter
        { Fl_Choice* o = insefftype = new Fl_Choice(118, 127, 96, 20, "Type");
          insefftype->down_box(FL_BORDER_BOX);
          insefftype->labeltype(FL_NO_LABEL);
          insefftype->labelsize(11);
          insefftype->textsize(12);
          insefftype->callback((Fl_Callback*)cb_insefftype);
          insefftype->align(Fl_Align(FL_ALIGN_CENTER));
          insefftype->menu(menu_insefftype);
          o->value(synth->insefx[ninseff]->geteffect());
          if (synth->Pinsparts[ninseff]== -1) o->deactivate();
        } // Fl_Choice* insefftype
        { Fl_Choice* o = inseffpart = new Fl_Choice(242, 127, 96, 20, "To ");
          inseffpart->down_box(FL_BORDER_BOX);
          inseffpart->labelfont(1);
          inseffpart->labelsize(10);
          inseffpart->textfont(1);
          inseffpart->textsize(11);
          inseffpart->callback((Fl_Callback*)cb_inseffpart);
          setinspartlist();
          o->value(synth->Pinsparts[ninseff]+2);
        } // Fl_Choice* inseffpart
        { Fl_Button* o = new Fl_Button(350, 122, 25, 14, "C");
          o->box(FL_THIN_UP_BOX);
          o->color((Fl_Color)179);
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_C1);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(350, 137, 25, 14, "P");
          o->box(FL_THIN_UP_BOX);
          o->color((Fl_Color)179);
          o->labelfont(1);
          o->labelsize(11);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_P1);
        } // Fl_Button* o
        InsertionEffectsGrp->end();
      } // Fl_Group* InsertionEffectsGrp
      sysinsgroup->end();
    } // Fl_Tabs* sysinsgroup
    { Reports = new Fl_Button(289, 90, 60, 24, "Reports");
      Reports->box(FL_PLASTIC_UP_BOX);
      Reports->labelsize(11);
      Reports->callback((Fl_Callback*)cb_Reports);
      if (synth->getRuntime().consoleMenuItem == false)Reports->deactivate();
    } // Fl_Button* Reports
    { Fl_Group* o = syseffectuigroup = new Fl_Group(3, 158, 384, 95);
      syseffectuigroup->box(FL_FLAT_BOX);
      syseffectuigroup->color((Fl_Color)48);
      syseffectuigroup->labeltype(FL_NO_LABEL);
      { EffUI* o = syseffectui = new EffUI(3, 158, 384, 95);
        syseffectui->box(FL_NO_BOX);
        syseffectui->color(FL_BACKGROUND_COLOR);
        syseffectui->selection_color(FL_BACKGROUND_COLOR);
        syseffectui->labeltype(FL_NO_LABEL);
        syseffectui->labelfont(0);
        syseffectui->labelsize(14);
        syseffectui->labelcolor(FL_FOREGROUND_COLOR);
        syseffectui->align(Fl_Align(FL_ALIGN_TOP));
        syseffectui->when(FL_WHEN_RELEASE);
        o->init(synth->sysefx[nsyseff]);o->activate();o->show();
        syseffectui->end();
      } // EffUI* syseffectui
      o->show();
      syseffectuigroup->end();
    } // Fl_Group* syseffectuigroup
    { Fl_Group* o = inseffectuigroup = new Fl_Group(3, 158, 384, 95);
      inseffectuigroup->box(FL_FLAT_BOX);
      inseffectuigroup->color((Fl_Color)48);
      { EffUI* o = inseffectui = new EffUI(3, 158, 380, 95);
        inseffectui->box(FL_NO_BOX);
        inseffectui->color(FL_LIGHT2);
        inseffectui->selection_color(FL_BACKGROUND_COLOR);
        inseffectui->labeltype(FL_NORMAL_LABEL);
        inseffectui->labelfont(0);
        inseffectui->labelsize(14);
        inseffectui->labelcolor(FL_FOREGROUND_COLOR);
        inseffectui->align(Fl_Align(FL_ALIGN_TOP));
        inseffectui->when(FL_WHEN_RELEASE);
        o->init(synth->insefx[ninseff]);o->hide();
        if (synth->Pinsparts[ninseff]== -1) o->deactivate();
        inseffectui->end();
      } // EffUI* inseffectui
      o->hide();
      inseffectuigroup->end();
    } // Fl_Group* inseffectuigroup
    { partuigroup = new Fl_Group(3, 255, 380, 170);
      partuigroup->box(FL_ENGRAVED_FRAME);
      { PartUI* o = partui = new PartUI(3, 255, 376, 166);
        partui->box(FL_NO_BOX);
        partui->color(FL_DARK1);
        partui->selection_color(FL_BACKGROUND_COLOR);
        partui->labeltype(FL_NORMAL_LABEL);
        partui->labelfont(0);
        partui->labelsize(14);
        partui->labelcolor(FL_FOREGROUND_COLOR);
        partui->align(Fl_Align(FL_ALIGN_TOP));
        partui->when(FL_WHEN_RELEASE);
        o->init(synth->part[0],0,bankui);
        o->show();
        partui->end();
      } // PartUI* partui
      partuigroup->end();
    } // Fl_Group* partuigroup
    { Fl_Group* o = new Fl_Group(3, 427, 380, 36);
      o->box(FL_DOWN_BOX);
      o->labelsize(12);
      { VUMeter* o = vumeter = new VUMeter(5, 429, 377, 34, "VU-Meter");
        vumeter->box(FL_NO_BOX);
        vumeter->color((Fl_Color)48);
        vumeter->selection_color((Fl_Color)75);
        vumeter->labeltype(FL_NORMAL_LABEL);
        vumeter->labelfont(0);
        vumeter->labelsize(14);
        vumeter->labelcolor(FL_FOREGROUND_COLOR);
        vumeter->align(Fl_Align(FL_ALIGN_CENTER));
        vumeter->when(FL_WHEN_RELEASE);
        o->init(-1, synth);
      } // VUMeter* vumeter
      o->end();
    } // Fl_Group* o
    { Fl_Spinner* o = npartcounter = new Fl_Spinner(38, 265, 40, 20, "Part");
      npartcounter->labelsize(11);
      npartcounter->minimum(0);
      npartcounter->maximum(127);
      npartcounter->textsize(11);
      npartcounter->callback((Fl_Callback*)cb_npartcounter);
      o->type(FL_INT_INPUT); o->range(1.0, synth->getRuntime().NumAvailableParts);
      bankui->init(o);
    } // Fl_Spinner* npartcounter
    { Fl_Spinner* o = maxparts = new Fl_Spinner(95, 265, 40, 20, "of");
      maxparts->labelsize(11);
      maxparts->minimum(16);
      maxparts->maximum(64);
      maxparts->step(16);
      maxparts->value(16);
      maxparts->textsize(11);
      maxparts->callback((Fl_Callback*)cb_maxparts);
      o->value(synth->getRuntime().NumAvailableParts);
    } // Fl_Spinner* maxparts
    masterwindow->xclass("Yoshimi");
    masterwindow->end();
  } // Fl_Double_Window* masterwindow
  { aboutwindow = new Fl_Double_Window(365, 290, "About Yoshimi");
    aboutwindow->color(FL_LIGHT3);
    aboutwindow->labelfont(13);
    aboutwindow->labelsize(13);
    aboutwindow->user_data((void*)(this));
    aboutwindow->when(FL_WHEN_NEVER);
    { Fl_Box* o = new Fl_Box(10, 17, 345, 70, "Yoshimi\nmeets\nZynAddSubFX");
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelfont(13);
      o->labelsize(18);
      o->labelcolor(FL_BLUE);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_NEVER);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(25, 93, 315, 91, "copyright notice");
      o->color((Fl_Color)51);
      o->selection_color((Fl_Color)30);
      o->labelfont(13);
      o->labelsize(11);
      o->align(Fl_Align(192|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_NEVER);
      o->copy_label(string("Copyright (c) 2002-2009 Nasca O. PAUL and others"
                               "\nCopyright 2009-2011, Alan Calvert"
                               "\nCopyright 2012-2013, Jeremy Jongepier and others"
                               "\nCopyright 2014-2015, Will Godfrey and others"
                               "\nLV2 plugin Copyright 2014, Andrew Deryabin"
                               "\nSplash Image Copyright 2015, James Fraser").c_str());
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(10, 198, 340, 53, "copy terms");
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_NEVER);
      //
            o->copy_label(string("This is free software, and comes with ABSOLUTELY NO WARRANTY; "
                                 "you may redistribute it and/or modify it under the terms of "
                                 "GPL version 2, or (at your option) any later version.\n\n").c_str());
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(55, 254, 240, 20, " version");
      o->labelfont(1);
      o->labelsize(12);
      o->labelcolor((Fl_Color)145);
      //
            o->copy_label((string("Yoshimi version ")
                           + string( YOSHIMI_VERSION )).c_str());
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(305, 253, 43, 22, "Close");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    aboutwindow->end();
  } // Fl_Double_Window* aboutwindow
  { syseffsendwindow = new Fl_Double_Window(120, 250, "System Effects Send");
    syseffsendwindow->labelfont(13);
    syseffsendwindow->labelsize(13);
    syseffsendwindow->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(10, 45, 107, 170);
      o->box(FL_FLAT_BOX);
      //
            for (int neff1 = 0; neff1 < NUM_SYS_EFX; neff1++)
                for (int neff2 = neff1 + 1; neff2 < NUM_SYS_EFX; neff2++)
      {
                syseffsend[neff1][neff2] =
                    new SysEffSend(o->x()+(neff2 - 1) * 35, o->y() + 20 + neff1 * 52, 30, 30);
                syseffsend[neff1][neff2]->label("aaa");
                syseffsend[neff1][neff2]->init(neff1, neff2, synth);
            }
      o->end();
    } // Fl_Scroll* o
    { Fl_Button* o = new Fl_Button(20, 220, 80, 25, "Close");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Close1);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(5, 5, 110, 35, "Send system effect\'s output to other system effects");
      o->labelsize(10);
      o->align(Fl_Align(192));
    } // Fl_Box* o
    syseffsendwindow->end();
  } // Fl_Double_Window* syseffsendwindow
  { panelwindow = new Fl_Double_Window(550, 675, "Yoshimi Panel 2 x 8");
    panelwindow->labelfont(13);
    panelwindow->labelsize(13);
    panelwindow->user_data((void*)(this));
    { Fl_Pack* o = Panelpack1 = new Fl_Pack(8, 10, 533, 286);
      Panelpack1->type(1);
      //
          for (int i = 0; i < 8; i++)
          {
              panellistitem[i] = new Panellistitem(0, 0, 70, 260, "");
              panellistitem[i]->init(i, bankui, synth);
          }
      o->spacing(-3);
      Panelpack1->end();
    } // Fl_Pack* Panelpack1
    { Panelbox1 = new Fl_Box(-4, 316, 563, 7);
      Panelbox1->box(FL_THIN_DOWN_BOX);
      Panelbox1->deactivate();
    } // Fl_Box* Panelbox1
    { Fl_Pack* o = Panelpack2 = new Fl_Pack(8, 325, 533, 286);
      Panelpack2->type(1);
      //
            for (int i = 8; i < 16; i++)
            {
                 panellistitem[i] = new Panellistitem(0, 0, 70, 260, "");
                 panellistitem[i]->init(i, bankui, synth);
            }
      o->spacing(-3);
      Panelpack2->end();
    } // Fl_Pack* Panelpack2
    { PanelBox2 = new Fl_Box(-4, 632, 563, 7);
      PanelBox2->box(FL_THIN_DOWN_BOX);
      PanelBox2->deactivate();
    } // Fl_Box* PanelBox2
    { Panelclose = new Fl_Button(482, 645, 55, 25, "Close");
      Panelclose->box(FL_THIN_UP_BOX);
      Panelclose->labelsize(13);
      Panelclose->callback((Fl_Callback*)cb_Panelclose);
    } // Fl_Button* Panelclose
    { Panelrefresh = new Fl_Button(414, 645, 55, 25, "Refresh");
      Panelrefresh->box(FL_THIN_UP_BOX);
      Panelrefresh->labelsize(13);
      Panelrefresh->callback((Fl_Callback*)cb_Panelrefresh);
      Panelrefresh->hide();
      Panelrefresh->deactivate();
    } // Fl_Button* Panelrefresh
    { Fl_Button* o = new Fl_Button(283, 645, 116, 25, "Change to 1 x 16");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(13);
      o->callback((Fl_Callback*)cb_Change);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(821, 314, 116, 25, "Change to 2 x 8");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(13);
      o->callback((Fl_Callback*)cb_Change1);
    } // Fl_Button* o
    { Panelgroups = new Fl_Choice(48, 645, 86, 25, "Parts");
      Panelgroups->down_box(FL_BORDER_BOX);
      Panelgroups->callback((Fl_Callback*)cb_Panelgroups);
      Panelgroups->menu(menu_Panelgroups);
    } // Fl_Choice* Panelgroups
    { Panelsmallgroups = new Fl_Choice(48, 645, 86, 25, "Parts");
      Panelsmallgroups->down_box(FL_BORDER_BOX);
      Panelsmallgroups->callback((Fl_Callback*)cb_Panelsmallgroups);
      Panelsmallgroups->menu(menu_Panelsmallgroups);
    } // Fl_Choice* Panelsmallgroups
    if (synth->getRuntime().single_row_panel)
       Panelbox1->hide();
    panelwindow->end();
  } // Fl_Double_Window* panelwindow
  return panelwindow;
}

void MasterUI::updatesendwindow() {
  //
          for (int neff1 = 0; neff1 < NUM_SYS_EFX; ++neff1)
              for (int neff2 = neff1 + 1; neff2 < NUM_SYS_EFX; ++neff2)
                  syseffsend[neff1][neff2]->value(synth->Psysefxsend[neff1][neff2]);
}

void MasterUI::updatepanel() {
  //
          for (int npart = 0; npart < NUM_MIDI_CHANNELS; ++npart)
              panellistitem[npart]->refresh();
                 if (synth->getRuntime().single_row_panel)
          {
          	panelwindow->size(1085,345);
  	        Panelpack2->position(544,10);
  	        Panelclose->position(1018,314);
  	        Panelrefresh->position(950,314);
  	        Panelgroups->position(48,314);
  	        Panelsmallgroups->position(48,314);
  	        panelwindowlabel = synth->makeUniqueName("Yoshimi Panel 1 x 16 ");
          }
          else
          {
  	        panelwindow->size(550,675);
  	        Panelpack2->position(8,325);
  	        Panelclose->position(482,645);
  	        Panelrefresh->position(414,645);
  	        Panelgroups->position(48,645);
  	        Panelsmallgroups->position(48,645);
  	       	panelwindowlabel = synth->makeUniqueName("Yoshimi Panel 2 x 8 ");
  
          }
          int partmax = synth->getRuntime().NumAvailableParts;
          //synth->getRuntime().Log("Parts " + asString(partmax));
          if (partmax == 64)
              Panelgroups->show();
          else
              Panelgroups->hide();
          if (partmax == 32)
              Panelsmallgroups->show();
          else
              Panelsmallgroups->hide();
          panelwindow->label(panelwindowlabel.c_str());
          panelwindow->changed();
}

void MasterUI::updatepart() {
  //
      checkmaxparts();
      npartcounter->do_callback();
}

void MasterUI::updatepartprogram(int npart) {
  //
      updatepart();
      if (partui->part->Prcvchn <  NUM_MIDI_CHANNELS)
      {
          partui->midich->value(partui->part->Prcvchn + 1);
          partui->midich->textcolor(FL_BLACK);
      }
      else
      {
           partui->midich->textcolor(FL_WHITE);
           partui->midich->redraw();
      }
}

void MasterUI::updateeffects(int data) {
  //
      int effect = (data >> 16) & 0xff;
      int type =  (data >> 12) & 3;
      int parameter = (data >> 8) & 0x7f;
      int value = data & 0x7f;
  
      if (effect > 0x3f)
      {
          effect &= 0x3f;
          synth->getRuntime().Log("Insert  Effect Number "
          			+ asString(effect)
          			+ "  Type " + asString(type)
          			+ "  Parameter "
          			+ asString(parameter)
          			+ "  Value " + asString(value));
          sysinsgroup->value(InsertionEffectsGrp);
          showInsEfxUI();
          inseffnocounter->value(effect + 1);
          int partnum = data >> 24;
          inseffpart->value(partnum);
          if (partnum != 1)
          {
              insefftype->activate();
              inseffectui->activate();
          }
          else
          {
              insefftype->deactivate();
              inseffectui->deactivate();
          }
          insefftype->value(synth->insefx[effect]->geteffect());
          inseffectui->refresh(synth->insefx[effect]);
      }
      else
      {
          synth->getRuntime().Log("Insert  Effect Number "
          			+ asString(effect)
          			+ "  Type " + asString(type)
          			+ "  Parameter "
          			+ asString(parameter)
          			+ "  Value " + asString(value));
          sysinsgroup->value(SystemEffectsGrp);
          syseffnocounter->value(effect + 1);
          if (type == 1)
          {
          // effect output volume to be done!
          }
          sysefftype->value(synth->sysefx[effect]->geteffect());
          syseffectui->refresh(synth->sysefx[effect]);      
          showSysEfxUI();
      }
}

void MasterUI::setMasterLabel(string name) {
  //
          masterwindowlabel = synth->makeUniqueName("Yoshimi");
          if (name.size())
              masterwindowlabel += (" : " + name);
          masterwindow->label(masterwindowlabel.c_str());
          masterwindow->changed();
}

void MasterUI::do_new_master() {
  //
          if (fl_choice("Clear *ALL* parameters ?", "No", "Yes", NULL))
          {
              delete microtonalui;
  
              synth->actionLock(lockmute);
              synth->defaults();
              synth->ClearNRPNs();
              synth->actionLock(unlock);
  
              npartcounter->value(1);
              refresh_master_ui();
              updatepanel();
          }
}

void MasterUI::do_load_master(bool updatehistory, const char* file) {
  //
          const char *fname;
          if (NULL != file)
              fname = file;
          else
          {
              fname = fl_file_chooser("Open:", "({*.xmz})", NULL, 0);
              if (fname == NULL)
                  return;
          }
          int result = synth->loadParameters(fname);
          checkmaxparts();
          setinspartlist();
          npartcounter->value(1);
          refresh_master_ui();
          if (result >= 0) // shouldn't this be just > ?
          {
              if (updatehistory)
                  setMasterLabel(synth->getRuntime().addParamHistory(string(fname)));
              RecentParams->activate();
              if(result > 1)
              	fl_alert("At least one instrument is called 'Simple Sound', the name of Yoshimi's basic sound. You should change this if you wish to re-save.");
          }
          else
          {
              string msg = "Could not load file " + string(fname);
              if (result == -10)
              {
                  msg += ",\nit does not appear to be a valid parameter file.";
                  fl_alert("%s",msg.c_str());
              }
              else
                  fl_alert("%s",msg.c_str());
          }
}

void MasterUI::do_save_master(const char* file ) {
  //
          const char *fname;
          bool result = false;
          if (file == NULL)
          {
              char *tmp = fl_file_chooser("Save:", "({*.xmz})", NULL, 0);
              if (tmp == NULL)
                  return;
              tmp = fl_filename_setext(tmp, ".xmz");
              fname = tmp;
              result = isRegFile(tmp);
              if (result)
              {
                  result = false;
                  if (!fl_choice("The file exists. Overwrite it?", "No", "Yes", NULL))
                      return;
              }
          }
          else
              fname = file;
          result = synth->saveXML(fname);
          if (!result)
              fl_alert("Could not save the file.");
          else
          {
              setMasterLabel(synth->getRuntime().addParamHistory(fname));
              RecentParams->activate();
          }
          updatepanel();
}

void MasterUI::refresh_master_ui() {
  //
          ninseff = 0;
          nsyseff = 0;
          npart = 0;
          npartcounter->do_callback();
          syseffnocounter->do_callback();
          inseffnocounter->do_callback();
          masterkeyshift->value(synth->Pkeyshift - 64);
          mastervolumedial->value(synth->Pvolume);
          globalfinedetune->value(synth->microtonal.Pglobalfinedetune);
          microtonalui = new MicrotonalUI(&synth->microtonal);
          updatesendwindow();
          updatepanel();
          bankui->Hide();
}

void MasterUI::checkmaxparts() {
  //
      int max = synth->getRuntime().NumAvailableParts;
      if(panelgroup >= max)
      {
          panelgroup = 0;
          npart = 0;
          Panelgroups->value(0);
          Panelsmallgroups->value(0);
      }
      npartcounter->range(1.0,max);
      if ( npartcounter->value() >= (max + 1))
          npartcounter->value(1);
}

void MasterUI::strategicRetreat(void) {
  fl_alert("Bad things happened,\nYoshimi strategically retreats.");
}

void MasterUI::Log(string msg) {
  yoshiLog->log(msg);
}

void MasterUI::showSysEfxUI(void) {
  //
        inseffectui->hide();
        inseffectui->deactivate();
        inseffectuigroup->hide();
        inseffectuigroup->deactivate();
  
        syseffectui->activate();
        syseffectui->show();
        syseffectuigroup->activate();
        syseffectuigroup->show();
}

void MasterUI::showInsEfxUI(void) {
  //
        syseffectui->hide();
        syseffectui->deactivate();
        syseffectuigroup->hide();
        syseffectuigroup->deactivate();
  
        inseffectui->activate();
        inseffectui->show();
        inseffectuigroup->activate();
        inseffectuigroup->show();
}

void MasterUI::setinspartlist() {
  //
      inseffpart->clear();
      inseffpart->add("Master Out");
      inseffpart->add("Off");
      int size = synth->getRuntime().NumAvailableParts;
      for (int i = 0; i < size; ++i)
      {
          string num = string("00") + asString(i + 1);
          inseffpart->add((string("Part ") + asString(i + 1)).c_str());
      }
      int current = synth->Pinsparts[ninseff];
      if (current >= size)
      {
          current = -1; // off is safe
          synth->Pinsparts[ninseff] = current;
      }
      inseffpart->value(current + 2);
}

PresetsUI * MasterUI::getPresetsUi() {
  return presetsui;
}

void MasterUI::resetPartsClip() {
  //
          for (int i = 0; i < NUM_MIDI_CHANNELS; i++)
          {
              if(panellistitem[i] && panellistitem[i]->partVUMeter)
              {
                  panellistitem[i]->partVUMeter->resetPart(true);
              }
          }
}

string MasterUI::set_part_window_title(string prefix) {
  //
      string name = prefix + " - Part " + asString(partui->npart + 1) + " " + partui->part->Pname;
      return name;
}

void MasterUI::setPartVolWidget(int _npart, float _value) {
  //
          if (_npart == npart)
              partui->partvol->value(_value);
}

void MasterUI::setPartPanWidget(int _npart, float _value) {
  //
          if (_npart == npart)
              partui->partpan->value(_value);
}

void MasterUI::setPanelPartVolWidget(int _npart, float _value) {
  //
          panellistitem[_npart]->partvolume->value(_value);
}

void MasterUI::setPanelPartPanWidget(int _npart, float _value) {
  //
          panellistitem[_npart]->partpanning->value(_value);
}

void MasterUI::setPartMidiWidget(int _npart, unsigned char _value) {
  //
          if (_npart == npart)
              partui->midich->value(_value);
              partui->midich->textcolor(FL_BLACK);
}

void MasterUI::setPanelPartMidiWidget(int _npart, unsigned char _value) {
  //
          panellistitem[_npart]->partrcv->value(_value);
          panellistitem[_npart]->partrcv->textcolor(FL_BLACK);
          panellistitem[_npart]->partrcv->redraw();
}

void MasterUI::setPanelPartLabel(int _npart, int _engine) {
  //
      panellistitem[_npart % NUM_MIDI_CHANNELS]->setPartLabel(_engine);
}

void MasterUI::showInstrumentEditWindow(int _npart) {
  //
          if (_npart == npart)
              partui->instrumenteditwindow->show();
}

void MasterUI::updateBankRootDirs() {
  bankui->readbankcfg();
}

SynthEngine * MasterUI::getSynth() {
  return synth;
}

void MasterUI::refresh() {
  /*if(partui != NULL) partui->refresh();*/
}
