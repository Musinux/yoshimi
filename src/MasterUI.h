// MasterUI.h
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#ifndef MasterUI_h
#define MasterUI_h
#include <FL/Fl.H>
// Original ZynAddSubFX author Nasca Octavian Paul
// Copyright (C) 2002-2005 Nasca Octavian Paul
// Copyright 2009-2011, Alan Calvert
// Copyright 2014, Will Godfrey    

// This file is part of yoshimi, which is free software: you can redistribute
// it and/or modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.

// yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
// later) for more details.

// You should have received a copy of the GNU General Public License along with
// yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA  02110-1301, USA.

// This file is a derivative of the ZynAddSubFX original, modified October 2014

#include <string>
using namespace std;
#include "ADnoteUI.h"
#include "Misc/ControllableByMIDIUI.h"
#include "SUBnoteUI.h"
#include "EffUI.h"
#include "VirKeyboardUI.h"
#include "ConfigUI.h"
#include "BankUI.h"
#include "PartUI.h"
#include "MicrotonalUI.h"
#include "PresetsUI.h"
#include "ParametersUI.h"
#include "ConsoleUI.h"
#include "MasterMiscUI.h"
#include "Misc/SynthEngine.h"
#include "Misc/MiscFuncs.h"
class MasterUI;
      #include "MidiControllerUI.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Spinner.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Pack.H>

class MasterUI : private MiscFuncs, public ControllableByMIDIUI {
public:
  MasterUI(SynthEngine *_synth);
  ~MasterUI();
  void Init(const char *_label);
  Fl_Double_Window* make_window();
  Fl_Double_Window *masterwindow;
private:
  inline void cb_masterwindow_i(Fl_Double_Window*, void*);
  static void cb_masterwindow(Fl_Double_Window*, void*);
public:
  Fl_Menu_Bar *mastermenu;
  static Fl_Menu_Item menu_mastermenu[];
private:
  inline void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
  inline void cb_MidiControllers_i(Fl_Menu_*, void*);
  static void cb_MidiControllers(Fl_Menu_*, void*);
  inline void cb_New_i(Fl_Menu_*, void*);
  static void cb_New(Fl_Menu_*, void*);
  inline void cb_New1_i(Fl_Menu_*, void*);
  static void cb_New1(Fl_Menu_*, void*);
  inline void cb_Settings_i(Fl_Menu_*, void*);
  static void cb_Settings(Fl_Menu_*, void*);
  inline void cb_E_i(Fl_Menu_*, void*);
  static void cb_E(Fl_Menu_*, void*);
  inline void cb_Clear_i(Fl_Menu_*, void*);
  static void cb_Clear(Fl_Menu_*, void*);
  inline void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  inline void cb_Save_i(Fl_Menu_*, void*);
  static void cb_Save(Fl_Menu_*, void*);
  inline void cb_Show_i(Fl_Menu_*, void*);
  static void cb_Show(Fl_Menu_*, void*);
  inline void cb_Show1_i(Fl_Menu_*, void*);
  static void cb_Show1(Fl_Menu_*, void*);
  inline void cb_Show2_i(Fl_Menu_*, void*);
  static void cb_Show2(Fl_Menu_*, void*);
  inline void cb_Virtual_i(Fl_Menu_*, void*);
  static void cb_Virtual(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Parameters;
  static Fl_Menu_Item *RecentParams;
private:
  inline void cb_RecentParams_i(Fl_Menu_*, void*);
  static void cb_RecentParams(Fl_Menu_*, void*);
  inline void cb_Open1_i(Fl_Menu_*, void*);
  static void cb_Open1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save;
private:
  inline void cb_Save1_i(Fl_Menu_*, void*);
  static void cb_Save1(Fl_Menu_*, void*);
  inline void cb_Clear1_i(Fl_Menu_*, void*);
  static void cb_Clear1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Scales;
private:
  inline void cb_Load_i(Fl_Menu_*, void*);
  static void cb_Load(Fl_Menu_*, void*);
  inline void cb_Save2_i(Fl_Menu_*, void*);
  static void cb_Save2(Fl_Menu_*, void*);
  inline void cb_Show3_i(Fl_Menu_*, void*);
  static void cb_Show3(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *saveState;
private:
  inline void cb_saveState_i(Fl_Menu_*, void*);
  static void cb_saveState(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *loadState;
private:
  inline void cb_loadState_i(Fl_Menu_*, void*);
  static void cb_loadState(Fl_Menu_*, void*);
public:
  Fl_Group *MasterControls;
  Fl_Spinner *masterkeyshift;
private:
  inline void cb_masterkeyshift_i(Fl_Spinner*, void*);
  static void cb_masterkeyshift(Fl_Spinner*, void*);
public:
  WidgetPDial *globalfinedetune;
private:
  inline void cb_globalfinedetune_i(WidgetPDial*, void*);
  static void cb_globalfinedetune(WidgetPDial*, void*);
  inline void cb_Reset_i(Fl_Button*, void*);
  static void cb_Reset(Fl_Button*, void*);
  inline void cb_Stop_i(Fl_Button*, void*);
  static void cb_Stop(Fl_Button*, void*);
public:
  WidgetPDial *mastervolumedial;
private:
  inline void cb_mastervolumedial_i(WidgetPDial*, void*);
  static void cb_mastervolumedial(WidgetPDial*, void*);
  inline void cb_virKbd_i(Fl_Button*, void*);
  static void cb_virKbd(Fl_Button*, void*);
  inline void cb_Panel_i(Fl_Button*, void*);
  static void cb_Panel(Fl_Button*, void*);
public:
  Fl_Tabs *sysinsgroup;
private:
  inline void cb_sysinsgroup_i(Fl_Tabs*, void*);
  static void cb_sysinsgroup(Fl_Tabs*, void*);
public:
  Fl_Group *SystemEffectsGrp;
  Fl_Spinner *syseffnocounter;
private:
  inline void cb_syseffnocounter_i(Fl_Spinner*, void*);
  static void cb_syseffnocounter(Fl_Spinner*, void*);
public:
  Fl_Choice *sysefftype;
private:
  inline void cb_sysefftype_i(Fl_Choice*, void*);
  static void cb_sysefftype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_sysefftype[];
  inline void cb_Send_i(Fl_Button*, void*);
  static void cb_Send(Fl_Button*, void*);
  inline void cb_C_i(Fl_Button*, void*);
  static void cb_C(Fl_Button*, void*);
  inline void cb_P_i(Fl_Button*, void*);
  static void cb_P(Fl_Button*, void*);
public:
  Fl_Group *InsertionEffectsGrp;
  Fl_Spinner *inseffnocounter;
private:
  inline void cb_inseffnocounter_i(Fl_Spinner*, void*);
  static void cb_inseffnocounter(Fl_Spinner*, void*);
public:
  Fl_Choice *insefftype;
private:
  inline void cb_insefftype_i(Fl_Choice*, void*);
  static void cb_insefftype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_insefftype[];
public:
  Fl_Choice *inseffpart;
private:
  inline void cb_inseffpart_i(Fl_Choice*, void*);
  static void cb_inseffpart(Fl_Choice*, void*);
  inline void cb_C1_i(Fl_Button*, void*);
  static void cb_C1(Fl_Button*, void*);
  inline void cb_P1_i(Fl_Button*, void*);
  static void cb_P1(Fl_Button*, void*);
public:
  Fl_Button *Reports;
private:
  inline void cb_Reports_i(Fl_Button*, void*);
  static void cb_Reports(Fl_Button*, void*);
public:
  Fl_Group *syseffectuigroup;
  EffUI *syseffectui;
  Fl_Group *inseffectuigroup;
  EffUI *inseffectui;
  Fl_Group *partuigroup;
  PartUI *partui;
  VUMeter *vumeter;
  Fl_Spinner *npartcounter;
private:
  inline void cb_npartcounter_i(Fl_Spinner*, void*);
  static void cb_npartcounter(Fl_Spinner*, void*);
public:
  Fl_Spinner *maxparts;
private:
  inline void cb_maxparts_i(Fl_Spinner*, void*);
  static void cb_maxparts(Fl_Spinner*, void*);
public:
  Fl_Double_Window *aboutwindow;
private:
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Double_Window *syseffsendwindow;
private:
  inline void cb_Close1_i(Fl_Button*, void*);
  static void cb_Close1(Fl_Button*, void*);
public:
  Fl_Double_Window *panelwindow;
  Fl_Pack *Panelpack1;
  Fl_Box *Panelbox1;
  Fl_Pack *Panelpack2;
  Fl_Box *PanelBox2;
  Fl_Button *Panelclose;
private:
  inline void cb_Panelclose_i(Fl_Button*, void*);
  static void cb_Panelclose(Fl_Button*, void*);
public:
  Fl_Button *Panelrefresh;
private:
  inline void cb_Panelrefresh_i(Fl_Button*, void*);
  static void cb_Panelrefresh(Fl_Button*, void*);
  inline void cb_Change_i(Fl_Button*, void*);
  static void cb_Change(Fl_Button*, void*);
  inline void cb_Change1_i(Fl_Button*, void*);
  static void cb_Change1(Fl_Button*, void*);
public:
  Fl_Choice *Panelgroups;
private:
  inline void cb_Panelgroups_i(Fl_Choice*, void*);
  static void cb_Panelgroups(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Panelgroups[];
public:
  Fl_Choice *Panelsmallgroups;
private:
  inline void cb_Panelsmallgroups_i(Fl_Choice*, void*);
  static void cb_Panelsmallgroups(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Panelsmallgroups[];
public:
  void updatesendwindow();
  void updatepanel();
  void updatepart();
  void updatepartprogram(int npart);
  void updateeffects(int data);
  void setMasterLabel(string name);
  void do_new_master();
  void do_load_master(bool updatehistory, const char* file);
  void do_save_master(const char* file = NULL);
  void refresh_master_ui();
private:
  void checkmaxparts();
public:
  void strategicRetreat(void);
  void Log(string msg);
private:
  void showSysEfxUI(void);
  void showInsEfxUI(void);
public:
  void setinspartlist();
  PresetsUI * getPresetsUi();
  void resetPartsClip();
  string set_part_window_title(string prefix);
  void setPartVolWidget(int _npart, float _value);
  void setPartPanWidget(int _npart, float _value);
  void setPanelPartVolWidget(int _npart, float _value);
  void setPanelPartPanWidget(int _npart, float _value);
  void setPartMidiWidget(int _npart, unsigned char _value);
  void setPanelPartMidiWidget(int _npart, unsigned char _value);
  void setPanelPartLabel(int _npart, int _engine);
  void showInstrumentEditWindow(int _npart);
  void updateBankRootDirs();
  SynthEngine * getSynth();
  void refresh();
  ConfigUI *configui; 
private:
  ParametersUI *paramsui; 
public:
  BankUI *bankui; 
private:
  MicrotonalUI *microtonalui; 
  VirKeyboard *virkeyboard; 
  int ninseff; 
  int npart; 
  int nsyseff; 
  SysEffSend *syseffsend[NUM_SYS_EFX][NUM_SYS_EFX]; 
  string masterwindowlabel; 
public:
  Panellistitem *panellistitem[NUM_MIDI_PARTS]; 
  ConsoleUI *yoshiLog; 
private:
  string laststatefile; 
  PresetsUI *presetsui; 
  SynthEngine *synth; 
  string panelwindowlabel; 
public:
  int panelgroup; 
};
#endif
